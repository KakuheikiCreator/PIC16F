

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Jul 17 09:59:44 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	dabs	1,0x220,48
    62                           	dabs	1,0x1A0,80
    63                           	dabs	1,0x149,39
    64                           	dabs	1,0x20C9,0,_sMemoryMap
    65                           	dabs	1,0x7E,2
    66  0000                     
    67                           ; Version 2.05
    68                           ; Generated 20/12/2018 GMT
    69                           ; 
    70                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC16F1827 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000D                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0014                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  001E                     	;# 
   129  001F                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  0091                     	;# 
   133  0092                     	;# 
   134  0093                     	;# 
   135  0094                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  0111                     	;# 
   150  0112                     	;# 
   151  0113                     	;# 
   152  0114                     	;# 
   153  0115                     	;# 
   154  0116                     	;# 
   155  0117                     	;# 
   156  0118                     	;# 
   157  0119                     	;# 
   158  011A                     	;# 
   159  011B                     	;# 
   160  011D                     	;# 
   161  011E                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0193                     	;# 
   170  0194                     	;# 
   171  0195                     	;# 
   172  0196                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019F                     	;# 
   184  020C                     	;# 
   185  020D                     	;# 
   186  0211                     	;# 
   187  0211                     	;# 
   188  0212                     	;# 
   189  0212                     	;# 
   190  0213                     	;# 
   191  0213                     	;# 
   192  0214                     	;# 
   193  0214                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0216                     	;# 
   198  0216                     	;# 
   199  0217                     	;# 
   200  0217                     	;# 
   201  0219                     	;# 
   202  021A                     	;# 
   203  021B                     	;# 
   204  021C                     	;# 
   205  021D                     	;# 
   206  021E                     	;# 
   207  021F                     	;# 
   208  0291                     	;# 
   209  0291                     	;# 
   210  0292                     	;# 
   211  0293                     	;# 
   212  0294                     	;# 
   213  0295                     	;# 
   214  0295                     	;# 
   215  0296                     	;# 
   216  0298                     	;# 
   217  0298                     	;# 
   218  0299                     	;# 
   219  029A                     	;# 
   220  029B                     	;# 
   221  029C                     	;# 
   222  029C                     	;# 
   223  029D                     	;# 
   224  029E                     	;# 
   225  029E                     	;# 
   226  0311                     	;# 
   227  0311                     	;# 
   228  0312                     	;# 
   229  0313                     	;# 
   230  0318                     	;# 
   231  0318                     	;# 
   232  0319                     	;# 
   233  031A                     	;# 
   234  0394                     	;# 
   235  0395                     	;# 
   236  0396                     	;# 
   237  039A                     	;# 
   238  039C                     	;# 
   239  039D                     	;# 
   240  039E                     	;# 
   241  039F                     	;# 
   242  0415                     	;# 
   243  0416                     	;# 
   244  0417                     	;# 
   245  041C                     	;# 
   246  041D                     	;# 
   247  041E                     	;# 
   248  0FE4                     	;# 
   249  0FE5                     	;# 
   250  0FE6                     	;# 
   251  0FE7                     	;# 
   252  0FE8                     	;# 
   253  0FE9                     	;# 
   254  0FEA                     	;# 
   255  0FEB                     	;# 
   256  0FED                     	;# 
   257  0FEE                     	;# 
   258  0FEF                     	;# 
   259  0000                     	;# 
   260  0001                     	;# 
   261  0002                     	;# 
   262  0003                     	;# 
   263  0004                     	;# 
   264  0005                     	;# 
   265  0006                     	;# 
   266  0007                     	;# 
   267  0008                     	;# 
   268  0009                     	;# 
   269  000A                     	;# 
   270  000B                     	;# 
   271  000C                     	;# 
   272  000D                     	;# 
   273  0011                     	;# 
   274  0012                     	;# 
   275  0013                     	;# 
   276  0014                     	;# 
   277  0015                     	;# 
   278  0016                     	;# 
   279  0016                     	;# 
   280  0017                     	;# 
   281  0018                     	;# 
   282  0019                     	;# 
   283  001A                     	;# 
   284  001B                     	;# 
   285  001C                     	;# 
   286  001E                     	;# 
   287  001F                     	;# 
   288  008C                     	;# 
   289  008D                     	;# 
   290  0091                     	;# 
   291  0092                     	;# 
   292  0093                     	;# 
   293  0094                     	;# 
   294  0095                     	;# 
   295  0096                     	;# 
   296  0097                     	;# 
   297  0098                     	;# 
   298  0099                     	;# 
   299  009A                     	;# 
   300  009B                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  010C                     	;# 
   306  010D                     	;# 
   307  0111                     	;# 
   308  0112                     	;# 
   309  0113                     	;# 
   310  0114                     	;# 
   311  0115                     	;# 
   312  0116                     	;# 
   313  0117                     	;# 
   314  0118                     	;# 
   315  0119                     	;# 
   316  011A                     	;# 
   317  011B                     	;# 
   318  011D                     	;# 
   319  011E                     	;# 
   320  018C                     	;# 
   321  018D                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0193                     	;# 
   328  0194                     	;# 
   329  0195                     	;# 
   330  0196                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020C                     	;# 
   343  020D                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0219                     	;# 
   360  021A                     	;# 
   361  021B                     	;# 
   362  021C                     	;# 
   363  021D                     	;# 
   364  021E                     	;# 
   365  021F                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0294                     	;# 
   371  0295                     	;# 
   372  0295                     	;# 
   373  0296                     	;# 
   374  0298                     	;# 
   375  0298                     	;# 
   376  0299                     	;# 
   377  029A                     	;# 
   378  029B                     	;# 
   379  029C                     	;# 
   380  029C                     	;# 
   381  029D                     	;# 
   382  029E                     	;# 
   383  029E                     	;# 
   384  0311                     	;# 
   385  0311                     	;# 
   386  0312                     	;# 
   387  0313                     	;# 
   388  0318                     	;# 
   389  0318                     	;# 
   390  0319                     	;# 
   391  031A                     	;# 
   392  0394                     	;# 
   393  0395                     	;# 
   394  0396                     	;# 
   395  039A                     	;# 
   396  039C                     	;# 
   397  039D                     	;# 
   398  039E                     	;# 
   399  039F                     	;# 
   400  0415                     	;# 
   401  0416                     	;# 
   402  0417                     	;# 
   403  041C                     	;# 
   404  041D                     	;# 
   405  041E                     	;# 
   406  0FE4                     	;# 
   407  0FE5                     	;# 
   408  0FE6                     	;# 
   409  0FE7                     	;# 
   410  0FE8                     	;# 
   411  0FE9                     	;# 
   412  0FEA                     	;# 
   413  0FEB                     	;# 
   414  0FED                     	;# 
   415  0FEE                     	;# 
   416  0FEF                     	;# 
   417  0000                     	;# 
   418  0001                     	;# 
   419  0002                     	;# 
   420  0003                     	;# 
   421  0004                     	;# 
   422  0005                     	;# 
   423  0006                     	;# 
   424  0007                     	;# 
   425  0008                     	;# 
   426  0009                     	;# 
   427  000A                     	;# 
   428  000B                     	;# 
   429  000C                     	;# 
   430  000D                     	;# 
   431  0011                     	;# 
   432  0012                     	;# 
   433  0013                     	;# 
   434  0014                     	;# 
   435  0015                     	;# 
   436  0016                     	;# 
   437  0016                     	;# 
   438  0017                     	;# 
   439  0018                     	;# 
   440  0019                     	;# 
   441  001A                     	;# 
   442  001B                     	;# 
   443  001C                     	;# 
   444  001E                     	;# 
   445  001F                     	;# 
   446  008C                     	;# 
   447  008D                     	;# 
   448  0091                     	;# 
   449  0092                     	;# 
   450  0093                     	;# 
   451  0094                     	;# 
   452  0095                     	;# 
   453  0096                     	;# 
   454  0097                     	;# 
   455  0098                     	;# 
   456  0099                     	;# 
   457  009A                     	;# 
   458  009B                     	;# 
   459  009B                     	;# 
   460  009C                     	;# 
   461  009D                     	;# 
   462  009E                     	;# 
   463  010C                     	;# 
   464  010D                     	;# 
   465  0111                     	;# 
   466  0112                     	;# 
   467  0113                     	;# 
   468  0114                     	;# 
   469  0115                     	;# 
   470  0116                     	;# 
   471  0117                     	;# 
   472  0118                     	;# 
   473  0119                     	;# 
   474  011A                     	;# 
   475  011B                     	;# 
   476  011D                     	;# 
   477  011E                     	;# 
   478  018C                     	;# 
   479  018D                     	;# 
   480  0191                     	;# 
   481  0191                     	;# 
   482  0192                     	;# 
   483  0193                     	;# 
   484  0193                     	;# 
   485  0193                     	;# 
   486  0194                     	;# 
   487  0195                     	;# 
   488  0196                     	;# 
   489  0199                     	;# 
   490  019A                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019B                     	;# 
   494  019B                     	;# 
   495  019C                     	;# 
   496  019C                     	;# 
   497  019D                     	;# 
   498  019E                     	;# 
   499  019F                     	;# 
   500  020C                     	;# 
   501  020D                     	;# 
   502  0211                     	;# 
   503  0211                     	;# 
   504  0212                     	;# 
   505  0212                     	;# 
   506  0213                     	;# 
   507  0213                     	;# 
   508  0214                     	;# 
   509  0214                     	;# 
   510  0215                     	;# 
   511  0215                     	;# 
   512  0215                     	;# 
   513  0216                     	;# 
   514  0216                     	;# 
   515  0217                     	;# 
   516  0217                     	;# 
   517  0219                     	;# 
   518  021A                     	;# 
   519  021B                     	;# 
   520  021C                     	;# 
   521  021D                     	;# 
   522  021E                     	;# 
   523  021F                     	;# 
   524  0291                     	;# 
   525  0291                     	;# 
   526  0292                     	;# 
   527  0293                     	;# 
   528  0294                     	;# 
   529  0295                     	;# 
   530  0295                     	;# 
   531  0296                     	;# 
   532  0298                     	;# 
   533  0298                     	;# 
   534  0299                     	;# 
   535  029A                     	;# 
   536  029B                     	;# 
   537  029C                     	;# 
   538  029C                     	;# 
   539  029D                     	;# 
   540  029E                     	;# 
   541  029E                     	;# 
   542  0311                     	;# 
   543  0311                     	;# 
   544  0312                     	;# 
   545  0313                     	;# 
   546  0318                     	;# 
   547  0318                     	;# 
   548  0319                     	;# 
   549  031A                     	;# 
   550  0394                     	;# 
   551  0395                     	;# 
   552  0396                     	;# 
   553  039A                     	;# 
   554  039C                     	;# 
   555  039D                     	;# 
   556  039E                     	;# 
   557  039F                     	;# 
   558  0415                     	;# 
   559  0416                     	;# 
   560  0417                     	;# 
   561  041C                     	;# 
   562  041D                     	;# 
   563  041E                     	;# 
   564  0FE4                     	;# 
   565  0FE5                     	;# 
   566  0FE6                     	;# 
   567  0FE7                     	;# 
   568  0FE8                     	;# 
   569  0FE9                     	;# 
   570  0FEA                     	;# 
   571  0FEB                     	;# 
   572  0FED                     	;# 
   573  0FEE                     	;# 
   574  0FEF                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000D                     	;# 
   589  0011                     	;# 
   590  0012                     	;# 
   591  0013                     	;# 
   592  0014                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0016                     	;# 
   596  0017                     	;# 
   597  0018                     	;# 
   598  0019                     	;# 
   599  001A                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001E                     	;# 
   603  001F                     	;# 
   604  008C                     	;# 
   605  008D                     	;# 
   606  0091                     	;# 
   607  0092                     	;# 
   608  0093                     	;# 
   609  0094                     	;# 
   610  0095                     	;# 
   611  0096                     	;# 
   612  0097                     	;# 
   613  0098                     	;# 
   614  0099                     	;# 
   615  009A                     	;# 
   616  009B                     	;# 
   617  009B                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009E                     	;# 
   621  010C                     	;# 
   622  010D                     	;# 
   623  0111                     	;# 
   624  0112                     	;# 
   625  0113                     	;# 
   626  0114                     	;# 
   627  0115                     	;# 
   628  0116                     	;# 
   629  0117                     	;# 
   630  0118                     	;# 
   631  0119                     	;# 
   632  011A                     	;# 
   633  011B                     	;# 
   634  011D                     	;# 
   635  011E                     	;# 
   636  018C                     	;# 
   637  018D                     	;# 
   638  0191                     	;# 
   639  0191                     	;# 
   640  0192                     	;# 
   641  0193                     	;# 
   642  0193                     	;# 
   643  0193                     	;# 
   644  0194                     	;# 
   645  0195                     	;# 
   646  0196                     	;# 
   647  0199                     	;# 
   648  019A                     	;# 
   649  019B                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019B                     	;# 
   653  019C                     	;# 
   654  019C                     	;# 
   655  019D                     	;# 
   656  019E                     	;# 
   657  019F                     	;# 
   658  020C                     	;# 
   659  020D                     	;# 
   660  0211                     	;# 
   661  0211                     	;# 
   662  0212                     	;# 
   663  0212                     	;# 
   664  0213                     	;# 
   665  0213                     	;# 
   666  0214                     	;# 
   667  0214                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0216                     	;# 
   672  0216                     	;# 
   673  0217                     	;# 
   674  0217                     	;# 
   675  0219                     	;# 
   676  021A                     	;# 
   677  021B                     	;# 
   678  021C                     	;# 
   679  021D                     	;# 
   680  021E                     	;# 
   681  021F                     	;# 
   682  0291                     	;# 
   683  0291                     	;# 
   684  0292                     	;# 
   685  0293                     	;# 
   686  0294                     	;# 
   687  0295                     	;# 
   688  0295                     	;# 
   689  0296                     	;# 
   690  0298                     	;# 
   691  0298                     	;# 
   692  0299                     	;# 
   693  029A                     	;# 
   694  029B                     	;# 
   695  029C                     	;# 
   696  029C                     	;# 
   697  029D                     	;# 
   698  029E                     	;# 
   699  029E                     	;# 
   700  0311                     	;# 
   701  0311                     	;# 
   702  0312                     	;# 
   703  0313                     	;# 
   704  0318                     	;# 
   705  0318                     	;# 
   706  0319                     	;# 
   707  031A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  039A                     	;# 
   712  039C                     	;# 
   713  039D                     	;# 
   714  039E                     	;# 
   715  039F                     	;# 
   716  0415                     	;# 
   717  0416                     	;# 
   718  0417                     	;# 
   719  041C                     	;# 
   720  041D                     	;# 
   721  041E                     	;# 
   722  0FE4                     	;# 
   723  0FE5                     	;# 
   724  0FE6                     	;# 
   725  0FE7                     	;# 
   726  0FE8                     	;# 
   727  0FE9                     	;# 
   728  0FEA                     	;# 
   729  0FEB                     	;# 
   730  0FED                     	;# 
   731  0FEE                     	;# 
   732  0FEF                     	;# 
   733  0000                     	;# 
   734  0001                     	;# 
   735  0002                     	;# 
   736  0003                     	;# 
   737  0004                     	;# 
   738  0005                     	;# 
   739  0006                     	;# 
   740  0007                     	;# 
   741  0008                     	;# 
   742  0009                     	;# 
   743  000A                     	;# 
   744  000B                     	;# 
   745  000C                     	;# 
   746  000D                     	;# 
   747  0011                     	;# 
   748  0012                     	;# 
   749  0013                     	;# 
   750  0014                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  008D                     	;# 
   764  0091                     	;# 
   765  0092                     	;# 
   766  0093                     	;# 
   767  0094                     	;# 
   768  0095                     	;# 
   769  0096                     	;# 
   770  0097                     	;# 
   771  0098                     	;# 
   772  0099                     	;# 
   773  009A                     	;# 
   774  009B                     	;# 
   775  009B                     	;# 
   776  009C                     	;# 
   777  009D                     	;# 
   778  009E                     	;# 
   779  010C                     	;# 
   780  010D                     	;# 
   781  0111                     	;# 
   782  0112                     	;# 
   783  0113                     	;# 
   784  0114                     	;# 
   785  0115                     	;# 
   786  0116                     	;# 
   787  0117                     	;# 
   788  0118                     	;# 
   789  0119                     	;# 
   790  011A                     	;# 
   791  011B                     	;# 
   792  011D                     	;# 
   793  011E                     	;# 
   794  018C                     	;# 
   795  018D                     	;# 
   796  0191                     	;# 
   797  0191                     	;# 
   798  0192                     	;# 
   799  0193                     	;# 
   800  0193                     	;# 
   801  0193                     	;# 
   802  0194                     	;# 
   803  0195                     	;# 
   804  0196                     	;# 
   805  0199                     	;# 
   806  019A                     	;# 
   807  019B                     	;# 
   808  019B                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019C                     	;# 
   812  019C                     	;# 
   813  019D                     	;# 
   814  019E                     	;# 
   815  019F                     	;# 
   816  020C                     	;# 
   817  020D                     	;# 
   818  0211                     	;# 
   819  0211                     	;# 
   820  0212                     	;# 
   821  0212                     	;# 
   822  0213                     	;# 
   823  0213                     	;# 
   824  0214                     	;# 
   825  0214                     	;# 
   826  0215                     	;# 
   827  0215                     	;# 
   828  0215                     	;# 
   829  0216                     	;# 
   830  0216                     	;# 
   831  0217                     	;# 
   832  0217                     	;# 
   833  0219                     	;# 
   834  021A                     	;# 
   835  021B                     	;# 
   836  021C                     	;# 
   837  021D                     	;# 
   838  021E                     	;# 
   839  021F                     	;# 
   840  0291                     	;# 
   841  0291                     	;# 
   842  0292                     	;# 
   843  0293                     	;# 
   844  0294                     	;# 
   845  0295                     	;# 
   846  0295                     	;# 
   847  0296                     	;# 
   848  0298                     	;# 
   849  0298                     	;# 
   850  0299                     	;# 
   851  029A                     	;# 
   852  029B                     	;# 
   853  029C                     	;# 
   854  029C                     	;# 
   855  029D                     	;# 
   856  029E                     	;# 
   857  029E                     	;# 
   858  0311                     	;# 
   859  0311                     	;# 
   860  0312                     	;# 
   861  0313                     	;# 
   862  0318                     	;# 
   863  0318                     	;# 
   864  0319                     	;# 
   865  031A                     	;# 
   866  0394                     	;# 
   867  0395                     	;# 
   868  0396                     	;# 
   869  039A                     	;# 
   870  039C                     	;# 
   871  039D                     	;# 
   872  039E                     	;# 
   873  039F                     	;# 
   874  0415                     	;# 
   875  0416                     	;# 
   876  0417                     	;# 
   877  041C                     	;# 
   878  041D                     	;# 
   879  041E                     	;# 
   880  0FE4                     	;# 
   881  0FE5                     	;# 
   882  0FE6                     	;# 
   883  0FE7                     	;# 
   884  0FE8                     	;# 
   885  0FE9                     	;# 
   886  0FEA                     	;# 
   887  0FEB                     	;# 
   888  0FED                     	;# 
   889  0FEE                     	;# 
   890  0FEF                     	;# 
   891  0000                     	;# 
   892  0001                     	;# 
   893  0002                     	;# 
   894  0003                     	;# 
   895  0004                     	;# 
   896  0005                     	;# 
   897  0006                     	;# 
   898  0007                     	;# 
   899  0008                     	;# 
   900  0009                     	;# 
   901  000A                     	;# 
   902  000B                     	;# 
   903  000C                     	;# 
   904  000D                     	;# 
   905  0011                     	;# 
   906  0012                     	;# 
   907  0013                     	;# 
   908  0014                     	;# 
   909  0015                     	;# 
   910  0016                     	;# 
   911  0016                     	;# 
   912  0017                     	;# 
   913  0018                     	;# 
   914  0019                     	;# 
   915  001A                     	;# 
   916  001B                     	;# 
   917  001C                     	;# 
   918  001E                     	;# 
   919  001F                     	;# 
   920  008C                     	;# 
   921  008D                     	;# 
   922  0091                     	;# 
   923  0092                     	;# 
   924  0093                     	;# 
   925  0094                     	;# 
   926  0095                     	;# 
   927  0096                     	;# 
   928  0097                     	;# 
   929  0098                     	;# 
   930  0099                     	;# 
   931  009A                     	;# 
   932  009B                     	;# 
   933  009B                     	;# 
   934  009C                     	;# 
   935  009D                     	;# 
   936  009E                     	;# 
   937  010C                     	;# 
   938  010D                     	;# 
   939  0111                     	;# 
   940  0112                     	;# 
   941  0113                     	;# 
   942  0114                     	;# 
   943  0115                     	;# 
   944  0116                     	;# 
   945  0117                     	;# 
   946  0118                     	;# 
   947  0119                     	;# 
   948  011A                     	;# 
   949  011B                     	;# 
   950  011D                     	;# 
   951  011E                     	;# 
   952  018C                     	;# 
   953  018D                     	;# 
   954  0191                     	;# 
   955  0191                     	;# 
   956  0192                     	;# 
   957  0193                     	;# 
   958  0193                     	;# 
   959  0193                     	;# 
   960  0194                     	;# 
   961  0195                     	;# 
   962  0196                     	;# 
   963  0199                     	;# 
   964  019A                     	;# 
   965  019B                     	;# 
   966  019B                     	;# 
   967  019B                     	;# 
   968  019B                     	;# 
   969  019C                     	;# 
   970  019C                     	;# 
   971  019D                     	;# 
   972  019E                     	;# 
   973  019F                     	;# 
   974  020C                     	;# 
   975  020D                     	;# 
   976  0211                     	;# 
   977  0211                     	;# 
   978  0212                     	;# 
   979  0212                     	;# 
   980  0213                     	;# 
   981  0213                     	;# 
   982  0214                     	;# 
   983  0214                     	;# 
   984  0215                     	;# 
   985  0215                     	;# 
   986  0215                     	;# 
   987  0216                     	;# 
   988  0216                     	;# 
   989  0217                     	;# 
   990  0217                     	;# 
   991  0219                     	;# 
   992  021A                     	;# 
   993  021B                     	;# 
   994  021C                     	;# 
   995  021D                     	;# 
   996  021E                     	;# 
   997  021F                     	;# 
   998  0291                     	;# 
   999  0291                     	;# 
  1000  0292                     	;# 
  1001  0293                     	;# 
  1002  0294                     	;# 
  1003  0295                     	;# 
  1004  0295                     	;# 
  1005  0296                     	;# 
  1006  0298                     	;# 
  1007  0298                     	;# 
  1008  0299                     	;# 
  1009  029A                     	;# 
  1010  029B                     	;# 
  1011  029C                     	;# 
  1012  029C                     	;# 
  1013  029D                     	;# 
  1014  029E                     	;# 
  1015  029E                     	;# 
  1016  0311                     	;# 
  1017  0311                     	;# 
  1018  0312                     	;# 
  1019  0313                     	;# 
  1020  0318                     	;# 
  1021  0318                     	;# 
  1022  0319                     	;# 
  1023  031A                     	;# 
  1024  0394                     	;# 
  1025  0395                     	;# 
  1026  0396                     	;# 
  1027  039A                     	;# 
  1028  039C                     	;# 
  1029  039D                     	;# 
  1030  039E                     	;# 
  1031  039F                     	;# 
  1032  0415                     	;# 
  1033  0416                     	;# 
  1034  0417                     	;# 
  1035  041C                     	;# 
  1036  041D                     	;# 
  1037  041E                     	;# 
  1038  0FE4                     	;# 
  1039  0FE5                     	;# 
  1040  0FE6                     	;# 
  1041  0FE7                     	;# 
  1042  0FE8                     	;# 
  1043  0FE9                     	;# 
  1044  0FEA                     	;# 
  1045  0FEB                     	;# 
  1046  0FED                     	;# 
  1047  0FEE                     	;# 
  1048  0FEF                     	;_sMemoryMap
  1049                           
  1050                           	psect	idataBANK0
  1051  0C02                     __pidataBANK0:	
  1052                           
  1053                           ;initializer for _pvSSP2Func
  1054  0C02  3403               	retlw	low _vDmyCallback
  1055  0C03  3400               	retlw	high _vDmyCallback
  1056                           
  1057                           ;initializer for _pvSSP1Func
  1058  0C04  3403               	retlw	low _vDmyCallback
  1059  0C05  3400               	retlw	high _vDmyCallback
  1060  0015                     _TMR0	set	21
  1061  000D                     _PORTB	set	13
  1062  000C                     _PORTA	set	12
  1063  00A1                     _BCL2IF	set	161
  1064  00A0                     _SSP2IF	set	160
  1065  0093                     _BCL1IF	set	147
  1066  008B                     _SSP1IF	set	139
  1067  006B                     _RB3	set	107
  1068  0068                     _RB0	set	104
  1069  005F                     _GIE	set	95
  1070  005E                     _PEIE	set	94
  1071  005D                     _TMR0IE	set	93
  1072  005A                     _TMR0IF	set	90
  1073  0095                     _OPTION_REG	set	149
  1074  008D                     _TRISB	set	141
  1075  008C                     _TRISA	set	140
  1076  0099                     _OSCCON	set	153
  1077  04A1                     _BCL2IE	set	1185
  1078  04A0                     _SSP2IE	set	1184
  1079  0493                     _BCL1IE	set	1171
  1080  048B                     _SSP1IE	set	1163
  1081  018D                     _ANSELB	set	397
  1082  018C                     _ANSELA	set	396
  1083  021C                     _SSP2STATbits	set	540
  1084  0214                     _SSP1STATbits	set	532
  1085  021D                     _SSP2CON1bits	set	541
  1086  0215                     _SSP1CON1bits	set	533
  1087  0219                     _SSP2BUF	set	537
  1088  021E                     _SSP2CON2bits	set	542
  1089  021B                     _SSP2MSK	set	539
  1090  021F                     _SSP2CON3	set	543
  1091  0213                     _SSP1MSK	set	531
  1092  0217                     _SSP1CON3	set	535
  1093  021E                     _SSP2CON2	set	542
  1094  021D                     _SSP2CON1	set	541
  1095  021A                     _SSP2ADD	set	538
  1096  021C                     _SSP2STAT	set	540
  1097  0216                     _SSP1CON2	set	534
  1098  0215                     _SSP1CON1	set	533
  1099  0212                     _SSP1ADD	set	530
  1100  0214                     _SSP1STAT	set	532
  1101  0216                     _SSP1CON2bits	set	534
  1102  0211                     _SSP1BUF	set	529
  1103                           
  1104                           ; #config settings
  1105  0000                     
  1106                           	psect	cinit
  1107  000F                     start_initialization:	
  1108  000F                     __initialization:		;BIGRAM
  1109                           
  1110                           ; Initialize objects allocated to BANK0
  1111  000F  318C  2402  3180   	fcall	__pidataBANK0	;fetch initializer
  1112  0012  00DA               	movwf	__pdataBANK0& (0+127)
  1113  0013  318C  2403  3180   	fcall	__pidataBANK0+1	;fetch initializer
  1114  0016  00DB               	movwf	(__pdataBANK0+1)& (0+127)
  1115  0017  318C  2404  3180   	fcall	__pidataBANK0+2	;fetch initializer
  1116  001A  00DC               	movwf	(__pdataBANK0+2)& (0+127)
  1117  001B  318C  2405  3180   	fcall	__pidataBANK0+3	;fetch initializer
  1118  001E  00DD               	movwf	(__pdataBANK0+3)& (0+127)
  1119                           
  1120                           ; Clear objects allocated to BIGRAM
  1121  001F  30C9               	movlw	low (0+8393)
  1122  0020  0084               	movwf	4
  1123  0021  3020               	movlw	high (0+8393)
  1124  0022  0085               	movwf	5
  1125  0023  30A7               	movlw	167
  1126  0024  00FE               	movwf	btemp
  1127  0025  3000               	movlw	0
  1128  0026  00FF               	movwf	btemp+1
  1129  0027  318C  2448         	fcall	clear_ram0
  1130                           
  1131                           ; Clear objects allocated to BANK0
  1132  0029  01D1               	clrf	__pbssBANK0& (0+127)
  1133  002A  01D2               	clrf	(__pbssBANK0+1)& (0+127)
  1134  002B  01D3               	clrf	(__pbssBANK0+2)& (0+127)
  1135  002C  01D4               	clrf	(__pbssBANK0+3)& (0+127)
  1136  002D  01D5               	clrf	(__pbssBANK0+4)& (0+127)
  1137  002E  01D6               	clrf	(__pbssBANK0+5)& (0+127)
  1138  002F  01D7               	clrf	(__pbssBANK0+6)& (0+127)
  1139  0030  01D8               	clrf	(__pbssBANK0+7)& (0+127)
  1140  0031  01D9               	clrf	(__pbssBANK0+8)& (0+127)
  1141                           
  1142                           ; Clear objects allocated to BANK1
  1143  0032  0021               	movlb	1	; select bank1
  1144  0033  01CD               	clrf	__pbssBANK1& (0+127)
  1145  0034  01CE               	clrf	(__pbssBANK1+1)& (0+127)
  1146  0035  01CF               	clrf	(__pbssBANK1+2)& (0+127)
  1147  0036  01D0               	clrf	(__pbssBANK1+3)& (0+127)
  1148  0037                     end_of_initialization:	
  1149                           ;End of C runtime variable initialization code
  1150                           
  1151  0037                     __end_of__initialization:	
  1152  0037  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1153  0038  0020               	movlb	0
  1154  0039  3181  29FF         	ljmp	_main	;jump to C main() function
  1155                           
  1156                           	psect	bssBANK0
  1157  0051                     __pbssBANK0:	
  1158  0051                     _stStateSSP2:	
  1159  0051                     	ds	2
  1160  0053                     _stStateSSP1:	
  1161  0053                     	ds	2
  1162  0055                     _u8Depth:	
  1163  0055                     	ds	1
  1164  0056                     _spKEYPAD_status:	
  1165  0056                     	ds	1
  1166  0057                     _bMstStartFlgSSP2:	
  1167  0057                     	ds	1
  1168  0058                     _bMstStartFlgSSP1:	
  1169  0058                     	ds	1
  1170  0059                     _u8Status:	
  1171  0059                     	ds	1
  1172                           
  1173                           	psect	dataBANK0
  1174  005A                     __pdataBANK0:	
  1175  005A                     _pvSSP2Func:	
  1176  005A                     	ds	2
  1177  005C                     _pvSSP1Func:	
  1178  005C                     	ds	2
  1179                           
  1180                           	psect	bssBANK1
  1181  00CD                     __pbssBANK1:	
  1182  00CD                     _sAppStatus:	
  1183  00CD                     	ds	4
  1184                           
  1185                           	psect	clrtext
  1186  0C48                     clear_ram0:	
  1187                           ;	Called with FSR0 containing the base address, and
  1188                           ;	btemp/btemp+1 has the size to clear
  1189                           
  1190  0C48  0064               	clrwdt	;clear the watchdog before getting into this loop
  1191  0C49                     clrloop0:	
  1192  0C49  0180               	clrf	0	;clear RAM location pointed to by FSR
  1193  0C4A  3101               	addfsr 0,1
  1194  0C4B  3001               	movlw	1
  1195  0C4C  02FE               	subwf	126,f
  1196  0C4D  3000               	movlw	0
  1197  0C4E  3BFF               	subwfb	127,f
  1198  0C4F  087F               	movf	127,w
  1199  0C50  047E               	iorwf	126,w
  1200  0C51  1903               	btfsc	3,2
  1201  0C52  3400               	retlw	0	;all done for this memory range, return
  1202  0C53  2C49               	goto	clrloop0	;have we reached the end yet?
  1203                           
  1204                           	psect	cstackBANK1
  1205  00A0                     __pcstackBANK1:	
  1206  00A0                     lcd_vDarwLine@u8Msg:	
  1207                           
  1208                           ; 16 bytes @ 0x0
  1209  00A0                     	ds	16
  1210  00B0                     lcd_vDarwLine@u8RowNo:	
  1211                           
  1212                           ; 1 bytes @ 0x10
  1213  00B0                     	ds	1
  1214  00B1                     main@u8EventMap:	
  1215                           
  1216                           ; 1 bytes @ 0x11
  1217  00B1                     	ds	1
  1218  00B2                     main@keypadSts:	
  1219                           
  1220                           ; 27 bytes @ 0x12
  1221  00B2                     	ds	27
  1222                           
  1223                           	psect	cstackCOMMON
  1224  0070                     __pcstackCOMMON:	
  1225  0070                     ?_KEYPAD_vInit:	
  1226  0070                     ?_ST7032_vInitSSP2:	
  1227                           ; 1 bytes @ 0x0
  1228                           
  1229  0070                     ?_evt_u8GetEventMap:	
  1230                           ; 1 bytes @ 0x0
  1231                           
  1232  0070                     ?_lcd_vPowerSetting:	
  1233                           ; 1 bytes @ 0x0
  1234                           
  1235  0070                     ?_ST7032_vSetContrastSSP2:	
  1236                           ; 1 bytes @ 0x0
  1237                           
  1238  0070                     ?_lcd_vCursorSetting:	
  1239                           ; 1 bytes @ 0x0
  1240                           
  1241  0070                     ?_lcd_vDrawCursor:	
  1242                           ; 1 bytes @ 0x0
  1243                           
  1244  0070                     ?_lcd_vDarwLine:	
  1245                           ; 1 bytes @ 0x0
  1246                           
  1247  0070                     ?_lcd_vDrawCGRAM:	
  1248                           ; 1 bytes @ 0x0
  1249                           
  1250  0070                     ?_lcd_vDrawIconRAM:	
  1251                           ; 1 bytes @ 0x0
  1252                           
  1253  0070                     ?_criticalSec_vBegin:	
  1254                           ; 1 bytes @ 0x0
  1255                           
  1256  0070                     ?_criticalSec_vEnd:	
  1257                           ; 1 bytes @ 0x0
  1258                           
  1259  0070                     ?_KEYPAD_bUpdateBuffer:	
  1260                           ; 1 bytes @ 0x0
  1261                           
  1262  0070                     ?_KEYPAD_u8Read:	
  1263                           ; 1 bytes @ 0x0
  1264                           
  1265  0070                     ?_ssp1_vWriteData:	
  1266                           ; 1 bytes @ 0x0
  1267                           
  1268  0070                     ?_ssp1_u8ReadData:	
  1269                           ; 1 bytes @ 0x0
  1270                           
  1271  0070                     ??_ssp1_u8ReadData:	
  1272                           ; 1 bytes @ 0x0
  1273                           
  1274  0070                     ?_I2C_vSlaveIsrSSP1:	
  1275                           ; 1 bytes @ 0x0
  1276                           
  1277  0070                     ?_vMasterWaitSSP2:	
  1278                           ; 1 bytes @ 0x0
  1279                           
  1280  0070                     ?_readColumn:	
  1281                           ; 1 bytes @ 0x0
  1282                           
  1283  0070                     ??_readColumn:	
  1284                           ; 1 bytes @ 0x0
  1285                           
  1286  0070                     ?_vExecCmdSSP2:	
  1287                           ; 1 bytes @ 0x0
  1288                           
  1289  0070                     ?_vExecCmdEndSSP2:	
  1290                           ; 1 bytes @ 0x0
  1291                           
  1292  0070                     ?_bSetCursorSSP2:	
  1293                           ; 1 bytes @ 0x0
  1294                           
  1295  0070                     ?_main:	
  1296                           ; 1 bytes @ 0x0
  1297                           
  1298  0070                     ?_evt_vSetEventMap:	
  1299                           ; 1 bytes @ 0x0
  1300                           
  1301  0070                     ??_evt_vSetEventMap:	
  1302                           ; 1 bytes @ 0x0
  1303                           
  1304  0070                     ?_evt_vSetDrawEvent:	
  1305                           ; 1 bytes @ 0x0
  1306                           
  1307  0070                     ?_timer_vInterrupt:	
  1308                           ; 1 bytes @ 0x0
  1309                           
  1310  0070                     ?_ISR:	
  1311                           ; 1 bytes @ 0x0
  1312                           
  1313  0070                     ?_I2C_vMstStopSSP2:	
  1314                           ; 1 bytes @ 0x0
  1315                           
  1316  0070                     ?_I2C_u8MstTxSSP2:	
  1317                           ; 1 bytes @ 0x0
  1318                           
  1319  0070                     ?i1_criticalSec_vBegin:	
  1320                           ; 1 bytes @ 0x0
  1321                           
  1322  0070                     ??i1_criticalSec_vBegin:	
  1323                           ; 1 bytes @ 0x0
  1324                           
  1325  0070                     ?i1_criticalSec_vEnd:	
  1326                           ; 1 bytes @ 0x0
  1327                           
  1328  0070                     ??i1_criticalSec_vEnd:	
  1329                           ; 1 bytes @ 0x0
  1330                           
  1331  0070                     ?i1_memset:	
  1332                           ; 1 bytes @ 0x0
  1333                           
  1334  0070                     lcd_vPowerSetting@u8Settings:	
  1335                           ; 2 bytes @ 0x0
  1336                           
  1337  0070                     i1memset@dest:	
  1338                           ; 1 bytes @ 0x0
  1339                           
  1340                           
  1341                           ; 2 bytes @ 0x0
  1342  0070                     	ds	1
  1343  0071                     evt_vSetEventMap@eEvtType:	
  1344                           
  1345                           ; 1 bytes @ 0x1
  1346  0071                     	ds	1
  1347  0072                     ??_evt_vSetDrawEvent:	
  1348  0072                     evt_vSetDrawEvent@u8Addr:	
  1349                           ; 1 bytes @ 0x2
  1350                           
  1351  0072                     readColumn@portA:	
  1352                           ; 1 bytes @ 0x2
  1353                           
  1354  0072                     i1memset@c:	
  1355                           ; 1 bytes @ 0x2
  1356                           
  1357                           
  1358                           ; 2 bytes @ 0x2
  1359  0072                     	ds	1
  1360  0073                     readColumn@portB:	
  1361                           
  1362                           ; 1 bytes @ 0x3
  1363  0073                     	ds	1
  1364  0074                     readColumn@u8Port:	
  1365  0074                     i1memset@n:	
  1366                           ; 1 bytes @ 0x4
  1367                           
  1368                           
  1369                           ; 2 bytes @ 0x4
  1370  0074                     	ds	1
  1371  0075                     ssp1_u8ReadData@u8Data:	
  1372  0075                     readColumn@u16PinMap:	
  1373                           ; 1 bytes @ 0x5
  1374                           
  1375                           
  1376                           ; 2 bytes @ 0x5
  1377  0075                     	ds	1
  1378  0076                     ??i1_memset:	
  1379  0076                     ssp1_u8ReadData@u8Addr:	
  1380                           ; 1 bytes @ 0x6
  1381                           
  1382                           
  1383                           ; 1 bytes @ 0x6
  1384  0076                     	ds	1
  1385  0077                     readColumn@u8Col:	
  1386                           
  1387                           ; 1 bytes @ 0x7
  1388  0077                     	ds	1
  1389  0078                     ??_KEYPAD_u8Read:	
  1390                           
  1391                           ; 1 bytes @ 0x8
  1392  0078                     	ds	2
  1393  007A                     ??_KEYPAD_bUpdateBuffer:	
  1394  007A                     i1memset@k:	
  1395                           ; 1 bytes @ 0xA
  1396                           
  1397                           
  1398                           ; 2 bytes @ 0xA
  1399  007A                     	ds	2
  1400  007C                     KEYPAD_bUpdateBuffer@u8KeyNo:	
  1401  007C                     i1memset@s:	
  1402                           ; 1 bytes @ 0xC
  1403                           
  1404                           
  1405                           ; 2 bytes @ 0xC
  1406  007C                     	ds	1
  1407  007D                     KEYPAD_bUpdateBuffer@u8Idx:	
  1408                           
  1409                           ; 1 bytes @ 0xD
  1410  007D                     	ds	1
  1411  007E                     ??_vDmyCallback:	
  1412  007E                     ??_ISR:	
  1413                           ; 1 bytes @ 0xE
  1414                           
  1415                           
  1416                           	psect	cstackBANK0
  1417  0020                     __pcstackBANK0:	
  1418                           ; 1 bytes @ 0xE
  1419                           
  1420  0020                     ??_ssp1_vWriteData:	
  1421  0020                     KEYPAD_u8Read@u8PortA:	
  1422                           ; 1 bytes @ 0x0
  1423                           
  1424                           
  1425                           ; 1 bytes @ 0x0
  1426  0020                     	ds	1
  1427  0021                     KEYPAD_u8Read@u8PortB:	
  1428                           
  1429                           ; 1 bytes @ 0x1
  1430  0021                     	ds	1
  1431  0022                     KEYPAD_u8Read@u16PinMap:	
  1432                           
  1433                           ; 2 bytes @ 0x2
  1434  0022                     	ds	2
  1435  0024                     KEYPAD_u8Read@u8Col:	
  1436                           
  1437                           ; 1 bytes @ 0x4
  1438  0024                     	ds	1
  1439  0025                     KEYPAD_u8Read@u8KeyNo:	
  1440                           
  1441                           ; 1 bytes @ 0x5
  1442  0025                     	ds	1
  1443  0026                     ssp1_vWriteData@u8Addr:	
  1444  0026                     KEYPAD_u8Read@u8Row:	
  1445                           ; 1 bytes @ 0x6
  1446                           
  1447                           
  1448                           ; 1 bytes @ 0x6
  1449  0026                     	ds	1
  1450  0027                     ??_timer_vInterrupt:	
  1451  0027                     ssp1_vWriteData@u8Data:	
  1452                           ; 1 bytes @ 0x7
  1453                           
  1454                           
  1455                           ; 1 bytes @ 0x7
  1456  0027                     	ds	1
  1457  0028                     ?_ssp1_vCallback:	
  1458  0028                     ?_vDmyCallback:	
  1459                           ; 1 bytes @ 0x8
  1460                           
  1461  0028                     timer_vInterrupt@u8KeyNo:	
  1462                           ; 1 bytes @ 0x8
  1463                           
  1464  0028                     ssp1_vCallback@u8BusNo:	
  1465                           ; 1 bytes @ 0x8
  1466                           
  1467  0028                     vDmyCallback@u8BusNo:	
  1468                           ; 1 bytes @ 0x8
  1469                           
  1470                           
  1471                           ; 1 bytes @ 0x8
  1472  0028                     	ds	1
  1473  0029                     ssp1_vCallback@u8EvtType:	
  1474  0029                     vDmyCallback@u8EvtType:	
  1475                           ; 1 bytes @ 0x9
  1476                           
  1477                           
  1478                           ; 1 bytes @ 0x9
  1479  0029                     	ds	1
  1480  002A                     ??_ssp1_vCallback:	
  1481                           
  1482                           ; 1 bytes @ 0xA
  1483  002A                     	ds	3
  1484  002D                     ??_I2C_vSlaveIsrSSP1:	
  1485                           
  1486                           ; 1 bytes @ 0xD
  1487  002D                     	ds	2
  1488  002F                     ?_I2C_vInitSlaveSSP1:	
  1489  002F                     ?_I2C_vInitMasterSSP2:	
  1490                           ; 1 bytes @ 0xF
  1491                           
  1492  002F                     ??_criticalSec_vBegin:	
  1493                           ; 1 bytes @ 0xF
  1494                           
  1495  002F                     ??_criticalSec_vEnd:	
  1496                           ; 1 bytes @ 0xF
  1497                           
  1498  002F                     ??_vMasterWaitSSP2:	
  1499                           ; 1 bytes @ 0xF
  1500                           
  1501  002F                     ?_I2C_u8MstStartSSP2:	
  1502                           ; 1 bytes @ 0xF
  1503                           
  1504  002F                     ??_I2C_vMstStopSSP2:	
  1505                           ; 1 bytes @ 0xF
  1506                           
  1507  002F                     ??_I2C_u8MstTxSSP2:	
  1508                           ; 1 bytes @ 0xF
  1509                           
  1510  002F                     ?___bmul:	
  1511                           ; 1 bytes @ 0xF
  1512                           
  1513  002F                     ?_memset:	
  1514                           ; 1 bytes @ 0xF
  1515                           
  1516  002F                     ?___wmul:	
  1517                           ; 2 bytes @ 0xF
  1518                           
  1519  002F                     ?___awdiv:	
  1520                           ; 2 bytes @ 0xF
  1521                           
  1522  002F                     ?___awmod:	
  1523                           ; 2 bytes @ 0xF
  1524                           
  1525  002F                     I2C_vInitMasterSSP2@u8ClkDiv:	
  1526                           ; 2 bytes @ 0xF
  1527                           
  1528  002F                     I2C_vInitSlaveSSP1@eMode:	
  1529                           ; 1 bytes @ 0xF
  1530                           
  1531  002F                     I2C_u8MstStartSSP2@bReadFlg:	
  1532                           ; 1 bytes @ 0xF
  1533                           
  1534  002F                     I2C_u8MstTxSSP2@u8Data:	
  1535                           ; 1 bytes @ 0xF
  1536                           
  1537  002F                     ___bmul@multiplicand:	
  1538                           ; 1 bytes @ 0xF
  1539                           
  1540  002F                     ___wmul@multiplier:	
  1541                           ; 1 bytes @ 0xF
  1542                           
  1543  002F                     ___awdiv@divisor:	
  1544                           ; 2 bytes @ 0xF
  1545                           
  1546  002F                     ___awmod@divisor:	
  1547                           ; 2 bytes @ 0xF
  1548                           
  1549  002F                     memset@dest:	
  1550                           ; 2 bytes @ 0xF
  1551                           
  1552                           
  1553                           ; 2 bytes @ 0xF
  1554  002F                     	ds	1
  1555  0030                     ??_I2C_vInitMasterSSP2:	
  1556  0030                     ??_evt_u8GetEventMap:	
  1557                           ; 1 bytes @ 0x10
  1558                           
  1559  0030                     ??_vExecCmdSSP2:	
  1560                           ; 1 bytes @ 0x10
  1561                           
  1562  0030                     ??_vExecCmdEndSSP2:	
  1563                           ; 1 bytes @ 0x10
  1564                           
  1565  0030                     ??_I2C_u8MstStartSSP2:	
  1566                           ; 1 bytes @ 0x10
  1567                           
  1568  0030                     ??___bmul:	
  1569                           ; 1 bytes @ 0x10
  1570                           
  1571  0030                     I2C_vInitMasterSSP2@eMode:	
  1572                           ; 1 bytes @ 0x10
  1573                           
  1574  0030                     I2C_u8MstStartSSP2@u8Address:	
  1575                           ; 1 bytes @ 0x10
  1576                           
  1577  0030                     vExecCmdSSP2@u8Cmd:	
  1578                           ; 1 bytes @ 0x10
  1579                           
  1580  0030                     vExecCmdEndSSP2@u8Cmd:	
  1581                           ; 1 bytes @ 0x10
  1582                           
  1583  0030                     I2C_vInitSlaveSSP1@pvCallback:	
  1584                           ; 1 bytes @ 0x10
  1585                           
  1586                           
  1587                           ; 2 bytes @ 0x10
  1588  0030                     	ds	1
  1589  0031                     ??_ST7032_vInitSSP2:	
  1590  0031                     ??_ST7032_vSetContrastSSP2:	
  1591                           ; 1 bytes @ 0x11
  1592                           
  1593  0031                     ?_ST7032_vDispSettingSSP2:	
  1594                           ; 1 bytes @ 0x11
  1595                           
  1596  0031                     evt_u8GetEventMap@u8EvtMap:	
  1597                           ; 1 bytes @ 0x11
  1598                           
  1599  0031                     ST7032_vDispSettingSSP2@bCursor:	
  1600                           ; 1 bytes @ 0x11
  1601                           
  1602  0031                     ___bmul@product:	
  1603                           ; 1 bytes @ 0x11
  1604                           
  1605  0031                     ___wmul@multiplicand:	
  1606                           ; 1 bytes @ 0x11
  1607                           
  1608  0031                     ___awdiv@dividend:	
  1609                           ; 2 bytes @ 0x11
  1610                           
  1611  0031                     ___awmod@dividend:	
  1612                           ; 2 bytes @ 0x11
  1613                           
  1614  0031                     memset@c:	
  1615                           ; 2 bytes @ 0x11
  1616                           
  1617                           
  1618                           ; 2 bytes @ 0x11
  1619  0031                     	ds	1
  1620  0032                     ??_I2C_vInitSlaveSSP1:	
  1621  0032                     ??_lcd_vPowerSetting:	
  1622                           ; 1 bytes @ 0x12
  1623                           
  1624  0032                     I2C_vInitSlaveSSP1@u8Address:	
  1625                           ; 1 bytes @ 0x12
  1626                           
  1627  0032                     ST7032_vSetContrastSSP2@u8Contrast:	
  1628                           ; 1 bytes @ 0x12
  1629                           
  1630  0032                     ST7032_vDispSettingSSP2@bBlink:	
  1631                           ; 1 bytes @ 0x12
  1632                           
  1633  0032                     ___bmul@multiplier:	
  1634                           ; 1 bytes @ 0x12
  1635                           
  1636                           
  1637                           ; 1 bytes @ 0x12
  1638  0032                     	ds	1
  1639  0033                     ??_ST7032_vDispSettingSSP2:	
  1640  0033                     ??___wmul:	
  1641                           ; 1 bytes @ 0x13
  1642                           
  1643  0033                     ??___awdiv:	
  1644                           ; 1 bytes @ 0x13
  1645                           
  1646  0033                     ??___awmod:	
  1647                           ; 1 bytes @ 0x13
  1648                           
  1649  0033                     lcd_vPowerSetting@u8Val:	
  1650                           ; 1 bytes @ 0x13
  1651                           
  1652  0033                     ST7032_vSetContrastSSP2@u8Val:	
  1653                           ; 1 bytes @ 0x13
  1654                           
  1655  0033                     ___wmul@product:	
  1656                           ; 1 bytes @ 0x13
  1657                           
  1658  0033                     memset@n:	
  1659                           ; 2 bytes @ 0x13
  1660                           
  1661                           
  1662                           ; 2 bytes @ 0x13
  1663  0033                     	ds	1
  1664  0034                     ___awdiv@counter:	
  1665  0034                     ___awmod@counter:	
  1666                           ; 1 bytes @ 0x14
  1667                           
  1668                           
  1669                           ; 1 bytes @ 0x14
  1670  0034                     	ds	1
  1671  0035                     ??_memset:	
  1672  0035                     ?_memcpy:	
  1673                           ; 1 bytes @ 0x15
  1674                           
  1675  0035                     ST7032_vDispSettingSSP2@bDisp:	
  1676                           ; 1 bytes @ 0x15
  1677                           
  1678  0035                     ___awdiv@sign:	
  1679                           ; 1 bytes @ 0x15
  1680                           
  1681  0035                     ___awmod@sign:	
  1682                           ; 1 bytes @ 0x15
  1683                           
  1684  0035                     memcpy@s1:	
  1685                           ; 1 bytes @ 0x15
  1686                           
  1687                           
  1688                           ; 2 bytes @ 0x15
  1689  0035                     	ds	1
  1690  0036                     ??_lcd_vCursorSetting:	
  1691  0036                     ?_ST7032_vWriteDataSSP2:	
  1692                           ; 1 bytes @ 0x16
  1693                           
  1694  0036                     ST7032_vWriteDataSSP2@u8Len:	
  1695                           ; 1 bytes @ 0x16
  1696                           
  1697  0036                     ___awdiv@quotient:	
  1698                           ; 1 bytes @ 0x16
  1699                           
  1700                           
  1701                           ; 2 bytes @ 0x16
  1702  0036                     	ds	1
  1703  0037                     ??_ST7032_vWriteDataSSP2:	
  1704  0037                     memcpy@n:	
  1705                           ; 1 bytes @ 0x17
  1706                           
  1707                           
  1708                           ; 2 bytes @ 0x17
  1709  0037                     	ds	1
  1710  0038                     ??_bSetCursorSSP2:	
  1711  0038                     lcd_vCursorSetting@bCursorDisp:	
  1712                           ; 1 bytes @ 0x18
  1713                           
  1714                           
  1715                           ; 1 bytes @ 0x18
  1716  0038                     	ds	1
  1717  0039                     ??_memcpy:	
  1718  0039                     lcd_vCursorSetting@bCursorBlink:	
  1719                           ; 1 bytes @ 0x19
  1720                           
  1721  0039                     memset@k:	
  1722                           ; 1 bytes @ 0x19
  1723                           
  1724                           
  1725                           ; 2 bytes @ 0x19
  1726  0039                     	ds	1
  1727  003A                     lcd_vCursorSetting@u8CursorType:	
  1728  003A                     memcpy@tmp:	
  1729                           ; 1 bytes @ 0x1A
  1730                           
  1731                           
  1732                           ; 1 bytes @ 0x1A
  1733  003A                     	ds	1
  1734  003B                     memcpy@s:	
  1735  003B                     memset@s:	
  1736                           ; 2 bytes @ 0x1B
  1737                           
  1738                           
  1739                           ; 2 bytes @ 0x1B
  1740  003B                     	ds	1
  1741  003C                     ST7032_vWriteDataSSP2@u8Idx:	
  1742                           
  1743                           ; 1 bytes @ 0x1C
  1744  003C                     	ds	1
  1745  003D                     ??_KEYPAD_vInit:	
  1746  003D                     ST7032_vWriteDataSSP2@pcData:	
  1747                           ; 1 bytes @ 0x1D
  1748                           
  1749  003D                     memcpy@d1:	
  1750                           ; 1 bytes @ 0x1D
  1751                           
  1752                           
  1753                           ; 1 bytes @ 0x1D
  1754  003D                     	ds	1
  1755  003E                     KEYPAD_vInit@spStatus:	
  1756  003E                     ST7032_vWriteDataSSP2@pu8WkData:	
  1757                           ; 1 bytes @ 0x1E
  1758                           
  1759  003E                     memcpy@d:	
  1760                           ; 1 bytes @ 0x1E
  1761                           
  1762                           
  1763                           ; 1 bytes @ 0x1E
  1764  003E                     	ds	2
  1765  0040                     bSetCursorSSP2@u8Addr:	
  1766                           
  1767                           ; 1 bytes @ 0x20
  1768  0040                     	ds	1
  1769  0041                     bSetCursorSSP2@u8Pos:	
  1770                           
  1771                           ; 1 bytes @ 0x21
  1772  0041                     	ds	1
  1773  0042                     ?_ST7032_bSetCursorSSP2:	
  1774  0042                     ?_ST7032_vWriteCGRAMSSP2:	
  1775                           ; 1 bytes @ 0x22
  1776                           
  1777  0042                     ?_ST7032_vWriteIconSSP2:	
  1778                           ; 1 bytes @ 0x22
  1779                           
  1780  0042                     ST7032_bSetCursorSSP2@u8ColNo:	
  1781                           ; 1 bytes @ 0x22
  1782                           
  1783  0042                     ST7032_vWriteIconSSP2@u8Map:	
  1784                           ; 1 bytes @ 0x22
  1785                           
  1786  0042                     ST7032_vWriteCGRAMSSP2@pu8BitMap:	
  1787                           ; 1 bytes @ 0x22
  1788                           
  1789                           
  1790                           ; 2 bytes @ 0x22
  1791  0042                     	ds	1
  1792  0043                     ??_ST7032_bSetCursorSSP2:	
  1793  0043                     ??_ST7032_vWriteIconSSP2:	
  1794                           ; 1 bytes @ 0x23
  1795                           
  1796  0043                     ST7032_vWriteIconSSP2@u8Addr:	
  1797                           ; 1 bytes @ 0x23
  1798                           
  1799                           
  1800                           ; 1 bytes @ 0x23
  1801  0043                     	ds	1
  1802  0044                     ??_lcd_vDrawIconRAM:	
  1803  0044                     ??_ST7032_vWriteCGRAMSSP2:	
  1804                           ; 1 bytes @ 0x24
  1805                           
  1806                           
  1807                           ; 1 bytes @ 0x24
  1808  0044                     	ds	1
  1809  0045                     ST7032_bSetCursorSSP2@u8RowNo:	
  1810  0045                     ST7032_vWriteCGRAMSSP2@u8CharNo:	
  1811                           ; 1 bytes @ 0x25
  1812                           
  1813                           
  1814                           ; 1 bytes @ 0x25
  1815  0045                     	ds	1
  1816  0046                     ST7032_bSetCursorSSP2@u8Addr:	
  1817  0046                     ST7032_vWriteCGRAMSSP2@pu8WkMap:	
  1818                           ; 1 bytes @ 0x26
  1819                           
  1820                           
  1821                           ; 2 bytes @ 0x26
  1822  0046                     	ds	1
  1823  0047                     ??_lcd_vDrawCursor:	
  1824                           
  1825                           ; 1 bytes @ 0x27
  1826  0047                     	ds	1
  1827  0048                     lcd_vDrawCursor@u8CursorRow:	
  1828  0048                     ST7032_vWriteCGRAMSSP2@u8Idx:	
  1829                           ; 1 bytes @ 0x28
  1830                           
  1831                           
  1832                           ; 1 bytes @ 0x28
  1833  0048                     	ds	1
  1834  0049                     ??_lcd_vDrawCGRAM:	
  1835  0049                     lcd_vDrawCursor@u8CursorCol:	
  1836                           ; 1 bytes @ 0x29
  1837                           
  1838  0049                     lcd_vDrawIconRAM@u8Idx:	
  1839                           ; 1 bytes @ 0x29
  1840                           
  1841                           
  1842                           ; 1 bytes @ 0x29
  1843  0049                     	ds	1
  1844  004A                     ??_lcd_vDarwLine:	
  1845                           
  1846                           ; 1 bytes @ 0x2A
  1847  004A                     	ds	3
  1848  004D                     lcd_vDrawCGRAM@u8Idx:	
  1849                           
  1850                           ; 1 bytes @ 0x2D
  1851  004D                     	ds	3
  1852  0050                     ??_main:	
  1853                           
  1854                           ; 1 bytes @ 0x30
  1855  0050                     	ds	1
  1856                           
  1857                           	psect	maintext
  1858  01FF                     __pmaintext:	
  1859 ;;
  1860 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1861 ;;
  1862 ;; *************** function _main *****************
  1863 ;; Defined at:
  1864 ;;		line 195 in file "InterfaceMain.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;		None
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;  keypadSts      27   18[BANK1 ] struct .
  1869 ;;  u8EventMap      1   17[BANK1 ] unsigned char 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1874 ;; Tracked objects:
  1875 ;;		On entry : B1F/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1879 ;;      Params:         0       0       0       0       0       0
  1880 ;;      Locals:         0       0      28       0       0       0
  1881 ;;      Temps:          0       1       0       0       0       0
  1882 ;;      Totals:         0       1      28       0       0       0
  1883 ;;Total ram usage:       29 bytes
  1884 ;; Hardware stack levels required when called:   13
  1885 ;; This function calls:
  1886 ;;		_I2C_vInitMasterSSP2
  1887 ;;		_I2C_vInitSlaveSSP1
  1888 ;;		_KEYPAD_vInit
  1889 ;;		_ST7032_vInitSSP2
  1890 ;;		_ST7032_vSetContrastSSP2
  1891 ;;		_evt_u8GetEventMap
  1892 ;;		_lcd_vCursorSetting
  1893 ;;		_lcd_vDarwLine
  1894 ;;		_lcd_vDrawCGRAM
  1895 ;;		_lcd_vDrawCursor
  1896 ;;		_lcd_vDrawIconRAM
  1897 ;;		_lcd_vPowerSetting
  1898 ;;		_memset
  1899 ;; This function is called by:
  1900 ;;		Startup code after reset
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           
  1905                           ;psect for function _main
  1906  01FF                     _main:	
  1907                           
  1908                           ;InterfaceMain.c: 199:     OSCCON = 0b01111010;
  1909                           
  1910                           ;incstack = 0
  1911                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1912  01FF  307A               	movlw	122
  1913  0200  0021               	movlb	1	; select bank1
  1914  0201  0099               	movwf	25	;volatile
  1915                           
  1916                           ;InterfaceMain.c: 200:     ANSELA = 0b00000000;
  1917  0202  0023               	movlb	3	; select bank3
  1918  0203  018C               	clrf	12	;volatile
  1919                           
  1920                           ;InterfaceMain.c: 201:     ANSELB = 0b00000000;
  1921  0204  018D               	clrf	13	;volatile
  1922                           
  1923                           ;InterfaceMain.c: 202:     TRISA = 0b00011100;
  1924  0205  301C               	movlw	28
  1925  0206  0021               	movlb	1	; select bank1
  1926  0207  008C               	movwf	12	;volatile
  1927                           
  1928                           ;InterfaceMain.c: 203:     TRISB = 0b10110110;
  1929  0208  30B6               	movlw	182
  1930  0209  008D               	movwf	13	;volatile
  1931                           
  1932                           ;InterfaceMain.c: 204:     PORTA = 0b00000000;
  1933  020A  0020               	movlb	0	; select bank0
  1934  020B  018C               	clrf	12	;volatile
  1935                           
  1936                           ;InterfaceMain.c: 205:     PORTB = 0b00000000;
  1937  020C  018D               	clrf	13	;volatile
  1938                           
  1939                           ;InterfaceMain.c: 210:     sAppStatus.u8TimerCnt = 0;
  1940  020D  0021               	movlb	1	; select bank1
  1941  020E  01CD               	clrf	_sAppStatus^(0+128)
  1942                           
  1943                           ;InterfaceMain.c: 211:     sAppStatus.bWriteStartFlg = (0);
  1944  020F  01CE               	clrf	(_sAppStatus^(0+128)+1)
  1945                           
  1946                           ;InterfaceMain.c: 212:     sAppStatus.u8MapAddr = 0x00;
  1947  0210  01CF               	clrf	(_sAppStatus^(0+128)+2)
  1948                           
  1949                           ;InterfaceMain.c: 213:     sAppStatus.u8EventMap = 0x00;
  1950  0211  01D0               	clrf	(_sAppStatus^(0+128)+3)
  1951                           
  1952                           ;InterfaceMain.c: 221:     OPTION_REG = 0b00000110;
  1953  0212  3006               	movlw	6
  1954  0213  0095               	movwf	21	;volatile
  1955                           
  1956                           ;InterfaceMain.c: 222:     TMR0 = 0;
  1957  0214  0020               	movlb	0	; select bank0
  1958  0215  0195               	clrf	21	;volatile
  1959                           
  1960                           ;InterfaceMain.c: 223:     TMR0IF = 0;
  1961  0216  110B               	bcf	11,2	;volatile
  1962                           
  1963                           ;InterfaceMain.c: 224:     TMR0IE = 1;
  1964  0217  168B               	bsf	11,5	;volatile
  1965                           
  1966                           ;InterfaceMain.c: 230:     memset(&sMemoryMap, 0x00, sizeof(tsMemoryMap));
  1967  0218  30C9               	movlw	201
  1968  0219  00AF               	movwf	memset@dest
  1969  021A  3020               	movlw	32
  1970  021B  00B0               	movwf	memset@dest+1
  1971  021C  3000               	movlw	0
  1972  021D  00B1               	movwf	memset@c
  1973  021E  00B2               	movwf	memset@c+1
  1974  021F  30A7               	movlw	167
  1975  0220  00B3               	movwf	memset@n
  1976  0221  3000               	movlw	0
  1977  0222  00B4               	movwf	memset@n+1
  1978  0223  3183  23AA  3181   	fcall	_memset
  1979                           
  1980                           ;InterfaceMain.c: 231:     sMemoryMap.u8KeyValue = 0xFF;
  1981  0226  30CA               	movlw	202
  1982  0227  0086               	movwf	6
  1983  0228  3020               	movlw	32
  1984  0229  0087               	movwf	7
  1985  022A  30FF               	movlw	255
  1986  022B  0081               	movwf	1
  1987                           
  1988                           ;InterfaceMain.c: 232:     sMemoryMap.u8Power = 0x01;
  1989  022C  30CB               	movlw	203
  1990  022D  0086               	movwf	6
  1991  022E  3020               	movlw	32
  1992  022F  0087               	movwf	7
  1993  0230  3001               	movlw	1
  1994  0231  0081               	movwf	1
  1995                           
  1996                           ;InterfaceMain.c: 233:     sMemoryMap.u8Contrast = (0x28);
  1997  0232  30CC               	movlw	204
  1998  0233  0086               	movwf	6
  1999  0234  3020               	movlw	32
  2000  0235  0087               	movwf	7
  2001  0236  3028               	movlw	40
  2002  0237  0081               	movwf	1
  2003                           
  2004                           ;InterfaceMain.c: 234:     memset(sMemoryMap.u8CGRam, 0xE0, (64));
  2005  0238  3020               	movlw	32
  2006  0239  0020               	movlb	0	; select bank0
  2007  023A  00AF               	movwf	memset@dest
  2008  023B  3021               	movlw	33
  2009  023C  00B0               	movwf	memset@dest+1
  2010  023D  30E0               	movlw	224
  2011  023E  00B1               	movwf	memset@c
  2012  023F  3000               	movlw	0
  2013  0240  00B2               	movwf	memset@c+1
  2014  0241  3040               	movlw	64
  2015  0242  00B3               	movwf	memset@n
  2016  0243  3000               	movlw	0
  2017  0244  00B4               	movwf	memset@n+1
  2018  0245  3183  23AA  3181   	fcall	_memset
  2019                           
  2020                           ;InterfaceMain.c: 240:     I2C_vInitSlaveSSP1((0x08), I2C_SLAVE_STD, ssp1_vCallback);
  2021  0248  0020               	movlb	0	; select bank0
  2022  0249  01AF               	clrf	I2C_vInitSlaveSSP1@eMode
  2023  024A  3022               	movlw	low _ssp1_vCallback
  2024  024B  00B0               	movwf	I2C_vInitSlaveSSP1@pvCallback
  2025  024C  300E               	movlw	high _ssp1_vCallback
  2026  024D  00B1               	movwf	I2C_vInitSlaveSSP1@pvCallback+1
  2027  024E  3008               	movlw	8
  2028  024F  318D  2576  3181   	fcall	_I2C_vInitSlaveSSP1
  2029                           
  2030                           ;InterfaceMain.c: 242:     I2C_vInitMasterSSP2(I2C_MASTER_STD, I2C_CLK_DIV_STD_8MHZ);
  2031  0252  3013               	movlw	19
  2032  0253  0020               	movlb	0	; select bank0
  2033  0254  00D0               	movwf	??_main
  2034  0255  0850               	movf	??_main,w
  2035  0256  00AF               	movwf	I2C_vInitMasterSSP2@u8ClkDiv
  2036  0257  3000               	movlw	0
  2037  0258  318C  248F  3181   	fcall	_I2C_vInitMasterSSP2
  2038                           
  2039                           ;InterfaceMain.c: 247:     tsKEYPAD_status keypadSts;;InterfaceMain.c: 249:     keypadSt
      +                          s.u16PinCols[0] = (0x0000) | 0b00000100;
  2040  025B  3004               	movlw	4
  2041  025C  0021               	movlb	1	; select bank1
  2042  025D  00B3               	movwf	(main@keypadSts^(0+128)+1)
  2043  025E  3000               	movlw	0
  2044  025F  00B4               	movwf	(main@keypadSts^(0+128)+2)
  2045                           
  2046                           ;InterfaceMain.c: 250:     keypadSts.u16PinCols[1] = (0x0000) | 0b00001000;
  2047  0260  3008               	movlw	8
  2048  0261  00B5               	movwf	(main@keypadSts^(0+128)+3)
  2049  0262  3000               	movlw	0
  2050  0263  00B6               	movwf	(main@keypadSts^(0+128)+4)
  2051                           
  2052                           ;InterfaceMain.c: 251:     keypadSts.u16PinCols[2] = (0x0000) | 0b00010000;
  2053  0264  3010               	movlw	16
  2054  0265  00B7               	movwf	(main@keypadSts^(0+128)+5)
  2055  0266  3000               	movlw	0
  2056  0267  00B8               	movwf	(main@keypadSts^(0+128)+6)
  2057                           
  2058                           ;InterfaceMain.c: 252:     keypadSts.u16PinCols[3] = (0x0100) | 0b10000000;
  2059  0268  3080               	movlw	128
  2060  0269  00B9               	movwf	(main@keypadSts^(0+128)+7)
  2061  026A  3001               	movlw	1
  2062  026B  00BA               	movwf	(main@keypadSts^(0+128)+8)
  2063                           
  2064                           ;InterfaceMain.c: 254:     keypadSts.u16PinRows[0] = (0x0000) | 0b00000010;
  2065  026C  3002               	movlw	2
  2066  026D  00BB               	movwf	(main@keypadSts^(0+128)+9)
  2067  026E  3000               	movlw	0
  2068  026F  00BC               	movwf	(main@keypadSts^(0+128)+10)
  2069                           
  2070                           ;InterfaceMain.c: 255:     keypadSts.u16PinRows[1] = (0x0000) | 0b00000001;
  2071  0270  3001               	movlw	1
  2072  0271  00BD               	movwf	(main@keypadSts^(0+128)+11)
  2073  0272  3000               	movlw	0
  2074  0273  00BE               	movwf	(main@keypadSts^(0+128)+12)
  2075                           
  2076                           ;InterfaceMain.c: 256:     keypadSts.u16PinRows[2] = (0x0000) | 0b10000000;
  2077  0274  3080               	movlw	128
  2078  0275  00BF               	movwf	(main@keypadSts^(0+128)+13)
  2079  0276  3000               	movlw	0
  2080  0277  00C0               	movwf	(main@keypadSts^(0+128)+14)
  2081                           
  2082                           ;InterfaceMain.c: 257:     keypadSts.u16PinRows[3] = (0x0000) | 0b01000000;
  2083  0278  3040               	movlw	64
  2084  0279  00C1               	movwf	(main@keypadSts^(0+128)+15)
  2085  027A  3000               	movlw	0
  2086  027B  00C2               	movwf	(main@keypadSts^(0+128)+16)
  2087                           
  2088                           ;InterfaceMain.c: 260:     KEYPAD_vInit(&keypadSts);
  2089  027C  30B2               	movlw	(low (main@keypadSts| 0))& (0+255)
  2090  027D  318E  2652  3181   	fcall	_KEYPAD_vInit
  2091                           
  2092                           ;InterfaceMain.c: 265:     PEIE = 1;
  2093  0280  170B               	bsf	11,6	;volatile
  2094                           
  2095                           ;InterfaceMain.c: 266:     GIE = 1;
  2096  0281  178B               	bsf	11,7	;volatile
  2097                           
  2098                           ;InterfaceMain.c: 272:     RB0 = (1);
  2099  0282  0020               	movlb	0	; select bank0
  2100  0283  140D               	bsf	13,0	;volatile
  2101                           
  2102                           ;InterfaceMain.c: 273:     RB3 = (0);
  2103  0284  118D               	bcf	13,3	;volatile
  2104                           
  2105                           ;InterfaceMain.c: 274:     _delay((unsigned long)((40)*(16000000/4000.0)));
  2106  0285  30D0               	movlw	208
  2107  0286  0020               	movlb	0	; select bank0
  2108  0287  00D0               	movwf	??_main
  2109  0288  30C9               	movlw	201
  2110  0289                     u3887:	
  2111  0289  0B89               	decfsz	9,f
  2112  028A  2A89               	goto	u3887
  2113  028B  0BD0               	decfsz	??_main,f
  2114  028C  2A89               	goto	u3887
  2115  028D  3200               	nop2
  2116                           
  2117                           ;InterfaceMain.c: 276:     ST7032_vInitSSP2();
  2118  028E  3185  25BA  3181   	fcall	_ST7032_vInitSSP2
  2119  0291                     l5308:	
  2120                           
  2121                           ;InterfaceMain.c: 288:         u8EventMap = evt_u8GetEventMap();
  2122  0291  318C  24BC  3181   	fcall	_evt_u8GetEventMap
  2123  0294  0020               	movlb	0	; select bank0
  2124  0295  00D0               	movwf	??_main
  2125  0296  0850               	movf	??_main,w
  2126  0297  0021               	movlb	1	; select bank1
  2127  0298  00B1               	movwf	main@u8EventMap^(0+128)
  2128                           
  2129                           ;InterfaceMain.c: 289:         if (u8EventMap == EVT_NONE) {
  2130  0299  0831               	movf	main@u8EventMap^(0+128),w
  2131  029A  1903               	btfsc	3,2
  2132  029B  2A91               	goto	l5308
  2133                           
  2134                           ;InterfaceMain.c: 293:         if ((u8EventMap & EVT_PW_CONTRAST) == EVT_PW_CONTRAST) {
  2135                           
  2136                           ;InterfaceMain.c: 291:         }
  2137  029C  1CB1               	btfss	main@u8EventMap^(0+128),1
  2138  029D  2AB0               	goto	l5316
  2139                           
  2140                           ;InterfaceMain.c: 295:             lcd_vPowerSetting(sMemoryMap.u8Power);
  2141  029E  30C9               	movlw	201
  2142  029F  0086               	movwf	6
  2143  02A0  3020               	movlw	32
  2144  02A1  0087               	movwf	7
  2145  02A2  3142               	addfsr 1,2
  2146  02A3  0801               	movf	1,w
  2147  02A4  318F  2739  3181   	fcall	_lcd_vPowerSetting
  2148                           
  2149                           ;InterfaceMain.c: 297:             ST7032_vSetContrastSSP2(sMemoryMap.u8Contrast);
  2150  02A7  30C9               	movlw	201
  2151  02A8  0086               	movwf	6
  2152  02A9  3020               	movlw	32
  2153  02AA  0087               	movwf	7
  2154  02AB  3143               	addfsr 1,3
  2155  02AC  0801               	movf	1,w
  2156  02AD  3187  279F  3181   	fcall	_ST7032_vSetContrastSSP2
  2157  02B0                     l5316:	
  2158                           
  2159                           ;InterfaceMain.c: 300:         if ((u8EventMap & EVT_CURSOR_SET) == EVT_CURSOR_SET) {
  2160  02B0  0021               	movlb	1	; select bank1
  2161  02B1  1D31               	btfss	main@u8EventMap^(0+128),2
  2162  02B2  2ABC               	goto	l5320
  2163                           
  2164                           ;InterfaceMain.c: 301:             lcd_vCursorSetting(sMemoryMap.u8CursorType);
  2165  02B3  30C9               	movlw	201
  2166  02B4  0086               	movwf	6
  2167  02B5  3020               	movlw	32
  2168  02B6  0087               	movwf	7
  2169  02B7  3144               	addfsr 1,4
  2170  02B8  0801               	movf	1,w
  2171  02B9  318C  24A4  3181   	fcall	_lcd_vCursorSetting
  2172  02BC                     l5320:	
  2173                           
  2174                           ;InterfaceMain.c: 304:         if ((u8EventMap & EVT_CURSOR_DRAW) == EVT_CURSOR_DRAW) {
  2175  02BC  0021               	movlb	1	; select bank1
  2176  02BD  1DB1               	btfss	main@u8EventMap^(0+128),3
  2177  02BE  2AC2               	goto	l5324
  2178                           
  2179                           ;InterfaceMain.c: 305:             lcd_vDrawCursor();
  2180  02BF  318D  2554  3181   	fcall	_lcd_vDrawCursor
  2181  02C2                     l5324:	
  2182                           
  2183                           ;InterfaceMain.c: 308:         if ((u8EventMap & EVT_DRAW_LINE_0) == EVT_DRAW_LINE_0) {
  2184  02C2  0021               	movlb	1	; select bank1
  2185  02C3  1E31               	btfss	main@u8EventMap^(0+128),4
  2186  02C4  2AC9               	goto	l5328
  2187                           
  2188                           ;InterfaceMain.c: 309:             lcd_vDarwLine(0);
  2189  02C5  3000               	movlw	0
  2190  02C6  318F  2779  3181   	fcall	_lcd_vDarwLine
  2191  02C9                     l5328:	
  2192                           
  2193                           ;InterfaceMain.c: 312:         if ((u8EventMap & EVT_DRAW_LINE_1) == EVT_DRAW_LINE_1) {
  2194  02C9  0021               	movlb	1	; select bank1
  2195  02CA  1EB1               	btfss	main@u8EventMap^(0+128),5
  2196  02CB  2AD0               	goto	l5332
  2197                           
  2198                           ;InterfaceMain.c: 313:             lcd_vDarwLine(1);
  2199  02CC  3001               	movlw	1
  2200  02CD  318F  2779  3181   	fcall	_lcd_vDarwLine
  2201  02D0                     l5332:	
  2202                           
  2203                           ;InterfaceMain.c: 316:         if ((u8EventMap & EVT_SET_CGRAM) == EVT_SET_CGRAM) {
  2204  02D0  0021               	movlb	1	; select bank1
  2205  02D1  1F31               	btfss	main@u8EventMap^(0+128),6
  2206  02D2  2AD6               	goto	l5336
  2207                           
  2208                           ;InterfaceMain.c: 318:             lcd_vDrawCGRAM();
  2209  02D3  318E  26C1  3181   	fcall	_lcd_vDrawCGRAM
  2210  02D6                     l5336:	
  2211                           
  2212                           ;InterfaceMain.c: 321:         if ((u8EventMap & EVT_DRAW_ICON) == EVT_DRAW_ICON) {
  2213  02D6  0021               	movlb	1	; select bank1
  2214  02D7  1FB1               	btfss	main@u8EventMap^(0+128),7
  2215  02D8  2A91               	goto	l5308
  2216                           
  2217                           ;InterfaceMain.c: 323:             lcd_vDrawIconRAM();
  2218  02D9  318D  2533  3181   	fcall	_lcd_vDrawIconRAM
  2219  02DC  2A91               	goto	l5308
  2220  02DD                     __end_of_main:	
  2221                           
  2222                           	psect	text1
  2223  0F39                     __ptext1:	
  2224 ;; *************** function _lcd_vPowerSetting *****************
  2225 ;; Defined at:
  2226 ;;		line 418 in file "InterfaceMain.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;  u8Settings      1    wreg     unsigned char 
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;  u8Settings      1    0[COMMON] unsigned char 
  2231 ;;  u8Val           1   19[BANK0 ] unsigned char 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2241 ;;      Params:         0       0       0       0       0       0
  2242 ;;      Locals:         0       1       0       0       0       0
  2243 ;;      Temps:          0       1       0       0       0       0
  2244 ;;      Totals:         0       2       0       0       0       0
  2245 ;;Total ram usage:        2 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:   10
  2248 ;; This function calls:
  2249 ;;		_ST7032_vInitSSP2
  2250 ;;		_criticalSec_vBegin
  2251 ;;		_criticalSec_vEnd
  2252 ;; This function is called by:
  2253 ;;		_main
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           
  2258                           ;psect for function _lcd_vPowerSetting
  2259  0F39                     _lcd_vPowerSetting:	
  2260                           
  2261                           ;InterfaceMain.c: 422:     criticalSec_vBegin();
  2262                           
  2263                           ;incstack = 0
  2264                           ; Regs used in _lcd_vPowerSetting: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2265  0F39  318C  2414  318F   	fcall	_criticalSec_vBegin
  2266                           
  2267                           ;InterfaceMain.c: 424:     unsigned char u8Val = sMemoryMap.u8Power;
  2268  0F3C  30C9               	movlw	201
  2269  0F3D  0086               	movwf	6
  2270  0F3E  3020               	movlw	32
  2271  0F3F  0087               	movwf	7
  2272  0F40  3142               	addfsr 1,2
  2273  0F41  0801               	movf	1,w
  2274  0F42  0020               	movlb	0	; select bank0
  2275  0F43  00B2               	movwf	??_lcd_vPowerSetting
  2276  0F44  0832               	movf	??_lcd_vPowerSetting,w
  2277  0F45  00B3               	movwf	lcd_vPowerSetting@u8Val
  2278                           
  2279                           ;InterfaceMain.c: 425:     sMemoryMap.u8Power = sMemoryMap.u8Power | 0x01;
  2280  0F46  30C9               	movlw	201
  2281  0F47  0086               	movwf	6
  2282  0F48  3020               	movlw	32
  2283  0F49  0087               	movwf	7
  2284  0F4A  3142               	addfsr 1,2
  2285  0F4B  0801               	movf	1,w
  2286  0F4C  3801               	iorlw	1
  2287  0F4D  00B2               	movwf	??_lcd_vPowerSetting
  2288  0F4E  30CB               	movlw	203
  2289  0F4F  0086               	movwf	6
  2290  0F50  3020               	movlw	32
  2291  0F51  0087               	movwf	7
  2292  0F52  0832               	movf	??_lcd_vPowerSetting,w
  2293  0F53  0081               	movwf	1
  2294                           
  2295                           ;InterfaceMain.c: 426:     criticalSec_vEnd();
  2296  0F54  318C  242B  318F   	fcall	_criticalSec_vEnd
  2297                           
  2298                           ;InterfaceMain.c: 432:     if ((u8Val & 0x01) == 0x00) {
  2299  0F57  0020               	movlb	0	; select bank0
  2300  0F58  1833               	btfsc	lcd_vPowerSetting@u8Val,0
  2301  0F59  2F72               	goto	l5166
  2302                           
  2303                           ;InterfaceMain.c: 434:         RB0 = (0);
  2304  0F5A  100D               	bcf	13,0	;volatile
  2305                           
  2306                           ;InterfaceMain.c: 435:         _delay((unsigned long)((1)*(16000000/4000.0)));
  2307  0F5B  3006               	movlw	6
  2308  0F5C  0020               	movlb	0	; select bank0
  2309  0F5D  00B2               	movwf	??_lcd_vPowerSetting
  2310  0F5E  3030               	movlw	48
  2311  0F5F                     u3897:	
  2312  0F5F  0B89               	decfsz	9,f
  2313  0F60  2F5F               	goto	u3897
  2314  0F61  0BB2               	decfsz	??_lcd_vPowerSetting,f
  2315  0F62  2F5F               	goto	u3897
  2316  0F63  0000               	nop
  2317                           
  2318                           ;InterfaceMain.c: 436:         RB0 = (1);
  2319  0F64  0020               	movlb	0	; select bank0
  2320  0F65  140D               	bsf	13,0	;volatile
  2321                           
  2322                           ;InterfaceMain.c: 437:         _delay((unsigned long)((40)*(16000000/4000.0)));
  2323  0F66  30D0               	movlw	208
  2324  0F67  0020               	movlb	0	; select bank0
  2325  0F68  00B2               	movwf	??_lcd_vPowerSetting
  2326  0F69  30C9               	movlw	201
  2327  0F6A                     u3907:	
  2328  0F6A  0B89               	decfsz	9,f
  2329  0F6B  2F6A               	goto	u3907
  2330  0F6C  0BB2               	decfsz	??_lcd_vPowerSetting,f
  2331  0F6D  2F6A               	goto	u3907
  2332  0F6E  3200               	nop2
  2333                           
  2334                           ;InterfaceMain.c: 439:         ST7032_vInitSSP2();
  2335  0F6F  3185  25BA  318F   	fcall	_ST7032_vInitSSP2
  2336  0F72                     l5166:	
  2337                           
  2338                           ;InterfaceMain.c: 442:     if ((u8Val & 0x02) == 0x00) {
  2339  0F72  0020               	movlb	0	; select bank0
  2340  0F73  18B3               	btfsc	lcd_vPowerSetting@u8Val,1
  2341  0F74  2F77               	goto	l129
  2342                           
  2343                           ;InterfaceMain.c: 443:         RB3 = (0);
  2344  0F75  118D               	bcf	13,3	;volatile
  2345                           
  2346                           ;InterfaceMain.c: 444:     } else {
  2347  0F76  0008               	return
  2348  0F77                     l129:	
  2349                           
  2350                           ;InterfaceMain.c: 445:         RB3 = (1);
  2351  0F77  158D               	bsf	13,3	;volatile
  2352  0F78  0008               	return
  2353  0F79                     __end_of_lcd_vPowerSetting:	
  2354                           
  2355                           	psect	text2
  2356  05BA                     __ptext2:	
  2357 ;; *************** function _ST7032_vInitSSP2 *****************
  2358 ;; Defined at:
  2359 ;;		line 179 in file "st7032.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;		None
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      void 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0, pclath, cstack
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2373 ;;      Params:         0       0       0       0       0       0
  2374 ;;      Locals:         0       0       0       0       0       0
  2375 ;;      Temps:          0       1       0       0       0       0
  2376 ;;      Totals:         0       1       0       0       0       0
  2377 ;;Total ram usage:        1 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    9
  2380 ;; This function calls:
  2381 ;;		_I2C_u8MstStartSSP2
  2382 ;;		_vExecCmdEndSSP2
  2383 ;;		_vExecCmdSSP2
  2384 ;; This function is called by:
  2385 ;;		_main
  2386 ;;		_lcd_vPowerSetting
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           
  2391                           ;psect for function _ST7032_vInitSSP2
  2392  05BA                     _ST7032_vInitSSP2:	
  2393                           
  2394                           ;st7032.c: 181:     stStateSSP2.u8CursorPos = 0x00;
  2395                           
  2396                           ;incstack = 0
  2397                           ; Regs used in _ST7032_vInitSSP2: [wreg+status,2+status,0+pclath+cstack]
  2398  05BA  0020               	movlb	0	; select bank0
  2399  05BB  01D1               	clrf	_stStateSSP2
  2400                           
  2401                           ;st7032.c: 183:     stStateSSP2.u8Settings = 0xE8;
  2402  05BC  30E8               	movlw	232
  2403  05BD  00B1               	movwf	??_ST7032_vInitSSP2
  2404  05BE  0831               	movf	??_ST7032_vInitSSP2,w
  2405  05BF  00D2               	movwf	_stStateSSP2+1
  2406                           
  2407                           ;st7032.c: 185:     I2C_u8MstStartSSP2((0x3E), (0));
  2408  05C0  01AF               	clrf	I2C_u8MstStartSSP2@bReadFlg
  2409  05C1  303E               	movlw	62
  2410  05C2  318C  24D6  3185   	fcall	_I2C_u8MstStartSSP2
  2411                           
  2412                           ;st7032.c: 187:     vExecCmdSSP2((0b00111001));
  2413  05C5  3039               	movlw	57
  2414  05C6  318C  243D  3185   	fcall	_vExecCmdSSP2
  2415                           
  2416                           ;st7032.c: 188:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2417  05C9  3022               	movlw	34
  2418  05CA                     u3917:	
  2419  05CA  0B89               	decfsz	9,f
  2420  05CB  2DCA               	goto	u3917
  2421  05CC  3200               	nop2
  2422                           
  2423                           ;st7032.c: 190:     vExecCmdSSP2((0b00010100));
  2424  05CD  3014               	movlw	20
  2425  05CE  318C  243D  3185   	fcall	_vExecCmdSSP2
  2426                           
  2427                           ;st7032.c: 191:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2428  05D1  3022               	movlw	34
  2429  05D2                     u3927:	
  2430  05D2  0B89               	decfsz	9,f
  2431  05D3  2DD2               	goto	u3927
  2432  05D4  3200               	nop2
  2433                           
  2434                           ;st7032.c: 193:     vExecCmdSSP2((0b01110000) | (stStateSSP2.u8Settings & 0x0F));
  2435  05D5  0020               	movlb	0	; select bank0
  2436  05D6  0852               	movf	_stStateSSP2+1,w
  2437  05D7  390F               	andlw	15
  2438  05D8  3870               	iorlw	112
  2439  05D9  318C  243D  3185   	fcall	_vExecCmdSSP2
  2440                           
  2441                           ;st7032.c: 194:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2442  05DC  3022               	movlw	34
  2443  05DD                     u3937:	
  2444  05DD  0B89               	decfsz	9,f
  2445  05DE  2DDD               	goto	u3937
  2446  05DF  3200               	nop2
  2447                           
  2448                           ;st7032.c: 196:     vExecCmdSSP2((0b01011000) | (stStateSSP2.u8Settings >> 4));
  2449  05E0  0020               	movlb	0	; select bank0
  2450  05E1  0852               	movf	_stStateSSP2+1,w
  2451  05E2  00B1               	movwf	??_ST7032_vInitSSP2
  2452  05E3  3004               	movlw	4
  2453  05E4                     u3405:	
  2454  05E4  36B1               	lsrf	??_ST7032_vInitSSP2,f
  2455  05E5  0B89               	decfsz	9,f
  2456  05E6  2DE4               	goto	u3405
  2457  05E7  0831               	movf	??_ST7032_vInitSSP2,w
  2458  05E8  3858               	iorlw	88
  2459  05E9  318C  243D  3185   	fcall	_vExecCmdSSP2
  2460                           
  2461                           ;st7032.c: 197:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2462  05EC  3022               	movlw	34
  2463  05ED                     u3947:	
  2464  05ED  0B89               	decfsz	9,f
  2465  05EE  2DED               	goto	u3947
  2466  05EF  3200               	nop2
  2467                           
  2468                           ;st7032.c: 199:     vExecCmdSSP2((0b01101100));
  2469  05F0  306C               	movlw	108
  2470  05F1  318C  243D  3185   	fcall	_vExecCmdSSP2
  2471                           
  2472                           ;st7032.c: 200:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2473  05F4  3022               	movlw	34
  2474  05F5                     u3957:	
  2475  05F5  0B89               	decfsz	9,f
  2476  05F6  2DF5               	goto	u3957
  2477  05F7  3200               	nop2
  2478                           
  2479                           ;st7032.c: 202:     vExecCmdSSP2((0b00111000));
  2480  05F8  3038               	movlw	56
  2481  05F9  318C  243D  3185   	fcall	_vExecCmdSSP2
  2482                           
  2483                           ;st7032.c: 203:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2484  05FC  3022               	movlw	34
  2485  05FD                     u3967:	
  2486  05FD  0B89               	decfsz	9,f
  2487  05FE  2DFD               	goto	u3967
  2488  05FF  3200               	nop2
  2489                           
  2490                           ;st7032.c: 205:     vExecCmdSSP2((0b00001000) | 0x04);
  2491  0600  300C               	movlw	12
  2492  0601  318C  243D  3185   	fcall	_vExecCmdSSP2
  2493                           
  2494                           ;st7032.c: 206:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2495  0604  3022               	movlw	34
  2496  0605                     u3977:	
  2497  0605  0B89               	decfsz	9,f
  2498  0606  2E05               	goto	u3977
  2499  0607  3200               	nop2
  2500                           
  2501                           ;st7032.c: 207:     vExecCmdSSP2((0b00000100) | 0x02);
  2502  0608  3006               	movlw	6
  2503  0609  318C  243D  3185   	fcall	_vExecCmdSSP2
  2504                           
  2505                           ;st7032.c: 208:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2506  060C  3022               	movlw	34
  2507  060D                     u3987:	
  2508  060D  0B89               	decfsz	9,f
  2509  060E  2E0D               	goto	u3987
  2510  060F  3200               	nop2
  2511                           
  2512                           ;st7032.c: 210:     vExecCmdSSP2((0b10000000));
  2513  0610  3080               	movlw	128
  2514  0611  318C  243D  3185   	fcall	_vExecCmdSSP2
  2515                           
  2516                           ;st7032.c: 211:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2517  0614  3022               	movlw	34
  2518  0615                     u3997:	
  2519  0615  0B89               	decfsz	9,f
  2520  0616  2E15               	goto	u3997
  2521  0617  3200               	nop2
  2522                           
  2523                           ;st7032.c: 213:     vExecCmdEndSSP2((0b00000001));
  2524  0618  3001               	movlw	1
  2525  0619  318C  246F  3185   	fcall	_vExecCmdEndSSP2
  2526                           
  2527                           ;st7032.c: 214:     _delay((unsigned long)(((1080))*(16000000/4000000.0)));
  2528  061C  3006               	movlw	6
  2529  061D  0020               	movlb	0	; select bank0
  2530  061E  00B1               	movwf	??_ST7032_vInitSSP2
  2531  061F  309B               	movlw	155
  2532  0620                     u4007:	
  2533  0620  0B89               	decfsz	9,f
  2534  0621  2E20               	goto	u4007
  2535  0622  0BB1               	decfsz	??_ST7032_vInitSSP2,f
  2536  0623  2E20               	goto	u4007
  2537  0624  0008               	return
  2538  0625                     __end_of_ST7032_vInitSSP2:	
  2539                           
  2540                           	psect	text3
  2541  0D33                     __ptext3:	
  2542 ;; *************** function _lcd_vDrawIconRAM *****************
  2543 ;; Defined at:
  2544 ;;		line 568 in file "InterfaceMain.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;		None
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;  u8Idx           1   41[BANK0 ] unsigned char 
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      void 
  2551 ;; Registers used:
  2552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2558 ;;      Params:         0       0       0       0       0       0
  2559 ;;      Locals:         0       1       0       0       0       0
  2560 ;;      Temps:          0       5       0       0       0       0
  2561 ;;      Totals:         0       6       0       0       0       0
  2562 ;;Total ram usage:        6 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:   11
  2565 ;; This function calls:
  2566 ;;		_ST7032_vWriteIconSSP2
  2567 ;; This function is called by:
  2568 ;;		_main
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           
  2573                           ;psect for function _lcd_vDrawIconRAM
  2574  0D33                     _lcd_vDrawIconRAM:	
  2575                           
  2576                           ;InterfaceMain.c: 569:     unsigned char u8Idx;;InterfaceMain.c: 570:     for (u8Idx = 0
      +                          ; u8Idx < (16); u8Idx++) {
  2577                           
  2578                           ;incstack = 0
  2579                           ; Regs used in _lcd_vDrawIconRAM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2580  0D33  0020               	movlb	0	; select bank0
  2581  0D34  01C9               	clrf	lcd_vDrawIconRAM@u8Idx
  2582  0D35                     l5234:	
  2583                           
  2584                           ;InterfaceMain.c: 571:         ST7032_vWriteIconSSP2(u8Idx, sMemoryMap.u8IconRam[u8Idx])
      +                          ;
  2585  0D35  0849               	movf	lcd_vDrawIconRAM@u8Idx,w
  2586  0D36  00C4               	movwf	??_lcd_vDrawIconRAM
  2587  0D37  01C5               	clrf	??_lcd_vDrawIconRAM+1
  2588  0D38  3060               	movlw	96
  2589  0D39  00C6               	movwf	??_lcd_vDrawIconRAM+2
  2590  0D3A  3021               	movlw	33
  2591  0D3B  00C7               	movwf	??_lcd_vDrawIconRAM+3
  2592  0D3C  0844               	movf	??_lcd_vDrawIconRAM,w
  2593  0D3D  0746               	addwf	??_lcd_vDrawIconRAM+2,w
  2594  0D3E  0086               	movwf	6
  2595  0D3F  0845               	movf	??_lcd_vDrawIconRAM+1,w
  2596  0D40  3D47               	addwfc	??_lcd_vDrawIconRAM+3,w
  2597  0D41  0087               	movwf	7
  2598  0D42  0801               	movf	1,w
  2599  0D43  00C8               	movwf	??_lcd_vDrawIconRAM+4
  2600  0D44  0848               	movf	??_lcd_vDrawIconRAM+4,w
  2601  0D45  00C2               	movwf	ST7032_vWriteIconSSP2@u8Map
  2602  0D46  0849               	movf	lcd_vDrawIconRAM@u8Idx,w
  2603  0D47  318E  2689  318D   	fcall	_ST7032_vWriteIconSSP2
  2604                           
  2605                           ;InterfaceMain.c: 572:     }
  2606  0D4A  3001               	movlw	1
  2607  0D4B  0020               	movlb	0	; select bank0
  2608  0D4C  00C4               	movwf	??_lcd_vDrawIconRAM
  2609  0D4D  0844               	movf	??_lcd_vDrawIconRAM,w
  2610  0D4E  07C9               	addwf	lcd_vDrawIconRAM@u8Idx,f
  2611  0D4F  3010               	movlw	16
  2612  0D50  0249               	subwf	lcd_vDrawIconRAM@u8Idx,w
  2613  0D51  1803               	btfsc	3,0
  2614  0D52  0008               	return
  2615  0D53  2D35               	goto	l5234
  2616  0D54                     __end_of_lcd_vDrawIconRAM:	
  2617                           
  2618                           	psect	text4
  2619  0E89                     __ptext4:	
  2620 ;; *************** function _ST7032_vWriteIconSSP2 *****************
  2621 ;; Defined at:
  2622 ;;		line 1150 in file "st7032.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;  u8Addr          1    wreg     unsigned char 
  2625 ;;  u8Map           1   34[BANK0 ] unsigned char 
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;  u8Addr          1   35[BANK0 ] unsigned char 
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      void 
  2630 ;; Registers used:
  2631 ;;		wreg, status,2, status,0, pclath, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2637 ;;      Params:         0       1       0       0       0       0
  2638 ;;      Locals:         0       1       0       0       0       0
  2639 ;;      Temps:          0       0       0       0       0       0
  2640 ;;      Totals:         0       2       0       0       0       0
  2641 ;;Total ram usage:        2 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:   10
  2644 ;; This function calls:
  2645 ;;		_I2C_u8MstStartSSP2
  2646 ;;		_I2C_u8MstTxSSP2
  2647 ;;		_I2C_vMstStopSSP2
  2648 ;;		_bSetCursorSSP2
  2649 ;;		_vExecCmdSSP2
  2650 ;; This function is called by:
  2651 ;;		_lcd_vDrawIconRAM
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           
  2656                           ;psect for function _ST7032_vWriteIconSSP2
  2657  0E89                     _ST7032_vWriteIconSSP2:	
  2658                           
  2659                           ;incstack = 0
  2660                           ; Regs used in _ST7032_vWriteIconSSP2: [wreg+status,2+status,0+pclath+cstack]
  2661                           ;ST7032_vWriteIconSSP2@u8Addr stored from wreg
  2662  0E89  0020               	movlb	0	; select bank0
  2663  0E8A  00C3               	movwf	ST7032_vWriteIconSSP2@u8Addr
  2664                           
  2665                           ;st7032.c: 1152:     I2C_u8MstStartSSP2((0x3E), (0));
  2666  0E8B  01AF               	clrf	I2C_u8MstStartSSP2@bReadFlg
  2667  0E8C  303E               	movlw	62
  2668  0E8D  318C  24D6  318E   	fcall	_I2C_u8MstStartSSP2
  2669                           
  2670                           ;st7032.c: 1154:     vExecCmdSSP2((0b00111001));
  2671  0E90  3039               	movlw	57
  2672  0E91  318C  243D  318E   	fcall	_vExecCmdSSP2
  2673                           
  2674                           ;st7032.c: 1155:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2675  0E94  3022               	movlw	34
  2676  0E95                     u4017:	
  2677  0E95  0B89               	decfsz	9,f
  2678  0E96  2E95               	goto	u4017
  2679  0E97  3200               	nop2
  2680                           
  2681                           ;st7032.c: 1157:     vExecCmdSSP2((0b01000000) | (u8Addr & 0x0F));
  2682  0E98  0020               	movlb	0	; select bank0
  2683  0E99  0843               	movf	ST7032_vWriteIconSSP2@u8Addr,w
  2684  0E9A  390F               	andlw	15
  2685  0E9B  3840               	iorlw	64
  2686  0E9C  318C  243D  318E   	fcall	_vExecCmdSSP2
  2687                           
  2688                           ;st7032.c: 1158:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2689  0E9F  3022               	movlw	34
  2690  0EA0                     u4027:	
  2691  0EA0  0B89               	decfsz	9,f
  2692  0EA1  2EA0               	goto	u4027
  2693  0EA2  3200               	nop2
  2694                           
  2695                           ;st7032.c: 1160:     vExecCmdSSP2((0b00111000));
  2696  0EA3  3038               	movlw	56
  2697  0EA4  318C  243D  318E   	fcall	_vExecCmdSSP2
  2698                           
  2699                           ;st7032.c: 1161:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2700  0EA7  3022               	movlw	34
  2701  0EA8                     u4037:	
  2702  0EA8  0B89               	decfsz	9,f
  2703  0EA9  2EA8               	goto	u4037
  2704  0EAA  3200               	nop2
  2705                           
  2706                           ;st7032.c: 1163:     I2C_u8MstTxSSP2((0x40));
  2707  0EAB  3040               	movlw	64
  2708  0EAC  318C  2433  318E   	fcall	_I2C_u8MstTxSSP2
  2709                           
  2710                           ;st7032.c: 1165:     I2C_u8MstTxSSP2(u8Map & 0x1F);
  2711  0EAF  0020               	movlb	0	; select bank0
  2712  0EB0  0842               	movf	ST7032_vWriteIconSSP2@u8Map,w
  2713  0EB1  391F               	andlw	31
  2714  0EB2  318C  2433  318E   	fcall	_I2C_u8MstTxSSP2
  2715                           
  2716                           ;st7032.c: 1167:     I2C_vMstStopSSP2();
  2717  0EB5  318C  240D  318E   	fcall	_I2C_vMstStopSSP2
  2718                           
  2719                           ;st7032.c: 1168:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2720  0EB8  3022               	movlw	34
  2721  0EB9                     u4047:	
  2722  0EB9  0B89               	decfsz	9,f
  2723  0EBA  2EB9               	goto	u4047
  2724  0EBB  3200               	nop2
  2725                           
  2726                           ;st7032.c: 1170:     bSetCursorSSP2(stStateSSP2.u8CursorPos);
  2727  0EBC  0020               	movlb	0	; select bank0
  2728  0EBD  0851               	movf	_stStateSSP2,w
  2729  0EBE  3187  2713         	fcall	_bSetCursorSSP2
  2730  0EC0  0008               	return
  2731  0EC1                     __end_of_ST7032_vWriteIconSSP2:	
  2732                           
  2733                           	psect	text5
  2734  0EC1                     __ptext5:	
  2735 ;; *************** function _lcd_vDrawCGRAM *****************
  2736 ;; Defined at:
  2737 ;;		line 546 in file "InterfaceMain.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;		None
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  u8Idx           1   45[BANK0 ] unsigned char 
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  1    wreg      void 
  2744 ;; Registers used:
  2745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2751 ;;      Params:         0       0       0       0       0       0
  2752 ;;      Locals:         0       1       0       0       0       0
  2753 ;;      Temps:          0       4       0       0       0       0
  2754 ;;      Totals:         0       5       0       0       0       0
  2755 ;;Total ram usage:        5 bytes
  2756 ;; Hardware stack levels used:    1
  2757 ;; Hardware stack levels required when called:   11
  2758 ;; This function calls:
  2759 ;;		_ST7032_vWriteCGRAMSSP2
  2760 ;; This function is called by:
  2761 ;;		_main
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           
  2766                           ;psect for function _lcd_vDrawCGRAM
  2767  0EC1                     _lcd_vDrawCGRAM:	
  2768                           
  2769                           ;InterfaceMain.c: 547:     unsigned char u8Idx;;InterfaceMain.c: 548:     for (u8Idx = 0
      +                          ; u8Idx < 8; u8Idx++) {
  2770                           
  2771                           ;incstack = 0
  2772                           ; Regs used in _lcd_vDrawCGRAM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2773  0EC1  0020               	movlb	0	; select bank0
  2774  0EC2  01CD               	clrf	lcd_vDrawCGRAM@u8Idx
  2775  0EC3                     l5220:	
  2776                           
  2777                           ;InterfaceMain.c: 549:         if (sMemoryMap.u8CGRam[u8Idx * 8] < 0x20) {
  2778  0EC3  084D               	movf	lcd_vDrawCGRAM@u8Idx,w
  2779  0EC4  00C9               	movwf	??_lcd_vDrawCGRAM
  2780  0EC5  01CA               	clrf	??_lcd_vDrawCGRAM+1
  2781  0EC6  35C9               	lslf	??_lcd_vDrawCGRAM,f
  2782  0EC7  0DCA               	rlf	??_lcd_vDrawCGRAM+1,f
  2783  0EC8  35C9               	lslf	??_lcd_vDrawCGRAM,f
  2784  0EC9  0DCA               	rlf	??_lcd_vDrawCGRAM+1,f
  2785  0ECA  35C9               	lslf	??_lcd_vDrawCGRAM,f
  2786  0ECB  0DCA               	rlf	??_lcd_vDrawCGRAM+1,f
  2787  0ECC  3020               	movlw	32
  2788  0ECD  00CB               	movwf	??_lcd_vDrawCGRAM+2
  2789  0ECE  3021               	movlw	33
  2790  0ECF  00CC               	movwf	??_lcd_vDrawCGRAM+3
  2791  0ED0  0849               	movf	??_lcd_vDrawCGRAM,w
  2792  0ED1  074B               	addwf	??_lcd_vDrawCGRAM+2,w
  2793  0ED2  0086               	movwf	6
  2794  0ED3  084A               	movf	??_lcd_vDrawCGRAM+1,w
  2795  0ED4  3D4C               	addwfc	??_lcd_vDrawCGRAM+3,w
  2796  0ED5  0087               	movwf	7
  2797  0ED6  3020               	movlw	32
  2798  0ED7  0201               	subwf	1,w
  2799  0ED8  1803               	skipnc
  2800  0ED9  2EF1               	goto	l5224
  2801                           
  2802                           ;InterfaceMain.c: 550:             ST7032_vWriteCGRAMSSP2(u8Idx, &sMemoryMap.u8CGRam[u8I
      +                          dx * 8]);
  2803  0EDA  084D               	movf	lcd_vDrawCGRAM@u8Idx,w
  2804  0EDB  00C9               	movwf	??_lcd_vDrawCGRAM
  2805  0EDC  01CA               	clrf	??_lcd_vDrawCGRAM+1
  2806  0EDD  35C9               	lslf	??_lcd_vDrawCGRAM,f
  2807  0EDE  0DCA               	rlf	??_lcd_vDrawCGRAM+1,f
  2808  0EDF  35C9               	lslf	??_lcd_vDrawCGRAM,f
  2809  0EE0  0DCA               	rlf	??_lcd_vDrawCGRAM+1,f
  2810  0EE1  35C9               	lslf	??_lcd_vDrawCGRAM,f
  2811  0EE2  0DCA               	rlf	??_lcd_vDrawCGRAM+1,f
  2812  0EE3  3020               	movlw	32
  2813  0EE4  00CB               	movwf	??_lcd_vDrawCGRAM+2
  2814  0EE5  3021               	movlw	33
  2815  0EE6  00CC               	movwf	??_lcd_vDrawCGRAM+3
  2816  0EE7  0849               	movf	??_lcd_vDrawCGRAM,w
  2817  0EE8  074B               	addwf	??_lcd_vDrawCGRAM+2,w
  2818  0EE9  00C2               	movwf	ST7032_vWriteCGRAMSSP2@pu8BitMap
  2819  0EEA  084A               	movf	??_lcd_vDrawCGRAM+1,w
  2820  0EEB  3D4C               	addwfc	??_lcd_vDrawCGRAM+3,w
  2821  0EEC  00C3               	movwf	ST7032_vWriteCGRAMSSP2@pu8BitMap+1
  2822  0EED  084D               	movf	lcd_vDrawCGRAM@u8Idx,w
  2823  0EEE  3186  2625  318E   	fcall	_ST7032_vWriteCGRAMSSP2
  2824  0EF1                     l5224:	
  2825                           
  2826                           ;InterfaceMain.c: 552:     }
  2827  0EF1  3001               	movlw	1
  2828  0EF2  0020               	movlb	0	; select bank0
  2829  0EF3  00C9               	movwf	??_lcd_vDrawCGRAM
  2830  0EF4  0849               	movf	??_lcd_vDrawCGRAM,w
  2831  0EF5  07CD               	addwf	lcd_vDrawCGRAM@u8Idx,f
  2832  0EF6  3008               	movlw	8
  2833  0EF7  024D               	subwf	lcd_vDrawCGRAM@u8Idx,w
  2834  0EF8  1803               	btfsc	3,0
  2835  0EF9  0008               	return
  2836  0EFA  2EC3               	goto	l5220
  2837  0EFB                     __end_of_lcd_vDrawCGRAM:	
  2838                           
  2839                           	psect	text6
  2840  0625                     __ptext6:	
  2841 ;; *************** function _ST7032_vWriteCGRAMSSP2 *****************
  2842 ;; Defined at:
  2843 ;;		line 864 in file "st7032.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;  u8CharNo        1    wreg     unsigned char 
  2846 ;;  pu8BitMap       2   34[BANK0 ] PTR unsigned char 
  2847 ;;		 -> sMemoryMap.u8CGRam(64), sMemoryMap(167), 
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;  u8CharNo        1   37[BANK0 ] unsigned char 
  2850 ;;  pu8WkMap        2   38[BANK0 ] PTR unsigned char 
  2851 ;;		 -> sMemoryMap.u8CGRam(64), sMemoryMap(167), 
  2852 ;;  u8Idx           1   40[BANK0 ] unsigned char 
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      void 
  2855 ;; Registers used:
  2856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2862 ;;      Params:         0       2       0       0       0       0
  2863 ;;      Locals:         0       4       0       0       0       0
  2864 ;;      Temps:          0       1       0       0       0       0
  2865 ;;      Totals:         0       7       0       0       0       0
  2866 ;;Total ram usage:        7 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:   10
  2869 ;; This function calls:
  2870 ;;		_I2C_u8MstStartSSP2
  2871 ;;		_I2C_u8MstTxSSP2
  2872 ;;		_I2C_vMstStopSSP2
  2873 ;;		_bSetCursorSSP2
  2874 ;;		_vExecCmdSSP2
  2875 ;; This function is called by:
  2876 ;;		_lcd_vDrawCGRAM
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           
  2881                           ;psect for function _ST7032_vWriteCGRAMSSP2
  2882  0625                     _ST7032_vWriteCGRAMSSP2:	
  2883                           
  2884                           ;incstack = 0
  2885                           ; Regs used in _ST7032_vWriteCGRAMSSP2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  2886                           ;ST7032_vWriteCGRAMSSP2@u8CharNo stored from wreg
  2887  0625  0020               	movlb	0	; select bank0
  2888  0626  00C5               	movwf	ST7032_vWriteCGRAMSSP2@u8CharNo
  2889                           
  2890                           ;st7032.c: 866:     I2C_u8MstStartSSP2((0x3E), (0));
  2891  0627  01AF               	clrf	I2C_u8MstStartSSP2@bReadFlg
  2892  0628  303E               	movlw	62
  2893  0629  318C  24D6  3186   	fcall	_I2C_u8MstStartSSP2
  2894                           
  2895                           ;st7032.c: 868:     vExecCmdSSP2((0b00111000));
  2896  062C  3038               	movlw	56
  2897  062D  318C  243D  3186   	fcall	_vExecCmdSSP2
  2898                           
  2899                           ;st7032.c: 869:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2900  0630  3022               	movlw	34
  2901  0631                     u4057:	
  2902  0631  0B89               	decfsz	9,f
  2903  0632  2E31               	goto	u4057
  2904  0633  3200               	nop2
  2905                           
  2906                           ;st7032.c: 871:     vExecCmdSSP2((0b01000000) | ((u8CharNo << 3) & 0x38));
  2907  0634  0020               	movlb	0	; select bank0
  2908  0635  0845               	movf	ST7032_vWriteCGRAMSSP2@u8CharNo,w
  2909  0636  00C4               	movwf	??_ST7032_vWriteCGRAMSSP2
  2910  0637  3002               	movlw	2
  2911  0638                     u3455:	
  2912  0638  35C4               	lslf	??_ST7032_vWriteCGRAMSSP2,f
  2913  0639  3EFF               	addlw	-1
  2914  063A  1D03               	skipz
  2915  063B  2E38               	goto	u3455
  2916  063C  3544               	lslf	??_ST7032_vWriteCGRAMSSP2,w
  2917  063D  3938               	andlw	56
  2918  063E  3840               	iorlw	64
  2919  063F  318C  243D  3186   	fcall	_vExecCmdSSP2
  2920                           
  2921                           ;st7032.c: 872:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2922  0642  3022               	movlw	34
  2923  0643                     u4067:	
  2924  0643  0B89               	decfsz	9,f
  2925  0644  2E43               	goto	u4067
  2926  0645  3200               	nop2
  2927                           
  2928                           ;st7032.c: 874:     I2C_u8MstTxSSP2((0x40));
  2929  0646  3040               	movlw	64
  2930  0647  318C  2433  3186   	fcall	_I2C_u8MstTxSSP2
  2931                           
  2932                           ;st7032.c: 876:     unsigned char *pu8WkMap = pu8BitMap;
  2933  064A  0020               	movlb	0	; select bank0
  2934  064B  0843               	movf	ST7032_vWriteCGRAMSSP2@pu8BitMap+1,w
  2935  064C  00C7               	movwf	ST7032_vWriteCGRAMSSP2@pu8WkMap+1
  2936  064D  0842               	movf	ST7032_vWriteCGRAMSSP2@pu8BitMap,w
  2937  064E  00C6               	movwf	ST7032_vWriteCGRAMSSP2@pu8WkMap
  2938                           
  2939                           ;st7032.c: 877:     unsigned char u8Idx;;st7032.c: 878:     for (u8Idx = 0; u8Idx < 8; u
      +                          8Idx++) {
  2940  064F  01C8               	clrf	ST7032_vWriteCGRAMSSP2@u8Idx
  2941  0650                     l5092:	
  2942                           
  2943                           ;st7032.c: 879:         I2C_u8MstTxSSP2(*pu8WkMap & 0x1F);
  2944  0650  0846               	movf	ST7032_vWriteCGRAMSSP2@pu8WkMap,w
  2945  0651  0086               	movwf	6
  2946  0652  0847               	movf	ST7032_vWriteCGRAMSSP2@pu8WkMap+1,w
  2947  0653  0087               	movwf	7
  2948  0654  0801               	movf	1,w
  2949  0655  391F               	andlw	31
  2950  0656  318C  2433  3186   	fcall	_I2C_u8MstTxSSP2
  2951                           
  2952                           ;st7032.c: 880:         _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2953  0659  3022               	movlw	34
  2954  065A                     u4077:	
  2955  065A  0B89               	decfsz	9,f
  2956  065B  2E5A               	goto	u4077
  2957  065C  3200               	nop2
  2958                           
  2959                           ;st7032.c: 881:         pu8WkMap++;
  2960  065D  3001               	movlw	1
  2961  065E  0020               	movlb	0	; select bank0
  2962  065F  07C6               	addwf	ST7032_vWriteCGRAMSSP2@pu8WkMap,f
  2963  0660  3000               	movlw	0
  2964  0661  3DC7               	addwfc	ST7032_vWriteCGRAMSSP2@pu8WkMap+1,f
  2965                           
  2966                           ;st7032.c: 882:     }
  2967  0662  3001               	movlw	1
  2968  0663  00C4               	movwf	??_ST7032_vWriteCGRAMSSP2
  2969  0664  0844               	movf	??_ST7032_vWriteCGRAMSSP2,w
  2970  0665  07C8               	addwf	ST7032_vWriteCGRAMSSP2@u8Idx,f
  2971  0666  3008               	movlw	8
  2972  0667  0248               	subwf	ST7032_vWriteCGRAMSSP2@u8Idx,w
  2973  0668  1C03               	skipc
  2974  0669  2E50               	goto	l5092
  2975                           
  2976                           ;st7032.c: 884:     I2C_vMstStopSSP2();
  2977  066A  318C  240D  3186   	fcall	_I2C_vMstStopSSP2
  2978                           
  2979                           ;st7032.c: 886:     I2C_u8MstStartSSP2((0x3E), (0));
  2980  066D  0020               	movlb	0	; select bank0
  2981  066E  01AF               	clrf	I2C_u8MstStartSSP2@bReadFlg
  2982  066F  303E               	movlw	62
  2983  0670  318C  24D6  3186   	fcall	_I2C_u8MstStartSSP2
  2984                           
  2985                           ;st7032.c: 888:     bSetCursorSSP2(stStateSSP2.u8CursorPos);
  2986  0673  0020               	movlb	0	; select bank0
  2987  0674  0851               	movf	_stStateSSP2,w
  2988  0675  3187  2713         	fcall	_bSetCursorSSP2
  2989  0677  0008               	return
  2990  0678                     __end_of_ST7032_vWriteCGRAMSSP2:	
  2991                           
  2992                           	psect	text7
  2993  0F79                     __ptext7:	
  2994 ;; *************** function _lcd_vDarwLine *****************
  2995 ;; Defined at:
  2996 ;;		line 510 in file "InterfaceMain.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;  u8RowNo         1    wreg     unsigned char 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  u8RowNo         1   16[BANK1 ] unsigned char 
  3001 ;;  u8Msg          16    0[BANK1 ] unsigned char [16]
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  1    wreg      void 
  3004 ;; Registers used:
  3005 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3011 ;;      Params:         0       0       0       0       0       0
  3012 ;;      Locals:         0       0      17       0       0       0
  3013 ;;      Temps:          0       6       0       0       0       0
  3014 ;;      Totals:         0       6      17       0       0       0
  3015 ;;Total ram usage:       23 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; Hardware stack levels required when called:   12
  3018 ;; This function calls:
  3019 ;;		_ST7032_bSetCursorSSP2
  3020 ;;		_ST7032_vWriteDataSSP2
  3021 ;;		___wmul
  3022 ;;		_criticalSec_vBegin
  3023 ;;		_criticalSec_vEnd
  3024 ;;		_lcd_vDrawCursor
  3025 ;;		_memcpy
  3026 ;; This function is called by:
  3027 ;;		_main
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function _lcd_vDarwLine
  3033  0F79                     _lcd_vDarwLine:	
  3034                           
  3035                           ;incstack = 0
  3036                           ; Regs used in _lcd_vDarwLine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3037                           ;lcd_vDarwLine@u8RowNo stored from wreg
  3038  0F79  0021               	movlb	1	; select bank1
  3039  0F7A  00B0               	movwf	lcd_vDarwLine@u8RowNo^(0+128)
  3040                           
  3041                           ;InterfaceMain.c: 515:     criticalSec_vBegin();
  3042  0F7B  318C  2414  318F   	fcall	_criticalSec_vBegin
  3043                           
  3044                           ;InterfaceMain.c: 517:     unsigned char u8Msg[16];;InterfaceMain.c: 518:     memcpy(u8M
      +                          sg, &sMemoryMap.u8DispRam[u8RowNo * 40], 16);
  3045  0F7E  0021               	movlb	1	; select bank1
  3046  0F7F  0830               	movf	lcd_vDarwLine@u8RowNo^(0+128),w
  3047  0F80  0020               	movlb	0	; select bank0
  3048  0F81  00CA               	movwf	??_lcd_vDarwLine
  3049  0F82  01CB               	clrf	??_lcd_vDarwLine+1
  3050  0F83  084A               	movf	??_lcd_vDarwLine,w
  3051  0F84  00AF               	movwf	___wmul@multiplier
  3052  0F85  084B               	movf	??_lcd_vDarwLine+1,w
  3053  0F86  00B0               	movwf	___wmul@multiplier+1
  3054  0F87  3028               	movlw	40
  3055  0F88  00B1               	movwf	___wmul@multiplicand
  3056  0F89  3000               	movlw	0
  3057  0F8A  00B2               	movwf	___wmul@multiplicand+1
  3058  0F8B  3187  27E4  318F   	fcall	___wmul
  3059  0F8E  30D0               	movlw	208
  3060  0F8F  0020               	movlb	0	; select bank0
  3061  0F90  00CC               	movwf	??_lcd_vDarwLine+2
  3062  0F91  3020               	movlw	32
  3063  0F92  00CD               	movwf	??_lcd_vDarwLine+3
  3064  0F93  082F               	movf	?___wmul,w
  3065  0F94  074C               	addwf	??_lcd_vDarwLine+2,w
  3066  0F95  00CE               	movwf	??_lcd_vDarwLine+4
  3067  0F96  0830               	movf	?___wmul+1,w
  3068  0F97  3D4D               	addwfc	??_lcd_vDarwLine+3,w
  3069  0F98  00CF               	movwf	??_lcd_vDarwLine+5
  3070  0F99  084E               	movf	??_lcd_vDarwLine+4,w
  3071  0F9A  00B5               	movwf	memcpy@s1
  3072  0F9B  084F               	movf	??_lcd_vDarwLine+5,w
  3073  0F9C  00B6               	movwf	memcpy@s1+1
  3074  0F9D  3010               	movlw	16
  3075  0F9E  00B7               	movwf	memcpy@n
  3076  0F9F  3000               	movlw	0
  3077  0FA0  00B8               	movwf	memcpy@n+1
  3078  0FA1  30A0               	movlw	(low (lcd_vDarwLine@u8Msg| 0))& (0+255)
  3079  0FA2  318D  259C  318F   	fcall	_memcpy
  3080                           
  3081                           ;InterfaceMain.c: 520:     criticalSec_vEnd();
  3082  0FA5  318C  242B  318F   	fcall	_criticalSec_vEnd
  3083                           
  3084                           ;InterfaceMain.c: 526:     ST7032_bSetCursorSSP2(u8RowNo, 0);
  3085  0FA8  0020               	movlb	0	; select bank0
  3086  0FA9  01C2               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  3087  0FAA  0021               	movlb	1	; select bank1
  3088  0FAB  0830               	movf	lcd_vDarwLine@u8RowNo^(0+128),w
  3089  0FAC  318C  24F3  318F   	fcall	_ST7032_bSetCursorSSP2
  3090                           
  3091                           ;InterfaceMain.c: 528:     ST7032_vWriteDataSSP2(u8Msg, 16);
  3092  0FAF  3010               	movlw	16
  3093  0FB0  0020               	movlb	0	; select bank0
  3094  0FB1  00CA               	movwf	??_lcd_vDarwLine
  3095  0FB2  084A               	movf	??_lcd_vDarwLine,w
  3096  0FB3  00B6               	movwf	ST7032_vWriteDataSSP2@u8Len
  3097  0FB4  30A0               	movlw	(low (lcd_vDarwLine@u8Msg| 0))& (0+255)
  3098  0FB5  3186  26CA  318F   	fcall	_ST7032_vWriteDataSSP2
  3099                           
  3100                           ;InterfaceMain.c: 530:     lcd_vDrawCursor();
  3101  0FB8  318D  2554         	fcall	_lcd_vDrawCursor
  3102  0FBA  0008               	return
  3103  0FBB                     __end_of_lcd_vDarwLine:	
  3104                           
  3105                           	psect	text8
  3106  0D9C                     __ptext8:	
  3107 ;; *************** function _memcpy *****************
  3108 ;; Defined at:
  3109 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;  d1              1    wreg     PTR void 
  3112 ;;		 -> lcd_vDarwLine@u8Msg(16), 
  3113 ;;  s1              2   21[BANK0 ] PTR const void 
  3114 ;;		 -> sMemoryMap.u8DispRam(80), sMemoryMap(167), 
  3115 ;;  n               2   23[BANK0 ] unsigned int 
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;  d1              1   29[BANK0 ] PTR void 
  3118 ;;		 -> lcd_vDarwLine@u8Msg(16), 
  3119 ;;  s               2   27[BANK0 ] PTR const unsigned char 
  3120 ;;		 -> sMemoryMap.u8DispRam(80), sMemoryMap(167), 
  3121 ;;  d               1   30[BANK0 ] PTR unsigned char 
  3122 ;;		 -> lcd_vDarwLine@u8Msg(16), 
  3123 ;;  tmp             1   26[BANK0 ] unsigned char 
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      PTR void 
  3126 ;; Registers used:
  3127 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3133 ;;      Params:         0       4       0       0       0       0
  3134 ;;      Locals:         0       5       0       0       0       0
  3135 ;;      Temps:          0       1       0       0       0       0
  3136 ;;      Totals:         0      10       0       0       0       0
  3137 ;;Total ram usage:       10 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    6
  3140 ;; This function calls:
  3141 ;;		Nothing
  3142 ;; This function is called by:
  3143 ;;		_lcd_vDarwLine
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           
  3148                           ;psect for function _memcpy
  3149  0D9C                     _memcpy:	
  3150                           
  3151                           ;incstack = 0
  3152                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  3153                           ;memcpy@d1 stored from wreg
  3154  0D9C  0020               	movlb	0	; select bank0
  3155  0D9D  00BD               	movwf	memcpy@d1
  3156  0D9E  0836               	movf	memcpy@s1+1,w
  3157  0D9F  00BC               	movwf	memcpy@s+1
  3158  0DA0  0835               	movf	memcpy@s1,w
  3159  0DA1  00BB               	movwf	memcpy@s
  3160  0DA2  083D               	movf	memcpy@d1,w
  3161  0DA3  00B9               	movwf	??_memcpy
  3162  0DA4  0839               	movf	??_memcpy,w
  3163  0DA5  00BE               	movwf	memcpy@d
  3164  0DA6                     l5056:	
  3165  0DA6  3001               	movlw	1
  3166  0DA7  02B7               	subwf	memcpy@n,f
  3167  0DA8  3000               	movlw	0
  3168  0DA9  3BB8               	subwfb	memcpy@n+1,f
  3169  0DAA  0A37               	incf	memcpy@n,w
  3170  0DAB  1903               	btfsc	3,2
  3171  0DAC  0A38               	incf	memcpy@n+1,w
  3172  0DAD  1903               	btfsc	3,2
  3173  0DAE  0008               	return
  3174  0DAF  083B               	movf	memcpy@s,w
  3175  0DB0  0086               	movwf	6
  3176  0DB1  083C               	movf	memcpy@s+1,w
  3177  0DB2  0087               	movwf	7
  3178  0DB3  0801               	movf	1,w
  3179  0DB4  00B9               	movwf	??_memcpy
  3180  0DB5  0839               	movf	??_memcpy,w
  3181  0DB6  00BA               	movwf	memcpy@tmp
  3182  0DB7  3001               	movlw	1
  3183  0DB8  07BB               	addwf	memcpy@s,f
  3184  0DB9  3000               	movlw	0
  3185  0DBA  3DBC               	addwfc	memcpy@s+1,f
  3186  0DBB  083A               	movf	memcpy@tmp,w
  3187  0DBC  00B9               	movwf	??_memcpy
  3188  0DBD  083E               	movf	memcpy@d,w
  3189  0DBE  0086               	movwf	6
  3190  0DBF  0187               	clrf	7
  3191  0DC0  0839               	movf	??_memcpy,w
  3192  0DC1  0081               	movwf	1
  3193  0DC2  3001               	movlw	1
  3194  0DC3  00B9               	movwf	??_memcpy
  3195  0DC4  0839               	movf	??_memcpy,w
  3196  0DC5  07BE               	addwf	memcpy@d,f
  3197  0DC6  2DA6               	goto	l5056
  3198  0DC7                     __end_of_memcpy:	
  3199                           
  3200                           	psect	text9
  3201  0D54                     __ptext9:	
  3202 ;; *************** function _lcd_vDrawCursor *****************
  3203 ;; Defined at:
  3204 ;;		line 484 in file "InterfaceMain.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;		None
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;  u8CursorCol     1   41[BANK0 ] unsigned char 
  3209 ;;  u8CursorRow     1   40[BANK0 ] unsigned char 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  1    wreg      void 
  3212 ;; Registers used:
  3213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3219 ;;      Params:         0       0       0       0       0       0
  3220 ;;      Locals:         0       2       0       0       0       0
  3221 ;;      Temps:          0       1       0       0       0       0
  3222 ;;      Totals:         0       3       0       0       0       0
  3223 ;;Total ram usage:        3 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:   11
  3226 ;; This function calls:
  3227 ;;		_ST7032_bSetCursorSSP2
  3228 ;;		_criticalSec_vBegin
  3229 ;;		_criticalSec_vEnd
  3230 ;; This function is called by:
  3231 ;;		_main
  3232 ;;		_lcd_vDarwLine
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           
  3237                           ;psect for function _lcd_vDrawCursor
  3238  0D54                     _lcd_vDrawCursor:	
  3239                           
  3240                           ;InterfaceMain.c: 486:     criticalSec_vBegin();
  3241                           
  3242                           ;incstack = 0
  3243                           ; Regs used in _lcd_vDrawCursor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3244  0D54  318C  2414  318D   	fcall	_criticalSec_vBegin
  3245                           
  3246                           ;InterfaceMain.c: 488:     unsigned char u8CursorRow = sMemoryMap.u8CursorRow;
  3247  0D57  30C9               	movlw	201
  3248  0D58  0086               	movwf	6
  3249  0D59  3020               	movlw	32
  3250  0D5A  0087               	movwf	7
  3251  0D5B  3145               	addfsr 1,5
  3252  0D5C  0801               	movf	1,w
  3253  0D5D  0020               	movlb	0	; select bank0
  3254  0D5E  00C7               	movwf	??_lcd_vDrawCursor
  3255  0D5F  0847               	movf	??_lcd_vDrawCursor,w
  3256  0D60  00C8               	movwf	lcd_vDrawCursor@u8CursorRow
  3257                           
  3258                           ;InterfaceMain.c: 489:     unsigned char u8CursorCol = sMemoryMap.u8CursorCol;
  3259  0D61  30C9               	movlw	201
  3260  0D62  0086               	movwf	6
  3261  0D63  3020               	movlw	32
  3262  0D64  0087               	movwf	7
  3263  0D65  3146               	addfsr 1,6
  3264  0D66  0801               	movf	1,w
  3265  0D67  00C7               	movwf	??_lcd_vDrawCursor
  3266  0D68  0847               	movf	??_lcd_vDrawCursor,w
  3267  0D69  00C9               	movwf	lcd_vDrawCursor@u8CursorCol
  3268                           
  3269                           ;InterfaceMain.c: 491:     criticalSec_vEnd();
  3270  0D6A  318C  242B  318D   	fcall	_criticalSec_vEnd
  3271                           
  3272                           ;InterfaceMain.c: 493:     ST7032_bSetCursorSSP2(u8CursorRow, u8CursorCol);
  3273  0D6D  0020               	movlb	0	; select bank0
  3274  0D6E  0849               	movf	lcd_vDrawCursor@u8CursorCol,w
  3275  0D6F  00C7               	movwf	??_lcd_vDrawCursor
  3276  0D70  0847               	movf	??_lcd_vDrawCursor,w
  3277  0D71  00C2               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  3278  0D72  0848               	movf	lcd_vDrawCursor@u8CursorRow,w
  3279  0D73  318C  24F3         	fcall	_ST7032_bSetCursorSSP2
  3280  0D75  0008               	return
  3281  0D76                     __end_of_lcd_vDrawCursor:	
  3282                           
  3283                           	psect	text10
  3284  0CF3                     __ptext10:	
  3285 ;; *************** function _ST7032_bSetCursorSSP2 *****************
  3286 ;; Defined at:
  3287 ;;		line 693 in file "st7032.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  u8RowNo         1    wreg     unsigned char 
  3290 ;;  u8ColNo         1   34[BANK0 ] unsigned char 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  u8RowNo         1   37[BANK0 ] unsigned char 
  3293 ;;  u8Addr          1   38[BANK0 ] unsigned char 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      unsigned char 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0, pclath, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3303 ;;      Params:         0       1       0       0       0       0
  3304 ;;      Locals:         0       2       0       0       0       0
  3305 ;;      Temps:          0       2       0       0       0       0
  3306 ;;      Totals:         0       5       0       0       0       0
  3307 ;;Total ram usage:        5 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:   10
  3310 ;; This function calls:
  3311 ;;		___bmul
  3312 ;;		_bSetCursorSSP2
  3313 ;; This function is called by:
  3314 ;;		_lcd_vDrawCursor
  3315 ;;		_lcd_vDarwLine
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           
  3320                           ;psect for function _ST7032_bSetCursorSSP2
  3321  0CF3                     _ST7032_bSetCursorSSP2:	
  3322                           
  3323                           ;incstack = 0
  3324                           ; Regs used in _ST7032_bSetCursorSSP2: [wreg+status,2+status,0+pclath+cstack]
  3325                           ;ST7032_bSetCursorSSP2@u8RowNo stored from wreg
  3326  0CF3  0020               	movlb	0	; select bank0
  3327  0CF4  00C5               	movwf	ST7032_bSetCursorSSP2@u8RowNo
  3328                           
  3329                           ;st7032.c: 695:     if (u8RowNo > (1) || u8ColNo > (39)) {
  3330  0CF5  3002               	movlw	2
  3331  0CF6  0245               	subwf	ST7032_bSetCursorSSP2@u8RowNo,w
  3332  0CF7  1803               	skipnc
  3333  0CF8  0008               	return
  3334  0CF9  3028               	movlw	40
  3335  0CFA  0242               	subwf	ST7032_bSetCursorSSP2@u8ColNo,w
  3336  0CFB  1803               	btfsc	3,0
  3337  0CFC  0008               	return
  3338                           
  3339                           ;st7032.c: 699:     unsigned char u8Addr = (u8RowNo * 40) + u8ColNo;
  3340  0CFD  3028               	movlw	40
  3341  0CFE  00C3               	movwf	??_ST7032_bSetCursorSSP2
  3342  0CFF  0843               	movf	??_ST7032_bSetCursorSSP2,w
  3343  0D00  00AF               	movwf	___bmul@multiplicand
  3344  0D01  0845               	movf	ST7032_bSetCursorSSP2@u8RowNo,w
  3345  0D02  318C  247D  318C   	fcall	___bmul
  3346  0D05  0020               	movlb	0	; select bank0
  3347  0D06  0742               	addwf	ST7032_bSetCursorSSP2@u8ColNo,w
  3348  0D07  00C4               	movwf	??_ST7032_bSetCursorSSP2+1
  3349  0D08  0844               	movf	??_ST7032_bSetCursorSSP2+1,w
  3350  0D09  00C6               	movwf	ST7032_bSetCursorSSP2@u8Addr
  3351                           
  3352                           ;st7032.c: 700:     if (u8Addr == stStateSSP2.u8CursorPos) {
  3353  0D0A  0851               	movf	_stStateSSP2,w
  3354  0D0B  0646               	xorwf	ST7032_bSetCursorSSP2@u8Addr,w
  3355  0D0C  1903               	btfsc	3,2
  3356  0D0D  0008               	return
  3357                           
  3358                           ;st7032.c: 704:     return bSetCursorSSP2(u8Addr);;	Return value of _ST7032_bSetCursorSS
      +                          P2 is never used
  3359  0D0E  0846               	movf	ST7032_bSetCursorSSP2@u8Addr,w
  3360  0D0F  3187  2713         	fcall	_bSetCursorSSP2
  3361  0D11  0008               	return
  3362  0D12                     __end_of_ST7032_bSetCursorSSP2:	
  3363                           
  3364                           	psect	text11
  3365  0713                     __ptext11:	
  3366 ;; *************** function _bSetCursorSSP2 *****************
  3367 ;; Defined at:
  3368 ;;		line 1321 in file "st7032.c"
  3369 ;; Parameters:    Size  Location     Type
  3370 ;;  u8Pos           1    wreg     unsigned char 
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;  u8Pos           1   33[BANK0 ] unsigned char 
  3373 ;;  u8Addr          1   32[BANK0 ] unsigned char 
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  1    wreg      unsigned char 
  3376 ;; Registers used:
  3377 ;;		wreg, status,2, status,0, pclath, cstack
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3383 ;;      Params:         0       0       0       0       0       0
  3384 ;;      Locals:         0       2       0       0       0       0
  3385 ;;      Temps:          0       8       0       0       0       0
  3386 ;;      Totals:         0      10       0       0       0       0
  3387 ;;Total ram usage:       10 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:    9
  3390 ;; This function calls:
  3391 ;;		_I2C_u8MstStartSSP2
  3392 ;;		___awdiv
  3393 ;;		___awmod
  3394 ;;		_vExecCmdEndSSP2
  3395 ;; This function is called by:
  3396 ;;		_ST7032_bSetCursorSSP2
  3397 ;;		_ST7032_vWriteCGRAMSSP2
  3398 ;;		_ST7032_vWriteIconSSP2
  3399 ;;		_ST7032_vClearIconSSP2
  3400 ;;		_ST7032_bCursorLeftSSP2
  3401 ;;		_ST7032_bCursorRightSSP2
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           
  3406                           ;psect for function _bSetCursorSSP2
  3407  0713                     _bSetCursorSSP2:	
  3408                           
  3409                           ;incstack = 0
  3410                           ; Regs used in _bSetCursorSSP2: [wreg+status,2+status,0+pclath+cstack]
  3411                           ;bSetCursorSSP2@u8Pos stored from wreg
  3412  0713  0020               	movlb	0	; select bank0
  3413  0714  00C1               	movwf	bSetCursorSSP2@u8Pos
  3414                           
  3415                           ;st7032.c: 1323:     stStateSSP2.u8CursorPos = u8Pos;
  3416  0715  0841               	movf	bSetCursorSSP2@u8Pos,w
  3417  0716  00B8               	movwf	??_bSetCursorSSP2
  3418  0717  0838               	movf	??_bSetCursorSSP2,w
  3419  0718  00D1               	movwf	_stStateSSP2
  3420                           
  3421                           ;st7032.c: 1325:     unsigned char u8Addr = (u8Pos / 40) * 0x40 + (u8Pos % 40);
  3422  0719  3028               	movlw	40
  3423  071A  00AF               	movwf	___awmod@divisor
  3424  071B  3000               	movlw	0
  3425  071C  00B0               	movwf	___awmod@divisor+1
  3426  071D  0841               	movf	bSetCursorSSP2@u8Pos,w
  3427  071E  00B8               	movwf	??_bSetCursorSSP2
  3428  071F  01B9               	clrf	??_bSetCursorSSP2+1
  3429  0720  0838               	movf	??_bSetCursorSSP2,w
  3430  0721  00B1               	movwf	___awmod@dividend
  3431  0722  0839               	movf	??_bSetCursorSSP2+1,w
  3432  0723  00B2               	movwf	___awmod@dividend+1
  3433  0724  3187  2759  3187   	fcall	___awmod
  3434  0727  0020               	movlb	0	; select bank0
  3435  0728  082F               	movf	?___awmod,w
  3436  0729  00BA               	movwf	??_bSetCursorSSP2+2
  3437  072A  0830               	movf	?___awmod+1,w
  3438  072B  00BB               	movwf	??_bSetCursorSSP2+3
  3439  072C  3028               	movlw	40
  3440  072D  00AF               	movwf	___awdiv@divisor
  3441  072E  3000               	movlw	0
  3442  072F  00B0               	movwf	___awdiv@divisor+1
  3443  0730  0841               	movf	bSetCursorSSP2@u8Pos,w
  3444  0731  00BC               	movwf	??_bSetCursorSSP2+4
  3445  0732  01BD               	clrf	??_bSetCursorSSP2+5
  3446  0733  083C               	movf	??_bSetCursorSSP2+4,w
  3447  0734  00B1               	movwf	___awdiv@dividend
  3448  0735  083D               	movf	??_bSetCursorSSP2+5,w
  3449  0736  00B2               	movwf	___awdiv@dividend+1
  3450  0737  3186  2678  3187   	fcall	___awdiv
  3451  073A  0020               	movlb	0	; select bank0
  3452  073B  082F               	movf	?___awdiv,w
  3453  073C  00BE               	movwf	??_bSetCursorSSP2+6
  3454  073D  3005               	movlw	5
  3455  073E                     u3335:	
  3456  073E  35BE               	lslf	??_bSetCursorSSP2+6,f
  3457  073F  3EFF               	addlw	-1
  3458  0740  1D03               	skipz
  3459  0741  2F3E               	goto	u3335
  3460  0742  353E               	lslf	??_bSetCursorSSP2+6,w
  3461  0743  073A               	addwf	??_bSetCursorSSP2+2,w
  3462  0744  00BF               	movwf	??_bSetCursorSSP2+7
  3463  0745  083F               	movf	??_bSetCursorSSP2+7,w
  3464  0746  00C0               	movwf	bSetCursorSSP2@u8Addr
  3465                           
  3466                           ;st7032.c: 1327:     I2C_u8MstStartSSP2((0x3E), (0));
  3467  0747  01AF               	clrf	I2C_u8MstStartSSP2@bReadFlg
  3468  0748  303E               	movlw	62
  3469  0749  318C  24D6  3187   	fcall	_I2C_u8MstStartSSP2
  3470                           
  3471                           ;st7032.c: 1329:     vExecCmdEndSSP2((0b10000000) | (u8Addr & 0x7F));
  3472  074C  0020               	movlb	0	; select bank0
  3473  074D  0840               	movf	bSetCursorSSP2@u8Addr,w
  3474  074E  397F               	andlw	127
  3475  074F  3880               	iorlw	128
  3476  0750  318C  246F  3187   	fcall	_vExecCmdEndSSP2
  3477                           
  3478                           ;st7032.c: 1330:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  3479  0753  3022               	movlw	34
  3480  0754                     u4087:	
  3481  0754  0B89               	decfsz	9,f
  3482  0755  2F54               	goto	u4087
  3483  0756  3200               	nop2
  3484                           
  3485                           ;st7032.c: 1332:     return (1);
  3486  0757  3001               	movlw	1
  3487  0758  0008               	return
  3488  0759                     __end_of_bSetCursorSSP2:	
  3489                           
  3490                           	psect	text12
  3491  0678                     __ptext12:	
  3492 ;; *************** function ___awdiv *****************
  3493 ;; Defined at:
  3494 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;  divisor         2   15[BANK0 ] int 
  3497 ;;  dividend        2   17[BANK0 ] int 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  quotient        2   22[BANK0 ] int 
  3500 ;;  sign            1   21[BANK0 ] unsigned char 
  3501 ;;  counter         1   20[BANK0 ] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  2   15[BANK0 ] int 
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3511 ;;      Params:         0       4       0       0       0       0
  3512 ;;      Locals:         0       4       0       0       0       0
  3513 ;;      Temps:          0       1       0       0       0       0
  3514 ;;      Totals:         0       9       0       0       0       0
  3515 ;;Total ram usage:        9 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    6
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_bSetCursorSSP2
  3522 ;;		_ST7032_u8GetCursorRowNoSSP1
  3523 ;;		_ST7032_u8GetCursorRowNoSSP2
  3524 ;;		_bSetCursorSSP1
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           
  3529                           ;psect for function ___awdiv
  3530  0678                     ___awdiv:	
  3531                           
  3532                           ;incstack = 0
  3533                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3534  0678  0020               	movlb	0	; select bank0
  3535  0679  01B5               	clrf	___awdiv@sign
  3536  067A  1FB0               	btfss	___awdiv@divisor+1,7
  3537  067B  2E83               	goto	l4864
  3538  067C  09AF               	comf	___awdiv@divisor,f
  3539  067D  09B0               	comf	___awdiv@divisor+1,f
  3540  067E  0AAF               	incf	___awdiv@divisor,f
  3541  067F  1903               	skipnz
  3542  0680  0AB0               	incf	___awdiv@divisor+1,f
  3543  0681  01B5               	clrf	___awdiv@sign
  3544  0682  0AB5               	incf	___awdiv@sign,f
  3545  0683                     l4864:	
  3546  0683  1FB2               	btfss	___awdiv@dividend+1,7
  3547  0684  2E8E               	goto	l4870
  3548  0685  09B1               	comf	___awdiv@dividend,f
  3549  0686  09B2               	comf	___awdiv@dividend+1,f
  3550  0687  0AB1               	incf	___awdiv@dividend,f
  3551  0688  1903               	skipnz
  3552  0689  0AB2               	incf	___awdiv@dividend+1,f
  3553  068A  3001               	movlw	1
  3554  068B  00B3               	movwf	??___awdiv
  3555  068C  0833               	movf	??___awdiv,w
  3556  068D  06B5               	xorwf	___awdiv@sign,f
  3557  068E                     l4870:	
  3558  068E  01B6               	clrf	___awdiv@quotient
  3559  068F  01B7               	clrf	___awdiv@quotient+1
  3560  0690  082F               	movf	___awdiv@divisor,w
  3561  0691  0430               	iorwf	___awdiv@divisor+1,w
  3562  0692  1903               	btfsc	3,2
  3563  0693  2EBD               	goto	l4892
  3564  0694  01B4               	clrf	___awdiv@counter
  3565  0695  0AB4               	incf	___awdiv@counter,f
  3566  0696                     l4880:	
  3567  0696  1BB0               	btfsc	___awdiv@divisor+1,7
  3568  0697  2EA2               	goto	l4882
  3569  0698  3001               	movlw	1
  3570  0699                     u3175:	
  3571  0699  35AF               	lslf	___awdiv@divisor,f
  3572  069A  0DB0               	rlf	___awdiv@divisor+1,f
  3573  069B  0B89               	decfsz	9,f
  3574  069C  2E99               	goto	u3175
  3575  069D  3001               	movlw	1
  3576  069E  00B3               	movwf	??___awdiv
  3577  069F  0833               	movf	??___awdiv,w
  3578  06A0  07B4               	addwf	___awdiv@counter,f
  3579  06A1  2E96               	goto	l4880
  3580  06A2                     l4882:	
  3581  06A2  3001               	movlw	1
  3582  06A3                     u3195:	
  3583  06A3  35B6               	lslf	___awdiv@quotient,f
  3584  06A4  0DB7               	rlf	___awdiv@quotient+1,f
  3585  06A5  0B89               	decfsz	9,f
  3586  06A6  2EA3               	goto	u3195
  3587  06A7  0830               	movf	___awdiv@divisor+1,w
  3588  06A8  0232               	subwf	___awdiv@dividend+1,w
  3589  06A9  1D03               	skipz
  3590  06AA  2EAD               	goto	u3205
  3591  06AB  082F               	movf	___awdiv@divisor,w
  3592  06AC  0231               	subwf	___awdiv@dividend,w
  3593  06AD                     u3205:	
  3594  06AD  1C03               	skipc
  3595  06AE  2EB4               	goto	l4888
  3596  06AF  082F               	movf	___awdiv@divisor,w
  3597  06B0  02B1               	subwf	___awdiv@dividend,f
  3598  06B1  0830               	movf	___awdiv@divisor+1,w
  3599  06B2  3BB2               	subwfb	___awdiv@dividend+1,f
  3600  06B3  1436               	bsf	___awdiv@quotient,0
  3601  06B4                     l4888:	
  3602  06B4  3001               	movlw	1
  3603  06B5                     u3215:	
  3604  06B5  36B0               	lsrf	___awdiv@divisor+1,f
  3605  06B6  0CAF               	rrf	___awdiv@divisor,f
  3606  06B7  0B89               	decfsz	9,f
  3607  06B8  2EB5               	goto	u3215
  3608  06B9  3001               	movlw	1
  3609  06BA  02B4               	subwf	___awdiv@counter,f
  3610  06BB  1D03               	btfss	3,2
  3611  06BC  2EA2               	goto	l4882
  3612  06BD                     l4892:	
  3613  06BD  0835               	movf	___awdiv@sign,w
  3614  06BE  1903               	btfsc	3,2
  3615  06BF  2EC5               	goto	l4896
  3616  06C0  09B6               	comf	___awdiv@quotient,f
  3617  06C1  09B7               	comf	___awdiv@quotient+1,f
  3618  06C2  0AB6               	incf	___awdiv@quotient,f
  3619  06C3  1903               	skipnz
  3620  06C4  0AB7               	incf	___awdiv@quotient+1,f
  3621  06C5                     l4896:	
  3622  06C5  0837               	movf	___awdiv@quotient+1,w
  3623  06C6  00B0               	movwf	?___awdiv+1
  3624  06C7  0836               	movf	___awdiv@quotient,w
  3625  06C8  00AF               	movwf	?___awdiv
  3626  06C9  0008               	return
  3627  06CA                     __end_of___awdiv:	
  3628                           
  3629                           	psect	text13
  3630  0C7D                     __ptext13:	
  3631 ;; *************** function ___bmul *****************
  3632 ;; Defined at:
  3633 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;  multiplier      1    wreg     unsigned char 
  3636 ;;  multiplicand    1   15[BANK0 ] unsigned char 
  3637 ;; Auto vars:     Size  Location     Type
  3638 ;;  multiplier      1   18[BANK0 ] unsigned char 
  3639 ;;  product         1   17[BANK0 ] unsigned char 
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  1    wreg      unsigned char 
  3642 ;; Registers used:
  3643 ;;		wreg, status,2, status,0
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3649 ;;      Params:         0       1       0       0       0       0
  3650 ;;      Locals:         0       2       0       0       0       0
  3651 ;;      Temps:          0       1       0       0       0       0
  3652 ;;      Totals:         0       4       0       0       0       0
  3653 ;;Total ram usage:        4 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    6
  3656 ;; This function calls:
  3657 ;;		Nothing
  3658 ;; This function is called by:
  3659 ;;		_ST7032_bSetCursorSSP2
  3660 ;;		_ST7032_bSetCursorSSP1
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           
  3665                           ;psect for function ___bmul
  3666  0C7D                     ___bmul:	
  3667                           
  3668                           ;incstack = 0
  3669                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3670                           ;___bmul@multiplier stored from wreg
  3671  0C7D  0020               	movlb	0	; select bank0
  3672  0C7E  00B2               	movwf	___bmul@multiplier
  3673  0C7F  01B1               	clrf	___bmul@product
  3674  0C80                     l4954:	
  3675  0C80  1C32               	btfss	___bmul@multiplier,0
  3676  0C81  2C86               	goto	l4958
  3677  0C82  082F               	movf	___bmul@multiplicand,w
  3678  0C83  00B0               	movwf	??___bmul
  3679  0C84  0830               	movf	??___bmul,w
  3680  0C85  07B1               	addwf	___bmul@product,f
  3681  0C86                     l4958:	
  3682  0C86  1003               	clrc
  3683  0C87  0DAF               	rlf	___bmul@multiplicand,f
  3684  0C88  1003               	clrc
  3685  0C89  0CB2               	rrf	___bmul@multiplier,f
  3686  0C8A  0832               	movf	___bmul@multiplier,w
  3687  0C8B  1D03               	btfss	3,2
  3688  0C8C  2C80               	goto	l4954
  3689  0C8D  0831               	movf	___bmul@product,w
  3690  0C8E  0008               	return
  3691  0C8F                     __end_of___bmul:	
  3692                           
  3693                           	psect	text14
  3694  07E4                     __ptext14:	
  3695 ;; *************** function ___wmul *****************
  3696 ;; Defined at:
  3697 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  multiplier      2   15[BANK0 ] unsigned int 
  3700 ;;  multiplicand    2   17[BANK0 ] unsigned int 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  product         2   19[BANK0 ] unsigned int 
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  2   15[BANK0 ] unsigned int 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3712 ;;      Params:         0       4       0       0       0       0
  3713 ;;      Locals:         0       2       0       0       0       0
  3714 ;;      Temps:          0       0       0       0       0       0
  3715 ;;      Totals:         0       6       0       0       0       0
  3716 ;;Total ram usage:        6 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    6
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_lcd_vDarwLine
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           
  3727                           ;psect for function ___wmul
  3728  07E4                     ___wmul:	
  3729                           
  3730                           ;incstack = 0
  3731                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3732  07E4  0020               	movlb	0	; select bank0
  3733  07E5  01B3               	clrf	___wmul@product
  3734  07E6  01B4               	clrf	___wmul@product+1
  3735  07E7                     l5120:	
  3736  07E7  1C2F               	btfss	___wmul@multiplier,0
  3737  07E8  2FED               	goto	l796
  3738  07E9  0831               	movf	___wmul@multiplicand,w
  3739  07EA  07B3               	addwf	___wmul@product,f
  3740  07EB  0832               	movf	___wmul@multiplicand+1,w
  3741  07EC  3DB4               	addwfc	___wmul@product+1,f
  3742  07ED                     l796:	
  3743  07ED  3001               	movlw	1
  3744  07EE                     u3485:	
  3745  07EE  35B1               	lslf	___wmul@multiplicand,f
  3746  07EF  0DB2               	rlf	___wmul@multiplicand+1,f
  3747  07F0  0B89               	decfsz	9,f
  3748  07F1  2FEE               	goto	u3485
  3749  07F2  3001               	movlw	1
  3750  07F3                     u3495:	
  3751  07F3  36B0               	lsrf	___wmul@multiplier+1,f
  3752  07F4  0CAF               	rrf	___wmul@multiplier,f
  3753  07F5  0B89               	decfsz	9,f
  3754  07F6  2FF3               	goto	u3495
  3755  07F7  082F               	movf	___wmul@multiplier,w
  3756  07F8  0430               	iorwf	___wmul@multiplier+1,w
  3757  07F9  1D03               	btfss	3,2
  3758  07FA  2FE7               	goto	l5120
  3759  07FB  0834               	movf	___wmul@product+1,w
  3760  07FC  00B0               	movwf	?___wmul+1
  3761  07FD  0833               	movf	___wmul@product,w
  3762  07FE  00AF               	movwf	?___wmul
  3763  07FF  0008               	return
  3764  0800                     __end_of___wmul:	
  3765                           
  3766                           	psect	text15
  3767  06CA                     __ptext15:	
  3768 ;; *************** function _ST7032_vWriteDataSSP2 *****************
  3769 ;; Defined at:
  3770 ;;		line 1073 in file "st7032.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  pcData          1    wreg     PTR unsigned char 
  3773 ;;		 -> lcd_vDarwLine@u8Msg(16), 
  3774 ;;  u8Len           1   22[BANK0 ] unsigned char 
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;  pcData          1   29[BANK0 ] PTR unsigned char 
  3777 ;;		 -> lcd_vDarwLine@u8Msg(16), 
  3778 ;;  pu8WkData       1   30[BANK0 ] PTR unsigned char 
  3779 ;;		 -> lcd_vDarwLine@u8Msg(16), 
  3780 ;;  u8Idx           1   28[BANK0 ] unsigned char 
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      void 
  3783 ;; Registers used:
  3784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3790 ;;      Params:         0       1       0       0       0       0
  3791 ;;      Locals:         0       3       0       0       0       0
  3792 ;;      Temps:          0       5       0       0       0       0
  3793 ;;      Totals:         0       9       0       0       0       0
  3794 ;;Total ram usage:        9 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    8
  3797 ;; This function calls:
  3798 ;;		_I2C_u8MstStartSSP2
  3799 ;;		_I2C_u8MstTxSSP2
  3800 ;;		_I2C_vMstStopSSP2
  3801 ;;		___awmod
  3802 ;; This function is called by:
  3803 ;;		_lcd_vDarwLine
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           
  3808                           ;psect for function _ST7032_vWriteDataSSP2
  3809  06CA                     _ST7032_vWriteDataSSP2:	
  3810                           
  3811                           ;incstack = 0
  3812                           ; Regs used in _ST7032_vWriteDataSSP2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3813                           ;ST7032_vWriteDataSSP2@pcData stored from wreg
  3814  06CA  0020               	movlb	0	; select bank0
  3815  06CB  00BD               	movwf	ST7032_vWriteDataSSP2@pcData
  3816                           
  3817                           ;st7032.c: 1075:     I2C_u8MstStartSSP2((0x3E), (0));
  3818  06CC  01AF               	clrf	I2C_u8MstStartSSP2@bReadFlg
  3819  06CD  303E               	movlw	62
  3820  06CE  318C  24D6  3186   	fcall	_I2C_u8MstStartSSP2
  3821                           
  3822                           ;st7032.c: 1077:     I2C_u8MstTxSSP2((0x40));
  3823  06D1  3040               	movlw	64
  3824  06D2  318C  2433  3186   	fcall	_I2C_u8MstTxSSP2
  3825                           
  3826                           ;st7032.c: 1079:     unsigned char* pu8WkData = pcData;
  3827  06D5  0020               	movlb	0	; select bank0
  3828  06D6  083D               	movf	ST7032_vWriteDataSSP2@pcData,w
  3829  06D7  00B7               	movwf	??_ST7032_vWriteDataSSP2
  3830  06D8  0837               	movf	??_ST7032_vWriteDataSSP2,w
  3831  06D9  00BE               	movwf	ST7032_vWriteDataSSP2@pu8WkData
  3832                           
  3833                           ;st7032.c: 1080:     unsigned char u8Idx;;st7032.c: 1081:     for (u8Idx = 0; u8Idx < u8
      +                          Len; u8Idx++) {
  3834  06DA  01BC               	clrf	ST7032_vWriteDataSSP2@u8Idx
  3835  06DB                     l5072:	
  3836  06DB  0836               	movf	ST7032_vWriteDataSSP2@u8Len,w
  3837  06DC  023C               	subwf	ST7032_vWriteDataSSP2@u8Idx,w
  3838  06DD  1803               	btfsc	3,0
  3839  06DE  2EF4               	goto	l5074
  3840                           
  3841                           ;st7032.c: 1082:         I2C_u8MstTxSSP2(*pu8WkData);
  3842  06DF  083E               	movf	ST7032_vWriteDataSSP2@pu8WkData,w
  3843  06E0  0086               	movwf	6
  3844  06E1  0187               	clrf	7
  3845  06E2  0801               	movf	1,w
  3846  06E3  318C  2433  3186   	fcall	_I2C_u8MstTxSSP2
  3847                           
  3848                           ;st7032.c: 1083:         _delay((unsigned long)(((26))*(16000000/4000000.0)));
  3849  06E6  3022               	movlw	34
  3850  06E7                     u4097:	
  3851  06E7  0B89               	decfsz	9,f
  3852  06E8  2EE7               	goto	u4097
  3853  06E9  3200               	nop2
  3854                           
  3855                           ;st7032.c: 1084:         pu8WkData++;
  3856  06EA  3001               	movlw	1
  3857  06EB  0020               	movlb	0	; select bank0
  3858  06EC  00B7               	movwf	??_ST7032_vWriteDataSSP2
  3859  06ED  0837               	movf	??_ST7032_vWriteDataSSP2,w
  3860  06EE  07BE               	addwf	ST7032_vWriteDataSSP2@pu8WkData,f
  3861                           
  3862                           ;st7032.c: 1085:     }
  3863  06EF  3001               	movlw	1
  3864  06F0  00B7               	movwf	??_ST7032_vWriteDataSSP2
  3865  06F1  0837               	movf	??_ST7032_vWriteDataSSP2,w
  3866  06F2  07BC               	addwf	ST7032_vWriteDataSSP2@u8Idx,f
  3867  06F3  2EDB               	goto	l5072
  3868  06F4                     l5074:	
  3869                           
  3870                           ;st7032.c: 1087:     I2C_vMstStopSSP2();
  3871  06F4  318C  240D  3186   	fcall	_I2C_vMstStopSSP2
  3872                           
  3873                           ;st7032.c: 1089:     stStateSSP2.u8CursorPos =
  3874  06F7  3050               	movlw	80
  3875  06F8  0020               	movlb	0	; select bank0
  3876  06F9  00AF               	movwf	___awmod@divisor
  3877  06FA  3000               	movlw	0
  3878  06FB  00B0               	movwf	___awmod@divisor+1
  3879  06FC  083D               	movf	ST7032_vWriteDataSSP2@pcData,w
  3880  06FD  00B7               	movwf	??_ST7032_vWriteDataSSP2
  3881  06FE  3000               	movlw	0
  3882  06FF  00B8               	movwf	??_ST7032_vWriteDataSSP2+1
  3883  0700  0851               	movf	_stStateSSP2,w
  3884  0701  073E               	addwf	ST7032_vWriteDataSSP2@pu8WkData,w
  3885  0702  00B9               	movwf	??_ST7032_vWriteDataSSP2+2
  3886  0703  01BA               	clrf	??_ST7032_vWriteDataSSP2+3
  3887  0704  0DBA               	rlf	??_ST7032_vWriteDataSSP2+3,f
  3888  0705  0837               	movf	??_ST7032_vWriteDataSSP2,w
  3889  0706  0239               	subwf	??_ST7032_vWriteDataSSP2+2,w
  3890  0707  00B1               	movwf	___awmod@dividend
  3891  0708  0838               	movf	??_ST7032_vWriteDataSSP2+1,w
  3892  0709  3B3A               	subwfb	??_ST7032_vWriteDataSSP2+3,w
  3893  070A  00B2               	movwf	___awmod@dividend+1
  3894  070B  3187  2759         	fcall	___awmod
  3895  070D  0020               	movlb	0	; select bank0
  3896  070E  082F               	movf	?___awmod,w
  3897  070F  00BB               	movwf	??_ST7032_vWriteDataSSP2+4
  3898  0710  083B               	movf	??_ST7032_vWriteDataSSP2+4,w
  3899  0711  00D1               	movwf	_stStateSSP2
  3900  0712  0008               	return
  3901  0713                     __end_of_ST7032_vWriteDataSSP2:	
  3902                           
  3903                           	psect	text16
  3904  0759                     __ptext16:	
  3905 ;; *************** function ___awmod *****************
  3906 ;; Defined at:
  3907 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;  divisor         2   15[BANK0 ] int 
  3910 ;;  dividend        2   17[BANK0 ] int 
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;  sign            1   21[BANK0 ] unsigned char 
  3913 ;;  counter         1   20[BANK0 ] unsigned char 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  2   15[BANK0 ] int 
  3916 ;; Registers used:
  3917 ;;		wreg, status,2, status,0
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3923 ;;      Params:         0       4       0       0       0       0
  3924 ;;      Locals:         0       2       0       0       0       0
  3925 ;;      Temps:          0       1       0       0       0       0
  3926 ;;      Totals:         0       7       0       0       0       0
  3927 ;;Total ram usage:        7 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    6
  3930 ;; This function calls:
  3931 ;;		Nothing
  3932 ;; This function is called by:
  3933 ;;		_ST7032_vWriteDataSSP2
  3934 ;;		_bSetCursorSSP2
  3935 ;;		_ST7032_u8GetCursorColNoSSP1
  3936 ;;		_ST7032_u8GetCursorColNoSSP2
  3937 ;;		_ST7032_vWriteCharSSP1
  3938 ;;		_ST7032_vWriteCharSSP2
  3939 ;;		_ST7032_vWriteStringSSP1
  3940 ;;		_ST7032_vWriteStringSSP2
  3941 ;;		_ST7032_vWriteDataSSP1
  3942 ;;		_bSetCursorSSP1
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           
  3947                           ;psect for function ___awmod
  3948  0759                     ___awmod:	
  3949                           
  3950                           ;incstack = 0
  3951                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3952  0759  0020               	movlb	0	; select bank0
  3953  075A  01B5               	clrf	___awmod@sign
  3954  075B  1FB2               	btfss	___awmod@dividend+1,7
  3955  075C  2F64               	goto	l4908
  3956  075D  09B1               	comf	___awmod@dividend,f
  3957  075E  09B2               	comf	___awmod@dividend+1,f
  3958  075F  0AB1               	incf	___awmod@dividend,f
  3959  0760  1903               	skipnz
  3960  0761  0AB2               	incf	___awmod@dividend+1,f
  3961  0762  01B5               	clrf	___awmod@sign
  3962  0763  0AB5               	incf	___awmod@sign,f
  3963  0764                     l4908:	
  3964  0764  1FB0               	btfss	___awmod@divisor+1,7
  3965  0765  2F6B               	goto	l4912
  3966  0766  09AF               	comf	___awmod@divisor,f
  3967  0767  09B0               	comf	___awmod@divisor+1,f
  3968  0768  0AAF               	incf	___awmod@divisor,f
  3969  0769  1903               	skipnz
  3970  076A  0AB0               	incf	___awmod@divisor+1,f
  3971  076B                     l4912:	
  3972  076B  082F               	movf	___awmod@divisor,w
  3973  076C  0430               	iorwf	___awmod@divisor+1,w
  3974  076D  1903               	btfsc	3,2
  3975  076E  2F92               	goto	l4930
  3976  076F  01B4               	clrf	___awmod@counter
  3977  0770  0AB4               	incf	___awmod@counter,f
  3978  0771                     l4920:	
  3979  0771  1BB0               	btfsc	___awmod@divisor+1,7
  3980  0772  2F7D               	goto	l4922
  3981  0773  3001               	movlw	1
  3982  0774                     u3275:	
  3983  0774  35AF               	lslf	___awmod@divisor,f
  3984  0775  0DB0               	rlf	___awmod@divisor+1,f
  3985  0776  0B89               	decfsz	9,f
  3986  0777  2F74               	goto	u3275
  3987  0778  3001               	movlw	1
  3988  0779  00B3               	movwf	??___awmod
  3989  077A  0833               	movf	??___awmod,w
  3990  077B  07B4               	addwf	___awmod@counter,f
  3991  077C  2F71               	goto	l4920
  3992  077D                     l4922:	
  3993  077D  0830               	movf	___awmod@divisor+1,w
  3994  077E  0232               	subwf	___awmod@dividend+1,w
  3995  077F  1D03               	skipz
  3996  0780  2F83               	goto	u3295
  3997  0781  082F               	movf	___awmod@divisor,w
  3998  0782  0231               	subwf	___awmod@dividend,w
  3999  0783                     u3295:	
  4000  0783  1C03               	skipc
  4001  0784  2F89               	goto	l4926
  4002  0785  082F               	movf	___awmod@divisor,w
  4003  0786  02B1               	subwf	___awmod@dividend,f
  4004  0787  0830               	movf	___awmod@divisor+1,w
  4005  0788  3BB2               	subwfb	___awmod@dividend+1,f
  4006  0789                     l4926:	
  4007  0789  3001               	movlw	1
  4008  078A                     u3305:	
  4009  078A  36B0               	lsrf	___awmod@divisor+1,f
  4010  078B  0CAF               	rrf	___awmod@divisor,f
  4011  078C  0B89               	decfsz	9,f
  4012  078D  2F8A               	goto	u3305
  4013  078E  3001               	movlw	1
  4014  078F  02B4               	subwf	___awmod@counter,f
  4015  0790  1D03               	btfss	3,2
  4016  0791  2F7D               	goto	l4922
  4017  0792                     l4930:	
  4018  0792  0835               	movf	___awmod@sign,w
  4019  0793  1903               	btfsc	3,2
  4020  0794  2F9A               	goto	l4934
  4021  0795  09B1               	comf	___awmod@dividend,f
  4022  0796  09B2               	comf	___awmod@dividend+1,f
  4023  0797  0AB1               	incf	___awmod@dividend,f
  4024  0798  1903               	skipnz
  4025  0799  0AB2               	incf	___awmod@dividend+1,f
  4026  079A                     l4934:	
  4027  079A  0832               	movf	___awmod@dividend+1,w
  4028  079B  00B0               	movwf	?___awmod+1
  4029  079C  0831               	movf	___awmod@dividend,w
  4030  079D  00AF               	movwf	?___awmod
  4031  079E  0008               	return
  4032  079F                     __end_of___awmod:	
  4033                           
  4034                           	psect	text17
  4035  0CA4                     __ptext17:	
  4036 ;; *************** function _lcd_vCursorSetting *****************
  4037 ;; Defined at:
  4038 ;;		line 463 in file "InterfaceMain.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;  u8CursorType    1    wreg     unsigned char 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  u8CursorType    1   26[BANK0 ] unsigned char 
  4043 ;;  bCursorBlink    1   25[BANK0 ] unsigned char 
  4044 ;;  bCursorDisp     1   24[BANK0 ] unsigned char 
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      void 
  4047 ;; Registers used:
  4048 ;;		wreg, status,2, status,0, pclath, cstack
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4054 ;;      Params:         0       0       0       0       0       0
  4055 ;;      Locals:         0       3       0       0       0       0
  4056 ;;      Temps:          0       2       0       0       0       0
  4057 ;;      Totals:         0       5       0       0       0       0
  4058 ;;Total ram usage:        5 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; Hardware stack levels required when called:   10
  4061 ;; This function calls:
  4062 ;;		_ST7032_vDispSettingSSP2
  4063 ;; This function is called by:
  4064 ;;		_main
  4065 ;; This function uses a non-reentrant model
  4066 ;;
  4067                           
  4068                           
  4069                           ;psect for function _lcd_vCursorSetting
  4070  0CA4                     _lcd_vCursorSetting:	
  4071                           
  4072                           ;incstack = 0
  4073                           ; Regs used in _lcd_vCursorSetting: [wreg+status,2+status,0+pclath+cstack]
  4074                           ;lcd_vCursorSetting@u8CursorType stored from wreg
  4075  0CA4  0020               	movlb	0	; select bank0
  4076  0CA5  00BA               	movwf	lcd_vCursorSetting@u8CursorType
  4077                           
  4078                           ;InterfaceMain.c: 465:     unsigned char bCursorDisp = u8CursorType & 0x01;
  4079  0CA6  083A               	movf	lcd_vCursorSetting@u8CursorType,w
  4080  0CA7  3901               	andlw	1
  4081  0CA8  00B6               	movwf	??_lcd_vCursorSetting
  4082  0CA9  0836               	movf	??_lcd_vCursorSetting,w
  4083  0CAA  00B8               	movwf	lcd_vCursorSetting@bCursorDisp
  4084                           
  4085                           ;InterfaceMain.c: 466:     unsigned char bCursorBlink = (u8CursorType >> 1) & 0x01;
  4086  0CAB  363A               	lsrf	lcd_vCursorSetting@u8CursorType,w
  4087  0CAC  3901               	andlw	1
  4088  0CAD  00B6               	movwf	??_lcd_vCursorSetting
  4089  0CAE  0836               	movf	??_lcd_vCursorSetting,w
  4090  0CAF  00B9               	movwf	lcd_vCursorSetting@bCursorBlink
  4091                           
  4092                           ;InterfaceMain.c: 468:     ST7032_vDispSettingSSP2((1), bCursorDisp, bCursorBlink);
  4093  0CB0  0838               	movf	lcd_vCursorSetting@bCursorDisp,w
  4094  0CB1  00B6               	movwf	??_lcd_vCursorSetting
  4095  0CB2  0836               	movf	??_lcd_vCursorSetting,w
  4096  0CB3  00B1               	movwf	ST7032_vDispSettingSSP2@bCursor
  4097  0CB4  0839               	movf	lcd_vCursorSetting@bCursorBlink,w
  4098  0CB5  00B7               	movwf	??_lcd_vCursorSetting+1
  4099  0CB6  0837               	movf	??_lcd_vCursorSetting+1,w
  4100  0CB7  00B2               	movwf	ST7032_vDispSettingSSP2@bBlink
  4101  0CB8  3001               	movlw	1
  4102  0CB9  318D  2512         	fcall	_ST7032_vDispSettingSSP2
  4103  0CBB  0008               	return
  4104  0CBC                     __end_of_lcd_vCursorSetting:	
  4105                           
  4106                           	psect	text18
  4107  0D12                     __ptext18:	
  4108 ;; *************** function _ST7032_vDispSettingSSP2 *****************
  4109 ;; Defined at:
  4110 ;;		line 554 in file "st7032.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;  bDisp           1    wreg     unsigned char 
  4113 ;;  bCursor         1   17[BANK0 ] unsigned char 
  4114 ;;  bBlink          1   18[BANK0 ] unsigned char 
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;  bDisp           1   21[BANK0 ] unsigned char 
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  1    wreg      void 
  4119 ;; Registers used:
  4120 ;;		wreg, status,2, status,0, pclath, cstack
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4126 ;;      Params:         0       2       0       0       0       0
  4127 ;;      Locals:         0       1       0       0       0       0
  4128 ;;      Temps:          0       2       0       0       0       0
  4129 ;;      Totals:         0       5       0       0       0       0
  4130 ;;Total ram usage:        5 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    9
  4133 ;; This function calls:
  4134 ;;		_I2C_u8MstStartSSP2
  4135 ;;		_vExecCmdEndSSP2
  4136 ;; This function is called by:
  4137 ;;		_lcd_vCursorSetting
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           
  4142                           ;psect for function _ST7032_vDispSettingSSP2
  4143  0D12                     _ST7032_vDispSettingSSP2:	
  4144                           
  4145                           ;incstack = 0
  4146                           ; Regs used in _ST7032_vDispSettingSSP2: [wreg+status,2+status,0+pclath+cstack]
  4147                           ;ST7032_vDispSettingSSP2@bDisp stored from wreg
  4148  0D12  0020               	movlb	0	; select bank0
  4149  0D13  00B5               	movwf	ST7032_vDispSettingSSP2@bDisp
  4150                           
  4151                           ;st7032.c: 556:     I2C_u8MstStartSSP2((0x3E), (0));
  4152  0D14  01AF               	clrf	I2C_u8MstStartSSP2@bReadFlg
  4153  0D15  303E               	movlw	62
  4154  0D16  318C  24D6  318D   	fcall	_I2C_u8MstStartSSP2
  4155                           
  4156                           ;st7032.c: 558:     vExecCmdEndSSP2((0b00001000) | (bDisp << 2) | (bCursor << 1) | bBlin
      +                          k);
  4157  0D19  0020               	movlb	0	; select bank0
  4158  0D1A  0831               	movf	ST7032_vDispSettingSSP2@bCursor,w
  4159  0D1B  00B3               	movwf	??_ST7032_vDispSettingSSP2
  4160  0D1C  3001               	movlw	1
  4161  0D1D                     u3415:	
  4162  0D1D  35B3               	lslf	??_ST7032_vDispSettingSSP2,f
  4163  0D1E  0B89               	decfsz	9,f
  4164  0D1F  2D1D               	goto	u3415
  4165  0D20  0835               	movf	ST7032_vDispSettingSSP2@bDisp,w
  4166  0D21  00B4               	movwf	??_ST7032_vDispSettingSSP2+1
  4167  0D22  3001               	movlw	1
  4168  0D23                     u3425:	
  4169  0D23  35B4               	lslf	??_ST7032_vDispSettingSSP2+1,f
  4170  0D24  3EFF               	addlw	-1
  4171  0D25  1D03               	skipz
  4172  0D26  2D23               	goto	u3425
  4173  0D27  3534               	lslf	??_ST7032_vDispSettingSSP2+1,w
  4174  0D28  0433               	iorwf	??_ST7032_vDispSettingSSP2,w
  4175  0D29  0432               	iorwf	ST7032_vDispSettingSSP2@bBlink,w
  4176  0D2A  3808               	iorlw	8
  4177  0D2B  318C  246F  318D   	fcall	_vExecCmdEndSSP2
  4178                           
  4179                           ;st7032.c: 559:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  4180  0D2E  3022               	movlw	34
  4181  0D2F                     u4107:	
  4182  0D2F  0B89               	decfsz	9,f
  4183  0D30  2D2F               	goto	u4107
  4184  0D31  3200               	nop2
  4185  0D32  0008               	return
  4186  0D33                     __end_of_ST7032_vDispSettingSSP2:	
  4187                           
  4188                           	psect	text19
  4189  0CBC                     __ptext19:	
  4190 ;; *************** function _evt_u8GetEventMap *****************
  4191 ;; Defined at:
  4192 ;;		line 388 in file "InterfaceMain.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;		None
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;  u8EvtMap        1   17[BANK0 ] unsigned char 
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  1    wreg      unsigned char 
  4199 ;; Registers used:
  4200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4206 ;;      Params:         0       0       0       0       0       0
  4207 ;;      Locals:         0       1       0       0       0       0
  4208 ;;      Temps:          0       1       0       0       0       0
  4209 ;;      Totals:         0       2       0       0       0       0
  4210 ;;Total ram usage:        2 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; Hardware stack levels required when called:    7
  4213 ;; This function calls:
  4214 ;;		_criticalSec_vBegin
  4215 ;;		_criticalSec_vEnd
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           
  4222                           ;psect for function _evt_u8GetEventMap
  4223  0CBC                     _evt_u8GetEventMap:	
  4224                           
  4225                           ;InterfaceMain.c: 390:     criticalSec_vBegin();
  4226                           
  4227                           ;incstack = 0
  4228                           ; Regs used in _evt_u8GetEventMap: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4229  0CBC  318C  2414  318C   	fcall	_criticalSec_vBegin
  4230                           
  4231                           ;InterfaceMain.c: 392:     unsigned char u8EvtMap = sAppStatus.u8EventMap;
  4232  0CBF  0021               	movlb	1	; select bank1
  4233  0CC0  0850               	movf	(_sAppStatus^(0+128)+3),w
  4234  0CC1  0020               	movlb	0	; select bank0
  4235  0CC2  00B0               	movwf	??_evt_u8GetEventMap
  4236  0CC3  0830               	movf	??_evt_u8GetEventMap,w
  4237  0CC4  00B1               	movwf	evt_u8GetEventMap@u8EvtMap
  4238                           
  4239                           ;InterfaceMain.c: 393:     if (sAppStatus.u8EventMap == EVT_NONE) {
  4240  0CC5  0021               	movlb	1	; select bank1
  4241  0CC6  0850               	movf	(_sAppStatus^(0+128)+3),w
  4242  0CC7  1D03               	btfss	3,2
  4243  0CC8  2CD0               	goto	l5140
  4244                           
  4245                           ;InterfaceMain.c: 394:         sMemoryMap.eStatus = MEM_STS_NORMAL;
  4246  0CC9  30C9               	movlw	201
  4247  0CCA  0086               	movwf	6
  4248  0CCB  3020               	movlw	32
  4249  0CCC  0087               	movwf	7
  4250  0CCD  3000               	movlw	0
  4251  0CCE  3FC0               	movwi [0]fsr1
  4252                           
  4253                           ;InterfaceMain.c: 395:     } else {
  4254  0CCF  2CD1               	goto	l5142
  4255  0CD0                     l5140:	
  4256                           
  4257                           ;InterfaceMain.c: 396:         sAppStatus.u8EventMap = EVT_NONE;
  4258  0CD0  01D0               	clrf	(_sAppStatus^(0+128)+3)
  4259  0CD1                     l5142:	
  4260                           
  4261                           ;InterfaceMain.c: 399:     criticalSec_vEnd();
  4262  0CD1  318C  242B         	fcall	_criticalSec_vEnd
  4263                           
  4264                           ;InterfaceMain.c: 401:     return u8EvtMap;
  4265  0CD3  0020               	movlb	0	; select bank0
  4266  0CD4  0831               	movf	evt_u8GetEventMap@u8EvtMap,w
  4267  0CD5  0008               	return
  4268  0CD6                     __end_of_evt_u8GetEventMap:	
  4269                           
  4270                           	psect	text20
  4271  0C2B                     __ptext20:	
  4272 ;; *************** function _criticalSec_vEnd *****************
  4273 ;; Defined at:
  4274 ;;		line 83 in file "libcom.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;		None
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;		None
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  1    wreg      void 
  4281 ;; Registers used:
  4282 ;;		wreg, status,2, status,0
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4288 ;;      Params:         0       0       0       0       0       0
  4289 ;;      Locals:         0       0       0       0       0       0
  4290 ;;      Temps:          0       0       0       0       0       0
  4291 ;;      Totals:         0       0       0       0       0       0
  4292 ;;Total ram usage:        0 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    6
  4295 ;; This function calls:
  4296 ;;		Nothing
  4297 ;; This function is called by:
  4298 ;;		_evt_u8GetEventMap
  4299 ;;		_lcd_vPowerSetting
  4300 ;;		_lcd_vDrawCursor
  4301 ;;		_lcd_vDarwLine
  4302 ;;		_KEYPAD_vClearBuffer
  4303 ;;		_KEYPAD_u8ReadBuffer
  4304 ;;		_KEYPAD_u8ReadFinal
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           
  4309                           ;psect for function _criticalSec_vEnd
  4310  0C2B                     _criticalSec_vEnd:	
  4311                           
  4312                           ;libcom.c: 84:     u8Depth--;
  4313                           
  4314                           ;incstack = 0
  4315                           ; Regs used in _criticalSec_vEnd: [wreg+status,2+status,0]
  4316  0C2B  3001               	movlw	1
  4317  0C2C  0020               	movlb	0	; select bank0
  4318  0C2D  02D5               	subwf	_u8Depth,f	;volatile
  4319                           
  4320                           ;libcom.c: 85:     if (u8Depth == 0) {
  4321  0C2E  0855               	movf	_u8Depth,w	;volatile
  4322  0C2F  1D03               	btfss	3,2
  4323  0C30  0008               	return
  4324                           
  4325                           ;libcom.c: 86:         GIE = 1;
  4326  0C31  178B               	bsf	11,7	;volatile
  4327  0C32  0008               	return
  4328  0C33                     __end_of_criticalSec_vEnd:	
  4329                           
  4330                           	psect	text21
  4331  0C14                     __ptext21:	
  4332 ;; *************** function _criticalSec_vBegin *****************
  4333 ;; Defined at:
  4334 ;;		line 65 in file "libcom.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;		None
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;		None
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      void 
  4341 ;; Registers used:
  4342 ;;		wreg, status,2, status,0
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4348 ;;      Params:         0       0       0       0       0       0
  4349 ;;      Locals:         0       0       0       0       0       0
  4350 ;;      Temps:          0       1       0       0       0       0
  4351 ;;      Totals:         0       1       0       0       0       0
  4352 ;;Total ram usage:        1 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    6
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_evt_u8GetEventMap
  4359 ;;		_lcd_vPowerSetting
  4360 ;;		_lcd_vDrawCursor
  4361 ;;		_lcd_vDarwLine
  4362 ;;		_KEYPAD_vClearBuffer
  4363 ;;		_KEYPAD_u8ReadBuffer
  4364 ;;		_KEYPAD_u8ReadFinal
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           
  4369                           ;psect for function _criticalSec_vBegin
  4370  0C14                     _criticalSec_vBegin:	
  4371                           
  4372                           ;libcom.c: 66:     GIE = 0;
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in _criticalSec_vBegin: [wreg+status,2+status,0]
  4376  0C14  138B               	bcf	11,7	;volatile
  4377                           
  4378                           ;libcom.c: 67:     u8Depth++;
  4379  0C15  3001               	movlw	1
  4380  0C16  0020               	movlb	0	; select bank0
  4381  0C17  00AF               	movwf	??_criticalSec_vBegin
  4382  0C18  082F               	movf	??_criticalSec_vBegin,w
  4383  0C19  07D5               	addwf	_u8Depth,f	;volatile
  4384  0C1A  0008               	return
  4385  0C1B                     __end_of_criticalSec_vBegin:	
  4386                           
  4387                           	psect	text22
  4388  079F                     __ptext22:	
  4389 ;; *************** function _ST7032_vSetContrastSSP2 *****************
  4390 ;; Defined at:
  4391 ;;		line 273 in file "st7032.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  u8Contrast      1    wreg     unsigned char 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  u8Contrast      1   18[BANK0 ] unsigned char 
  4396 ;;  u8Val           1   19[BANK0 ] unsigned char 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  1    wreg      void 
  4399 ;; Registers used:
  4400 ;;		wreg, status,2, status,0, pclath, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4406 ;;      Params:         0       0       0       0       0       0
  4407 ;;      Locals:         0       2       0       0       0       0
  4408 ;;      Temps:          0       1       0       0       0       0
  4409 ;;      Totals:         0       3       0       0       0       0
  4410 ;;Total ram usage:        3 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    9
  4413 ;; This function calls:
  4414 ;;		_I2C_u8MstStartSSP2
  4415 ;;		_vExecCmdEndSSP2
  4416 ;;		_vExecCmdSSP2
  4417 ;; This function is called by:
  4418 ;;		_main
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           
  4423                           ;psect for function _ST7032_vSetContrastSSP2
  4424  079F                     _ST7032_vSetContrastSSP2:	
  4425                           
  4426                           ;incstack = 0
  4427                           ; Regs used in _ST7032_vSetContrastSSP2: [wreg+status,2+status,0+pclath+cstack]
  4428                           ;ST7032_vSetContrastSSP2@u8Contrast stored from wreg
  4429  079F  0020               	movlb	0	; select bank0
  4430  07A0  00B2               	movwf	ST7032_vSetContrastSSP2@u8Contrast
  4431                           
  4432                           ;st7032.c: 275:     unsigned char u8Val = u8Contrast & 0x3F;
  4433  07A1  0832               	movf	ST7032_vSetContrastSSP2@u8Contrast,w
  4434  07A2  393F               	andlw	63
  4435  07A3  00B1               	movwf	??_ST7032_vSetContrastSSP2
  4436  07A4  0831               	movf	??_ST7032_vSetContrastSSP2,w
  4437  07A5  00B3               	movwf	ST7032_vSetContrastSSP2@u8Val
  4438                           
  4439                           ;st7032.c: 276:     if ((stStateSSP2.u8Settings & 0x3F) == u8Val) {
  4440  07A6  303F               	movlw	63
  4441  07A7  0552               	andwf	_stStateSSP2+1,w
  4442  07A8  00B1               	movwf	??_ST7032_vSetContrastSSP2
  4443  07A9  0831               	movf	??_ST7032_vSetContrastSSP2,w
  4444  07AA  0633               	xorwf	ST7032_vSetContrastSSP2@u8Val,w
  4445  07AB  1903               	btfsc	3,2
  4446  07AC  0008               	return
  4447                           
  4448                           ;st7032.c: 280:     stStateSSP2.u8Settings = (stStateSSP2.u8Settings & 0xC0) | u8Val;
  4449  07AD  0852               	movf	_stStateSSP2+1,w
  4450  07AE  39C0               	andlw	192
  4451  07AF  0433               	iorwf	ST7032_vSetContrastSSP2@u8Val,w
  4452  07B0  00B1               	movwf	??_ST7032_vSetContrastSSP2
  4453  07B1  0831               	movf	??_ST7032_vSetContrastSSP2,w
  4454  07B2  00D2               	movwf	_stStateSSP2+1
  4455                           
  4456                           ;st7032.c: 282:     I2C_u8MstStartSSP2((0x3E), (0));
  4457  07B3  01AF               	clrf	I2C_u8MstStartSSP2@bReadFlg
  4458  07B4  303E               	movlw	62
  4459  07B5  318C  24D6  3187   	fcall	_I2C_u8MstStartSSP2
  4460                           
  4461                           ;st7032.c: 284:     vExecCmdSSP2((0b00111001));
  4462  07B8  3039               	movlw	57
  4463  07B9  318C  243D  3187   	fcall	_vExecCmdSSP2
  4464                           
  4465                           ;st7032.c: 285:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  4466  07BC  3022               	movlw	34
  4467  07BD                     u4117:	
  4468  07BD  0B89               	decfsz	9,f
  4469  07BE  2FBD               	goto	u4117
  4470  07BF  3200               	nop2
  4471                           
  4472                           ;st7032.c: 287:     vExecCmdSSP2((0b01110000) | (stStateSSP2.u8Settings & 0x0F));
  4473  07C0  0020               	movlb	0	; select bank0
  4474  07C1  0852               	movf	_stStateSSP2+1,w
  4475  07C2  390F               	andlw	15
  4476  07C3  3870               	iorlw	112
  4477  07C4  318C  243D  3187   	fcall	_vExecCmdSSP2
  4478                           
  4479                           ;st7032.c: 288:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  4480  07C7  3022               	movlw	34
  4481  07C8                     u4127:	
  4482  07C8  0B89               	decfsz	9,f
  4483  07C9  2FC8               	goto	u4127
  4484  07CA  3200               	nop2
  4485                           
  4486                           ;st7032.c: 290:     vExecCmdSSP2((0b01011000) | (stStateSSP2.u8Settings >> 4));
  4487  07CB  0020               	movlb	0	; select bank0
  4488  07CC  0852               	movf	_stStateSSP2+1,w
  4489  07CD  00B1               	movwf	??_ST7032_vSetContrastSSP2
  4490  07CE  3004               	movlw	4
  4491  07CF                     u3555:	
  4492  07CF  36B1               	lsrf	??_ST7032_vSetContrastSSP2,f
  4493  07D0  0B89               	decfsz	9,f
  4494  07D1  2FCF               	goto	u3555
  4495  07D2  0831               	movf	??_ST7032_vSetContrastSSP2,w
  4496  07D3  3858               	iorlw	88
  4497  07D4  318C  243D  3187   	fcall	_vExecCmdSSP2
  4498                           
  4499                           ;st7032.c: 291:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  4500  07D7  3022               	movlw	34
  4501  07D8                     u4137:	
  4502  07D8  0B89               	decfsz	9,f
  4503  07D9  2FD8               	goto	u4137
  4504  07DA  3200               	nop2
  4505                           
  4506                           ;st7032.c: 293:     vExecCmdEndSSP2((0b00111000));
  4507  07DB  3038               	movlw	56
  4508  07DC  318C  246F  3187   	fcall	_vExecCmdEndSSP2
  4509                           
  4510                           ;st7032.c: 294:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  4511  07DF  3022               	movlw	34
  4512  07E0                     u4147:	
  4513  07E0  0B89               	decfsz	9,f
  4514  07E1  2FE0               	goto	u4147
  4515  07E2  3200               	nop2
  4516  07E3  0008               	return
  4517  07E4                     __end_of_ST7032_vSetContrastSSP2:	
  4518                           
  4519                           	psect	text23
  4520  0C3D                     __ptext23:	
  4521 ;; *************** function _vExecCmdSSP2 *****************
  4522 ;; Defined at:
  4523 ;;		line 1216 in file "st7032.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;  u8Cmd           1    wreg     unsigned char 
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;  u8Cmd           1   16[BANK0 ] unsigned char 
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  1    wreg      void 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2, status,0, pclath, cstack
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4537 ;;      Params:         0       0       0       0       0       0
  4538 ;;      Locals:         0       1       0       0       0       0
  4539 ;;      Temps:          0       0       0       0       0       0
  4540 ;;      Totals:         0       1       0       0       0       0
  4541 ;;Total ram usage:        1 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    8
  4544 ;; This function calls:
  4545 ;;		_I2C_u8MstTxSSP2
  4546 ;; This function is called by:
  4547 ;;		_ST7032_vInitSSP2
  4548 ;;		_ST7032_vSetContrastSSP2
  4549 ;;		_ST7032_vWriteCGRAMSSP2
  4550 ;;		_ST7032_vWriteIconSSP2
  4551 ;;		_ST7032_vClearIconSSP2
  4552 ;;		_ST7032_vDispIconSSP2
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           
  4557                           ;psect for function _vExecCmdSSP2
  4558  0C3D                     _vExecCmdSSP2:	
  4559                           
  4560                           ;incstack = 0
  4561                           ; Regs used in _vExecCmdSSP2: [wreg+status,2+status,0+pclath+cstack]
  4562                           ;vExecCmdSSP2@u8Cmd stored from wreg
  4563  0C3D  0020               	movlb	0	; select bank0
  4564  0C3E  00B0               	movwf	vExecCmdSSP2@u8Cmd
  4565                           
  4566                           ;st7032.c: 1218:     I2C_u8MstTxSSP2((0x00) | 0x80);
  4567  0C3F  3080               	movlw	128
  4568  0C40  318C  2433  318C   	fcall	_I2C_u8MstTxSSP2
  4569                           
  4570                           ;st7032.c: 1220:     I2C_u8MstTxSSP2(u8Cmd);
  4571  0C43  0020               	movlb	0	; select bank0
  4572  0C44  0830               	movf	vExecCmdSSP2@u8Cmd,w
  4573  0C45  318C  2433         	fcall	_I2C_u8MstTxSSP2
  4574  0C47  0008               	return
  4575  0C48                     __end_of_vExecCmdSSP2:	
  4576                           
  4577                           	psect	text24
  4578  0C6F                     __ptext24:	
  4579 ;; *************** function _vExecCmdEndSSP2 *****************
  4580 ;; Defined at:
  4581 ;;		line 1264 in file "st7032.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;  u8Cmd           1    wreg     unsigned char 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  u8Cmd           1   16[BANK0 ] unsigned char 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, status,2, status,0, pclath, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4595 ;;      Params:         0       0       0       0       0       0
  4596 ;;      Locals:         0       1       0       0       0       0
  4597 ;;      Temps:          0       0       0       0       0       0
  4598 ;;      Totals:         0       1       0       0       0       0
  4599 ;;Total ram usage:        1 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    8
  4602 ;; This function calls:
  4603 ;;		_I2C_u8MstTxSSP2
  4604 ;;		_I2C_vMstStopSSP2
  4605 ;; This function is called by:
  4606 ;;		_ST7032_vInitSSP2
  4607 ;;		_ST7032_vSetContrastSSP2
  4608 ;;		_ST7032_vDispSettingSSP2
  4609 ;;		_bSetCursorSSP2
  4610 ;;		_ST7032_vClearDispSSP2
  4611 ;;		_ST7032_vClearIconSSP2
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           
  4616                           ;psect for function _vExecCmdEndSSP2
  4617  0C6F                     _vExecCmdEndSSP2:	
  4618                           
  4619                           ;incstack = 0
  4620                           ; Regs used in _vExecCmdEndSSP2: [wreg+status,2+status,0+pclath+cstack]
  4621                           ;vExecCmdEndSSP2@u8Cmd stored from wreg
  4622  0C6F  0020               	movlb	0	; select bank0
  4623  0C70  00B0               	movwf	vExecCmdEndSSP2@u8Cmd
  4624                           
  4625                           ;st7032.c: 1266:     I2C_u8MstTxSSP2((0x00));
  4626  0C71  3000               	movlw	0
  4627  0C72  318C  2433  318C   	fcall	_I2C_u8MstTxSSP2
  4628                           
  4629                           ;st7032.c: 1268:     I2C_u8MstTxSSP2(u8Cmd);
  4630  0C75  0020               	movlb	0	; select bank0
  4631  0C76  0830               	movf	vExecCmdEndSSP2@u8Cmd,w
  4632  0C77  318C  2433  318C   	fcall	_I2C_u8MstTxSSP2
  4633                           
  4634                           ;st7032.c: 1270:     I2C_vMstStopSSP2();
  4635  0C7A  318C  240D         	fcall	_I2C_vMstStopSSP2
  4636  0C7C  0008               	return
  4637  0C7D                     __end_of_vExecCmdEndSSP2:	
  4638                           
  4639                           	psect	text25
  4640  0C0D                     __ptext25:	
  4641 ;; *************** function _I2C_vMstStopSSP2 *****************
  4642 ;; Defined at:
  4643 ;;		line 366 in file "i2cUtil.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, status,0, pclath, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4657 ;;      Params:         0       0       0       0       0       0
  4658 ;;      Locals:         0       0       0       0       0       0
  4659 ;;      Temps:          0       0       0       0       0       0
  4660 ;;      Totals:         0       0       0       0       0       0
  4661 ;;Total ram usage:        0 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    7
  4664 ;; This function calls:
  4665 ;;		_vMasterWaitSSP2
  4666 ;; This function is called by:
  4667 ;;		_ST7032_vWriteCGRAMSSP2
  4668 ;;		_ST7032_vWriteDataSSP2
  4669 ;;		_ST7032_vWriteIconSSP2
  4670 ;;		_vExecCmdEndSSP2
  4671 ;;		_ST7032_vClearIconSSP2
  4672 ;;		_ST7032_vWriteCharSSP2
  4673 ;;		_ST7032_vWriteStringSSP2
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           
  4678                           ;psect for function _I2C_vMstStopSSP2
  4679  0C0D                     _I2C_vMstStopSSP2:	
  4680                           
  4681                           ;i2cUtil.c: 367:     vMasterWaitSSP2();
  4682                           
  4683                           ;incstack = 0
  4684                           ; Regs used in _I2C_vMstStopSSP2: [wreg+status,2+status,0+pclath+cstack]
  4685  0C0D  318C  2423         	fcall	_vMasterWaitSSP2
  4686                           
  4687                           ;i2cUtil.c: 368:     bMstStartFlgSSP2 = (0);
  4688  0C0F  0020               	movlb	0	; select bank0
  4689  0C10  01D7               	clrf	_bMstStartFlgSSP2
  4690                           
  4691                           ;i2cUtil.c: 369:     SSP2CON2bits.PEN = 0x01;
  4692  0C11  0024               	movlb	4	; select bank4
  4693  0C12  151E               	bsf	30,2	;volatile
  4694  0C13  0008               	return
  4695  0C14                     __end_of_I2C_vMstStopSSP2:	
  4696                           
  4697                           	psect	text26
  4698  0C33                     __ptext26:	
  4699 ;; *************** function _I2C_u8MstTxSSP2 *****************
  4700 ;; Defined at:
  4701 ;;		line 411 in file "i2cUtil.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  u8Data          1    wreg     unsigned char 
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;  u8Data          1   15[BANK0 ] unsigned char 
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      unsigned char 
  4708 ;; Registers used:
  4709 ;;		wreg, status,2, status,0, pclath, cstack
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4715 ;;      Params:         0       0       0       0       0       0
  4716 ;;      Locals:         0       1       0       0       0       0
  4717 ;;      Temps:          0       0       0       0       0       0
  4718 ;;      Totals:         0       1       0       0       0       0
  4719 ;;Total ram usage:        1 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    7
  4722 ;; This function calls:
  4723 ;;		_vMasterWaitSSP2
  4724 ;; This function is called by:
  4725 ;;		_ST7032_vWriteCGRAMSSP2
  4726 ;;		_ST7032_vWriteDataSSP2
  4727 ;;		_ST7032_vWriteIconSSP2
  4728 ;;		_vExecCmdSSP2
  4729 ;;		_vExecCmdEndSSP2
  4730 ;;		_ST7032_vClearIconSSP2
  4731 ;;		_ST7032_vWriteCharSSP2
  4732 ;;		_ST7032_vWriteStringSSP2
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           
  4737                           ;psect for function _I2C_u8MstTxSSP2
  4738  0C33                     _I2C_u8MstTxSSP2:	
  4739                           
  4740                           ;incstack = 0
  4741                           ; Regs used in _I2C_u8MstTxSSP2: [wreg+status,2+status,0+pclath+cstack]
  4742                           ;I2C_u8MstTxSSP2@u8Data stored from wreg
  4743  0C33  0020               	movlb	0	; select bank0
  4744  0C34  00AF               	movwf	I2C_u8MstTxSSP2@u8Data
  4745                           
  4746                           ;i2cUtil.c: 412:     SSP2BUF = u8Data;
  4747  0C35  082F               	movf	I2C_u8MstTxSSP2@u8Data,w
  4748  0C36  0024               	movlb	4	; select bank4
  4749  0C37  0099               	movwf	25	;volatile
  4750                           
  4751                           ;i2cUtil.c: 413:     vMasterWaitSSP2();
  4752  0C38  318C  2423         	fcall	_vMasterWaitSSP2
  4753                           
  4754                           ;i2cUtil.c: 414:     return SSP2CON2bits.ACKSTAT;;	Return value of _I2C_u8MstTxSSP2 is n
      +                          ever used
  4755  0C3A  0024               	movlb	4	; select bank4
  4756  0C3B  081E               	movf	30,w	;volatile
  4757  0C3C  0008               	return
  4758  0C3D                     __end_of_I2C_u8MstTxSSP2:	
  4759                           
  4760                           	psect	text27
  4761  0CD6                     __ptext27:	
  4762 ;; *************** function _I2C_u8MstStartSSP2 *****************
  4763 ;; Defined at:
  4764 ;;		line 316 in file "i2cUtil.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;  u8Address       1    wreg     unsigned char 
  4767 ;;  bReadFlg        1   15[BANK0 ] unsigned char 
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;  u8Address       1   16[BANK0 ] unsigned char 
  4770 ;; Return value:  Size  Location     Type
  4771 ;;                  1    wreg      unsigned char 
  4772 ;; Registers used:
  4773 ;;		wreg, status,2, status,0, pclath, cstack
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4779 ;;      Params:         0       1       0       0       0       0
  4780 ;;      Locals:         0       1       0       0       0       0
  4781 ;;      Temps:          0       0       0       0       0       0
  4782 ;;      Totals:         0       2       0       0       0       0
  4783 ;;Total ram usage:        2 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; Hardware stack levels required when called:    7
  4786 ;; This function calls:
  4787 ;;		_vMasterWaitSSP2
  4788 ;; This function is called by:
  4789 ;;		_ST7032_vInitSSP2
  4790 ;;		_ST7032_vSetContrastSSP2
  4791 ;;		_ST7032_vDispSettingSSP2
  4792 ;;		_ST7032_vWriteCGRAMSSP2
  4793 ;;		_ST7032_vWriteDataSSP2
  4794 ;;		_ST7032_vWriteIconSSP2
  4795 ;;		_bSetCursorSSP2
  4796 ;;		_ST7032_vClearDispSSP2
  4797 ;;		_ST7032_vClearIconSSP2
  4798 ;;		_ST7032_vDispIconSSP2
  4799 ;;		_ST7032_vWriteCharSSP2
  4800 ;;		_ST7032_vWriteStringSSP2
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           
  4805                           ;psect for function _I2C_u8MstStartSSP2
  4806  0CD6                     _I2C_u8MstStartSSP2:	
  4807                           
  4808                           ;incstack = 0
  4809                           ; Regs used in _I2C_u8MstStartSSP2: [wreg+status,2+status,0+pclath+cstack]
  4810                           ;I2C_u8MstStartSSP2@u8Address stored from wreg
  4811  0CD6  0020               	movlb	0	; select bank0
  4812  0CD7  00B0               	movwf	I2C_u8MstStartSSP2@u8Address
  4813                           
  4814                           ;i2cUtil.c: 318:     vMasterWaitSSP2();
  4815  0CD8  318C  2423  318C   	fcall	_vMasterWaitSSP2
  4816                           
  4817                           ;i2cUtil.c: 319:     if (bMstStartFlgSSP2 == (1)) {
  4818  0CDB  0020               	movlb	0	; select bank0
  4819  0CDC  0357               	decf	_bMstStartFlgSSP2,w
  4820  0CDD  1D03               	btfss	3,2
  4821  0CDE  2CE2               	goto	l331
  4822                           
  4823                           ;i2cUtil.c: 320:         SSP2CON2bits.RSEN = 1;
  4824  0CDF  0024               	movlb	4	; select bank4
  4825  0CE0  149E               	bsf	30,1	;volatile
  4826                           
  4827                           ;i2cUtil.c: 321:     } else {
  4828  0CE1  2CE6               	goto	l4846
  4829  0CE2                     l331:	
  4830                           
  4831                           ;i2cUtil.c: 322:         bMstStartFlgSSP2 = (1);
  4832  0CE2  01D7               	clrf	_bMstStartFlgSSP2
  4833  0CE3  0AD7               	incf	_bMstStartFlgSSP2,f
  4834                           
  4835                           ;i2cUtil.c: 323:         SSP2CON2bits.SEN = 1;
  4836  0CE4  0024               	movlb	4	; select bank4
  4837  0CE5  141E               	bsf	30,0	;volatile
  4838  0CE6                     l4846:	
  4839                           
  4840                           ;i2cUtil.c: 325:     vMasterWaitSSP2();
  4841  0CE6  318C  2423  318C   	fcall	_vMasterWaitSSP2
  4842                           
  4843                           ;i2cUtil.c: 326:     SSP2BUF = (u8Address << 1) | (bReadFlg & 0x01);
  4844  0CE9  0020               	movlb	0	; select bank0
  4845  0CEA  0C2F               	rrf	I2C_u8MstStartSSP2@bReadFlg,w
  4846  0CEB  0D30               	rlf	I2C_u8MstStartSSP2@u8Address,w
  4847  0CEC  0024               	movlb	4	; select bank4
  4848  0CED  0099               	movwf	25	;volatile
  4849                           
  4850                           ;i2cUtil.c: 327:     vMasterWaitSSP2();
  4851  0CEE  318C  2423         	fcall	_vMasterWaitSSP2
  4852                           
  4853                           ;i2cUtil.c: 328:     return SSP2CON2bits.ACKSTAT;;	Return value of _I2C_u8MstStartSSP2 i
      +                          s never used
  4854  0CF0  0024               	movlb	4	; select bank4
  4855  0CF1  081E               	movf	30,w	;volatile
  4856  0CF2  0008               	return
  4857  0CF3                     __end_of_I2C_u8MstStartSSP2:	
  4858                           
  4859                           	psect	text28
  4860  0C23                     __ptext28:	
  4861 ;; *************** function _vMasterWaitSSP2 *****************
  4862 ;; Defined at:
  4863 ;;		line 580 in file "i2cUtil.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;		None
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;		None
  4868 ;; Return value:  Size  Location     Type
  4869 ;;                  1    wreg      void 
  4870 ;; Registers used:
  4871 ;;		wreg, status,2
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/0
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4877 ;;      Params:         0       0       0       0       0       0
  4878 ;;      Locals:         0       0       0       0       0       0
  4879 ;;      Temps:          0       0       0       0       0       0
  4880 ;;      Totals:         0       0       0       0       0       0
  4881 ;;Total ram usage:        0 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    6
  4884 ;; This function calls:
  4885 ;;		Nothing
  4886 ;; This function is called by:
  4887 ;;		_I2C_u8MstStartSSP2
  4888 ;;		_I2C_vMstStopSSP2
  4889 ;;		_I2C_u8MstTxSSP2
  4890 ;;		_I2C_u8MstRxSSP2
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _vMasterWaitSSP2
  4896  0C23                     _vMasterWaitSSP2:	
  4897  0C23                     l370:	
  4898                           ;i2cUtil.c: 581:     while ((SSP2STAT & 0x04) || (SSP2CON2 & 0x1F));
  4899                           
  4900                           ;incstack = 0
  4901                           ; Regs used in _vMasterWaitSSP2: [wreg+status,2]
  4902                           
  4903  0C23  0024               	movlb	4	; select bank4
  4904  0C24  191C               	btfsc	28,2	;volatile
  4905  0C25  2C23               	goto	l370
  4906  0C26  081E               	movf	30,w	;volatile
  4907  0C27  391F               	andlw	31
  4908  0C28  1903               	btfsc	3,2
  4909  0C29  0008               	return
  4910  0C2A  2C23               	goto	l370
  4911  0C2B                     __end_of_vMasterWaitSSP2:	
  4912                           
  4913                           	psect	text29
  4914  0E52                     __ptext29:	
  4915 ;; *************** function _KEYPAD_vInit *****************
  4916 ;; Defined at:
  4917 ;;		line 83 in file "keypad.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;  spStatus        1    wreg     PTR struct .
  4920 ;;		 -> main@keypadSts(27), 
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;  spStatus        1   30[BANK0 ] PTR struct .
  4923 ;;		 -> main@keypadSts(27), 
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  1    wreg      void 
  4926 ;; Registers used:
  4927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4933 ;;      Params:         0       0       0       0       0       0
  4934 ;;      Locals:         0       1       0       0       0       0
  4935 ;;      Temps:          0       1       0       0       0       0
  4936 ;;      Totals:         0       2       0       0       0       0
  4937 ;;Total ram usage:        2 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:    7
  4940 ;; This function calls:
  4941 ;;		_memset
  4942 ;; This function is called by:
  4943 ;;		_main
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           
  4948                           ;psect for function _KEYPAD_vInit
  4949  0E52                     _KEYPAD_vInit:	
  4950                           
  4951                           ;incstack = 0
  4952                           ; Regs used in _KEYPAD_vInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4953                           ;KEYPAD_vInit@spStatus stored from wreg
  4954  0E52  0020               	movlb	0	; select bank0
  4955  0E53  00BE               	movwf	KEYPAD_vInit@spStatus
  4956                           
  4957                           ;keypad.c: 84:     if (spStatus == ((void*)0)) {
  4958  0E54  083E               	movf	KEYPAD_vInit@spStatus,w
  4959  0E55  1903               	btfsc	3,2
  4960  0E56  0008               	return
  4961                           
  4962                           ;keypad.c: 88:     spStatus->u8BeforeKeyNo = 0;
  4963  0E57  083E               	movf	KEYPAD_vInit@spStatus,w
  4964  0E58  3E11               	addlw	17
  4965  0E59  0086               	movwf	6
  4966  0E5A  0187               	clrf	7
  4967  0E5B  0181               	clrf	1
  4968                           
  4969                           ;keypad.c: 89:     spStatus->u16KeyChkCnt = 0;
  4970  0E5C  083E               	movf	KEYPAD_vInit@spStatus,w
  4971  0E5D  3E12               	addlw	18
  4972  0E5E  0086               	movwf	6
  4973  0E5F  0187               	clrf	7
  4974  0E60  3000               	movlw	0
  4975  0E61  3FC0               	movwi [0]fsr1
  4976  0E62  3FC1               	movwi [1]fsr1
  4977                           
  4978                           ;keypad.c: 91:     spStatus->u8BuffSize = 0;
  4979  0E63  083E               	movf	KEYPAD_vInit@spStatus,w
  4980  0E64  3E18               	addlw	24
  4981  0E65  0086               	movwf	6
  4982  0E66  0187               	clrf	7
  4983  0E67  0181               	clrf	1
  4984                           
  4985                           ;keypad.c: 92:     spStatus->u8BuffBeginIdx = 0;
  4986  0E68  083E               	movf	KEYPAD_vInit@spStatus,w
  4987  0E69  3E19               	addlw	25
  4988  0E6A  0086               	movwf	6
  4989  0E6B  0187               	clrf	7
  4990  0E6C  0181               	clrf	1
  4991                           
  4992                           ;keypad.c: 93:     spStatus->u8BuffEndIdx = (4) - 1;
  4993  0E6D  3003               	movlw	3
  4994  0E6E  00BD               	movwf	??_KEYPAD_vInit
  4995  0E6F  083E               	movf	KEYPAD_vInit@spStatus,w
  4996  0E70  3E1A               	addlw	26
  4997  0E71  0086               	movwf	6
  4998  0E72  0187               	clrf	7
  4999  0E73  083D               	movf	??_KEYPAD_vInit,w
  5000  0E74  0081               	movwf	1
  5001                           
  5002                           ;keypad.c: 95:     memset(spStatus->u8KeyBuffer, 0x00, (4));
  5003  0E75  083E               	movf	KEYPAD_vInit@spStatus,w
  5004  0E76  3E14               	addlw	20
  5005  0E77  00AF               	movwf	memset@dest
  5006  0E78  3000               	movlw	0
  5007  0E79  00B0               	movwf	memset@dest+1
  5008  0E7A  3000               	movlw	0
  5009  0E7B  00B1               	movwf	memset@c
  5010  0E7C  00B2               	movwf	memset@c+1
  5011  0E7D  3004               	movlw	4
  5012  0E7E  00B3               	movwf	memset@n
  5013  0E7F  3000               	movlw	0
  5014  0E80  00B4               	movwf	memset@n+1
  5015  0E81  3183  23AA         	fcall	_memset
  5016                           
  5017                           ;keypad.c: 97:     spKEYPAD_status = spStatus;
  5018  0E83  0020               	movlb	0	; select bank0
  5019  0E84  083E               	movf	KEYPAD_vInit@spStatus,w
  5020  0E85  00BD               	movwf	??_KEYPAD_vInit
  5021  0E86  083D               	movf	??_KEYPAD_vInit,w
  5022  0E87  00D6               	movwf	_spKEYPAD_status
  5023  0E88  0008               	return
  5024  0E89                     __end_of_KEYPAD_vInit:	
  5025                           
  5026                           	psect	text30
  5027  03AA                     __ptext30:	
  5028 ;; *************** function _memset *****************
  5029 ;; Defined at:
  5030 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memset.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;  dest            2   15[BANK0 ] PTR void 
  5033 ;;		 -> main@keypadSts(27), sMemoryMap(167), 
  5034 ;;  c               2   17[BANK0 ] int 
  5035 ;;  n               2   19[BANK0 ] unsigned int 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  s               2   27[BANK0 ] PTR unsigned char 
  5038 ;;		 -> main@keypadSts(27), sMemoryMap(167), 
  5039 ;;  k               2   25[BANK0 ] unsigned int 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  2   15[BANK0 ] PTR void 
  5042 ;; Registers used:
  5043 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5049 ;;      Params:         0       6       0       0       0       0
  5050 ;;      Locals:         0       4       0       0       0       0
  5051 ;;      Temps:          0       4       0       0       0       0
  5052 ;;      Totals:         0      14       0       0       0       0
  5053 ;;Total ram usage:       14 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    6
  5056 ;; This function calls:
  5057 ;;		Nothing
  5058 ;; This function is called by:
  5059 ;;		_main
  5060 ;;		_KEYPAD_vInit
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           
  5065                           ;psect for function _memset
  5066  03AA                     _memset:	
  5067                           
  5068                           ;incstack = 0
  5069                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5070  03AA  0020               	movlb	0	; select bank0
  5071  03AB  0830               	movf	memset@dest+1,w
  5072  03AC  00BC               	movwf	memset@s+1
  5073  03AD  082F               	movf	memset@dest,w
  5074  03AE  00BB               	movwf	memset@s
  5075  03AF  0833               	movf	memset@n,w
  5076  03B0  0434               	iorwf	memset@n+1,w
  5077  03B1  1903               	btfsc	3,2
  5078  03B2  0008               	return
  5079  03B3  083B               	movf	memset@s,w
  5080  03B4  0086               	movwf	6
  5081  03B5  083C               	movf	memset@s+1,w
  5082  03B6  0087               	movwf	7
  5083  03B7  0831               	movf	memset@c,w
  5084  03B8  0081               	movwf	1
  5085  03B9  0833               	movf	memset@n,w
  5086  03BA  073B               	addwf	memset@s,w
  5087  03BB  00B5               	movwf	??_memset
  5088  03BC  0834               	movf	memset@n+1,w
  5089  03BD  3D3C               	addwfc	memset@s+1,w
  5090  03BE  00B6               	movwf	??_memset+1
  5091  03BF  0835               	movf	??_memset,w
  5092  03C0  3EFF               	addlw	255
  5093  03C1  00B7               	movwf	??_memset+2
  5094  03C2  30FF               	movlw	255
  5095  03C3  3D36               	addwfc	??_memset+1,w
  5096  03C4  00B8               	movwf	??_memset+3
  5097  03C5  0837               	movf	??_memset+2,w
  5098  03C6  0086               	movwf	6
  5099  03C7  0838               	movf	??_memset+3,w
  5100  03C8  0087               	movwf	7
  5101  03C9  0831               	movf	memset@c,w
  5102  03CA  0081               	movwf	1
  5103  03CB  3000               	movlw	0
  5104  03CC  0234               	subwf	memset@n+1,w
  5105  03CD  3003               	movlw	3
  5106  03CE  1903               	skipnz
  5107  03CF  0233               	subwf	memset@n,w
  5108  03D0  1C03               	btfss	3,0
  5109  03D1  0008               	return
  5110  03D2  083B               	movf	memset@s,w
  5111  03D3  3E01               	addlw	1
  5112  03D4  00B5               	movwf	??_memset
  5113  03D5  3000               	movlw	0
  5114  03D6  3D3C               	addwfc	memset@s+1,w
  5115  03D7  00B6               	movwf	??_memset+1
  5116  03D8  0835               	movf	??_memset,w
  5117  03D9  0086               	movwf	6
  5118  03DA  0836               	movf	??_memset+1,w
  5119  03DB  0087               	movwf	7
  5120  03DC  0831               	movf	memset@c,w
  5121  03DD  0081               	movwf	1
  5122  03DE  083B               	movf	memset@s,w
  5123  03DF  3E02               	addlw	2
  5124  03E0  00B5               	movwf	??_memset
  5125  03E1  3000               	movlw	0
  5126  03E2  3D3C               	addwfc	memset@s+1,w
  5127  03E3  00B6               	movwf	??_memset+1
  5128  03E4  0835               	movf	??_memset,w
  5129  03E5  0086               	movwf	6
  5130  03E6  0836               	movf	??_memset+1,w
  5131  03E7  0087               	movwf	7
  5132  03E8  0831               	movf	memset@c,w
  5133  03E9  0081               	movwf	1
  5134  03EA  0833               	movf	memset@n,w
  5135  03EB  073B               	addwf	memset@s,w
  5136  03EC  00B5               	movwf	??_memset
  5137  03ED  0834               	movf	memset@n+1,w
  5138  03EE  3D3C               	addwfc	memset@s+1,w
  5139  03EF  00B6               	movwf	??_memset+1
  5140  03F0  0835               	movf	??_memset,w
  5141  03F1  3EFE               	addlw	254
  5142  03F2  00B7               	movwf	??_memset+2
  5143  03F3  30FF               	movlw	255
  5144  03F4  3D36               	addwfc	??_memset+1,w
  5145  03F5  00B8               	movwf	??_memset+3
  5146  03F6  0837               	movf	??_memset+2,w
  5147  03F7  0086               	movwf	6
  5148  03F8  0838               	movf	??_memset+3,w
  5149  03F9  0087               	movwf	7
  5150  03FA  0831               	movf	memset@c,w
  5151  03FB  0081               	movwf	1
  5152  03FC  0833               	movf	memset@n,w
  5153  03FD  073B               	addwf	memset@s,w
  5154  03FE  00B5               	movwf	??_memset
  5155  03FF  0834               	movf	memset@n+1,w
  5156  0400  3D3C               	addwfc	memset@s+1,w
  5157  0401  00B6               	movwf	??_memset+1
  5158  0402  0835               	movf	??_memset,w
  5159  0403  3EFD               	addlw	253
  5160  0404  00B7               	movwf	??_memset+2
  5161  0405  30FF               	movlw	255
  5162  0406  3D36               	addwfc	??_memset+1,w
  5163  0407  00B8               	movwf	??_memset+3
  5164  0408  0837               	movf	??_memset+2,w
  5165  0409  0086               	movwf	6
  5166  040A  0838               	movf	??_memset+3,w
  5167  040B  0087               	movwf	7
  5168  040C  0831               	movf	memset@c,w
  5169  040D  0081               	movwf	1
  5170  040E  3000               	movlw	0
  5171  040F  0234               	subwf	memset@n+1,w
  5172  0410  3007               	movlw	7
  5173  0411  1903               	skipnz
  5174  0412  0233               	subwf	memset@n,w
  5175  0413  1C03               	btfss	3,0
  5176  0414  0008               	return
  5177  0415  083B               	movf	memset@s,w
  5178  0416  3E03               	addlw	3
  5179  0417  00B5               	movwf	??_memset
  5180  0418  3000               	movlw	0
  5181  0419  3D3C               	addwfc	memset@s+1,w
  5182  041A  00B6               	movwf	??_memset+1
  5183  041B  0835               	movf	??_memset,w
  5184  041C  0086               	movwf	6
  5185  041D  0836               	movf	??_memset+1,w
  5186  041E  0087               	movwf	7
  5187  041F  0831               	movf	memset@c,w
  5188  0420  0081               	movwf	1
  5189  0421  0833               	movf	memset@n,w
  5190  0422  073B               	addwf	memset@s,w
  5191  0423  00B5               	movwf	??_memset
  5192  0424  0834               	movf	memset@n+1,w
  5193  0425  3D3C               	addwfc	memset@s+1,w
  5194  0426  00B6               	movwf	??_memset+1
  5195  0427  0835               	movf	??_memset,w
  5196  0428  3EFC               	addlw	252
  5197  0429  00B7               	movwf	??_memset+2
  5198  042A  30FF               	movlw	255
  5199  042B  3D36               	addwfc	??_memset+1,w
  5200  042C  00B8               	movwf	??_memset+3
  5201  042D  0837               	movf	??_memset+2,w
  5202  042E  0086               	movwf	6
  5203  042F  0838               	movf	??_memset+3,w
  5204  0430  0087               	movwf	7
  5205  0431  0831               	movf	memset@c,w
  5206  0432  0081               	movwf	1
  5207  0433  3000               	movlw	0
  5208  0434  0234               	subwf	memset@n+1,w
  5209  0435  3009               	movlw	9
  5210  0436  1903               	skipnz
  5211  0437  0233               	subwf	memset@n,w
  5212  0438  1C03               	btfss	3,0
  5213  0439  0008               	return
  5214  043A  093B               	comf	memset@s,w
  5215  043B  00B5               	movwf	??_memset
  5216  043C  093C               	comf	memset@s+1,w
  5217  043D  00B6               	movwf	??_memset+1
  5218  043E  0AB5               	incf	??_memset,f
  5219  043F  1903               	skipnz
  5220  0440  0AB6               	incf	??_memset+1,f
  5221  0441  3003               	movlw	3
  5222  0442  0535               	andwf	??_memset,w
  5223  0443  00B9               	movwf	memset@k
  5224  0444  3000               	movlw	0
  5225  0445  0536               	andwf	??_memset+1,w
  5226  0446  00BA               	movwf	memset@k+1
  5227  0447  0839               	movf	memset@k,w
  5228  0448  07BB               	addwf	memset@s,f
  5229  0449  083A               	movf	memset@k+1,w
  5230  044A  3DBC               	addwfc	memset@s+1,f
  5231  044B  0839               	movf	memset@k,w
  5232  044C  02B3               	subwf	memset@n,f
  5233  044D  083A               	movf	memset@k+1,w
  5234  044E  3BB4               	subwfb	memset@n+1,f
  5235  044F  30FC               	movlw	252
  5236  0450  05B3               	andwf	memset@n,f
  5237  0451  30FF               	movlw	255
  5238  0452  05B4               	andwf	memset@n+1,f
  5239  0453                     l3608:	
  5240  0453  0833               	movf	memset@n,w
  5241  0454  0434               	iorwf	memset@n+1,w
  5242  0455  1903               	btfsc	3,2
  5243  0456  0008               	return
  5244  0457  083B               	movf	memset@s,w
  5245  0458  0086               	movwf	6
  5246  0459  083C               	movf	memset@s+1,w
  5247  045A  0087               	movwf	7
  5248  045B  0831               	movf	memset@c,w
  5249  045C  0081               	movwf	1
  5250  045D  3001               	movlw	1
  5251  045E  02B3               	subwf	memset@n,f
  5252  045F  3000               	movlw	0
  5253  0460  3BB4               	subwfb	memset@n+1,f
  5254  0461  3001               	movlw	1
  5255  0462  07BB               	addwf	memset@s,f
  5256  0463  3000               	movlw	0
  5257  0464  3DBC               	addwfc	memset@s+1,f
  5258  0465  2C53               	goto	l3608
  5259  0466                     __end_of_memset:	
  5260                           
  5261                           	psect	text31
  5262  0D76                     __ptext31:	
  5263 ;; *************** function _I2C_vInitSlaveSSP1 *****************
  5264 ;; Defined at:
  5265 ;;		line 192 in file "i2cUtil.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;  u8Address       1    wreg     unsigned char 
  5268 ;;  eMode           1   15[BANK0 ] enum E2444
  5269 ;;  pvCallback      2   16[BANK0 ] PTR FTN(unsigned char ,u
  5270 ;;		 -> ssp1_vCallback(1), 
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;  u8Address       1   18[BANK0 ] unsigned char 
  5273 ;; Return value:  Size  Location     Type
  5274 ;;                  1    wreg      void 
  5275 ;; Registers used:
  5276 ;;		wreg, status,2, status,0
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5282 ;;      Params:         0       3       0       0       0       0
  5283 ;;      Locals:         0       1       0       0       0       0
  5284 ;;      Temps:          0       0       0       0       0       0
  5285 ;;      Totals:         0       4       0       0       0       0
  5286 ;;Total ram usage:        4 bytes
  5287 ;; Hardware stack levels used:    1
  5288 ;; Hardware stack levels required when called:    6
  5289 ;; This function calls:
  5290 ;;		Nothing
  5291 ;; This function is called by:
  5292 ;;		_main
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           
  5297                           ;psect for function _I2C_vInitSlaveSSP1
  5298  0D76                     _I2C_vInitSlaveSSP1:	
  5299                           
  5300                           ;incstack = 0
  5301                           ; Regs used in _I2C_vInitSlaveSSP1: [wreg+status,2+status,0]
  5302                           ;I2C_vInitSlaveSSP1@u8Address stored from wreg
  5303  0D76  0020               	movlb	0	; select bank0
  5304  0D77  00B2               	movwf	I2C_vInitSlaveSSP1@u8Address
  5305                           
  5306                           ;i2cUtil.c: 192: extern void I2C_vInitSlaveSSP1(unsigned char u8Address, enum I2C_SlaveM
      +                          ode eMode,;i2cUtil.c: 193:                             void (*pvCallback)(unsigned char 
      +                          u8BusNo, unsigned char u8EvtType)) {;i2cUtil.c: 195:     if (pvCallback != ((void*)0)) {
  5307  0D78  0830               	movf	I2C_vInitSlaveSSP1@pvCallback,w
  5308  0D79  0431               	iorwf	I2C_vInitSlaveSSP1@pvCallback+1,w
  5309  0D7A  1903               	btfsc	3,2
  5310  0D7B  2D80               	goto	l3820
  5311                           
  5312                           ;i2cUtil.c: 196:         pvSSP1Func = pvCallback;
  5313  0D7C  0831               	movf	I2C_vInitSlaveSSP1@pvCallback+1,w
  5314  0D7D  00DD               	movwf	_pvSSP1Func+1
  5315  0D7E  0830               	movf	I2C_vInitSlaveSSP1@pvCallback,w
  5316  0D7F  00DC               	movwf	_pvSSP1Func
  5317  0D80                     l3820:	
  5318                           
  5319                           ;i2cUtil.c: 199:     if (eMode == I2C_SLAVE_STD) {
  5320  0D80  082F               	movf	I2C_vInitSlaveSSP1@eMode,w
  5321  0D81  1D03               	btfss	3,2
  5322  0D82  2D87               	goto	l3824
  5323                           
  5324                           ;i2cUtil.c: 201:         SSP1STAT = 0b10000000;
  5325  0D83  3080               	movlw	128
  5326  0D84  0024               	movlb	4	; select bank4
  5327  0D85  0094               	movwf	20	;volatile
  5328                           
  5329                           ;i2cUtil.c: 202:     } else {
  5330  0D86  2D89               	goto	l3826
  5331  0D87                     l3824:	
  5332                           
  5333                           ;i2cUtil.c: 204:         SSP1STAT = 0b00000000;
  5334  0D87  0024               	movlb	4	; select bank4
  5335  0D88  0194               	clrf	20	;volatile
  5336  0D89                     l3826:	
  5337                           
  5338                           ;i2cUtil.c: 207:     SSP1CON1 = 0b00110110;
  5339  0D89  3036               	movlw	54
  5340  0D8A  0095               	movwf	21	;volatile
  5341                           
  5342                           ;i2cUtil.c: 210:     SSP1CON2 = 0b10000001;
  5343  0D8B  3081               	movlw	129
  5344  0D8C  0096               	movwf	22	;volatile
  5345                           
  5346                           ;i2cUtil.c: 212:     SSP1CON3 = 0b00000101;
  5347  0D8D  3005               	movlw	5
  5348  0D8E  0097               	movwf	23	;volatile
  5349                           
  5350                           ;i2cUtil.c: 213:     SSP1ADD = u8Address << 1;
  5351  0D8F  0020               	movlb	0	; select bank0
  5352  0D90  3532               	lslf	I2C_vInitSlaveSSP1@u8Address,w
  5353  0D91  0024               	movlb	4	; select bank4
  5354  0D92  0092               	movwf	18	;volatile
  5355                           
  5356                           ;i2cUtil.c: 214:     SSP1MSK = 0b11111110;
  5357  0D93  30FE               	movlw	254
  5358  0D94  0093               	movwf	19	;volatile
  5359                           
  5360                           ;i2cUtil.c: 215:     SSP1IF = 0;
  5361  0D95  0020               	movlb	0	; select bank0
  5362  0D96  1191               	bcf	17,3	;volatile
  5363                           
  5364                           ;i2cUtil.c: 216:     BCL1IF = 0;
  5365  0D97  1192               	bcf	18,3	;volatile
  5366                           
  5367                           ;i2cUtil.c: 217:     SSP1IE = 1;
  5368  0D98  0021               	movlb	1	; select bank1
  5369  0D99  1591               	bsf	17,3	;volatile
  5370                           
  5371                           ;i2cUtil.c: 218:     BCL1IE = 1;
  5372  0D9A  1592               	bsf	18,3	;volatile
  5373  0D9B  0008               	return
  5374  0D9C                     __end_of_I2C_vInitSlaveSSP1:	
  5375                           
  5376                           	psect	text32
  5377  0C8F                     __ptext32:	
  5378 ;; *************** function _I2C_vInitMasterSSP2 *****************
  5379 ;; Defined at:
  5380 ;;		line 158 in file "i2cUtil.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;  eMode           1    wreg     enum E2441
  5383 ;;  u8ClkDiv        1   15[BANK0 ] unsigned char 
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;  eMode           1   16[BANK0 ] enum E2441
  5386 ;; Return value:  Size  Location     Type
  5387 ;;                  1    wreg      void 
  5388 ;; Registers used:
  5389 ;;		wreg, status,2, status,0
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5395 ;;      Params:         0       1       0       0       0       0
  5396 ;;      Locals:         0       1       0       0       0       0
  5397 ;;      Temps:          0       0       0       0       0       0
  5398 ;;      Totals:         0       2       0       0       0       0
  5399 ;;Total ram usage:        2 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; Hardware stack levels required when called:    6
  5402 ;; This function calls:
  5403 ;;		Nothing
  5404 ;; This function is called by:
  5405 ;;		_main
  5406 ;; This function uses a non-reentrant model
  5407 ;;
  5408                           
  5409                           
  5410                           ;psect for function _I2C_vInitMasterSSP2
  5411  0C8F                     _I2C_vInitMasterSSP2:	
  5412                           
  5413                           ;incstack = 0
  5414                           ; Regs used in _I2C_vInitMasterSSP2: [wreg+status,2+status,0]
  5415                           ;I2C_vInitMasterSSP2@eMode stored from wreg
  5416  0C8F  0020               	movlb	0	; select bank0
  5417  0C90  00B0               	movwf	I2C_vInitMasterSSP2@eMode
  5418                           
  5419                           ;i2cUtil.c: 160:     bMstStartFlgSSP2 = (0);
  5420  0C91  01D7               	clrf	_bMstStartFlgSSP2
  5421                           
  5422                           ;i2cUtil.c: 162:     if (eMode == I2C_MASTER_STD) {
  5423  0C92  0830               	movf	I2C_vInitMasterSSP2@eMode,w
  5424  0C93  1D03               	btfss	3,2
  5425  0C94  2C99               	goto	l3850
  5426                           
  5427                           ;i2cUtil.c: 164:         SSP2STAT= 0b10000000;
  5428  0C95  3080               	movlw	128
  5429  0C96  0024               	movlb	4	; select bank4
  5430  0C97  009C               	movwf	28	;volatile
  5431                           
  5432                           ;i2cUtil.c: 165:     } else {
  5433  0C98  2C9B               	goto	l3852
  5434  0C99                     l3850:	
  5435                           
  5436                           ;i2cUtil.c: 167:         SSP2STAT= 0b00000000;
  5437  0C99  0024               	movlb	4	; select bank4
  5438  0C9A  019C               	clrf	28	;volatile
  5439  0C9B                     l3852:	
  5440                           
  5441                           ;i2cUtil.c: 170:     SSP2ADD = u8ClkDiv;
  5442  0C9B  0020               	movlb	0	; select bank0
  5443  0C9C  082F               	movf	I2C_vInitMasterSSP2@u8ClkDiv,w
  5444  0C9D  0024               	movlb	4	; select bank4
  5445  0C9E  009A               	movwf	26	;volatile
  5446                           
  5447                           ;i2cUtil.c: 172:     SSP2CON1 = 0b00101000;
  5448  0C9F  3028               	movlw	40
  5449  0CA0  009D               	movwf	29	;volatile
  5450                           
  5451                           ;i2cUtil.c: 173:     SSP2CON2 = 0b10000000;
  5452  0CA1  3080               	movlw	128
  5453  0CA2  009E               	movwf	30	;volatile
  5454  0CA3  0008               	return
  5455  0CA4                     __end_of_I2C_vInitMasterSSP2:	
  5456                           
  5457                           	psect	intentry
  5458  0004                     __pintentry:	
  5459 ;; *************** function _ISR *****************
  5460 ;; Defined at:
  5461 ;;		line 970 in file "InterfaceMain.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;		None
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;		None
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  1    wreg      void 
  5468 ;; Registers used:
  5469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5475 ;;      Params:         0       0       0       0       0       0
  5476 ;;      Locals:         0       0       0       0       0       0
  5477 ;;      Temps:          0       0       0       0       0       0
  5478 ;;      Totals:         0       0       0       0       0       0
  5479 ;;Total ram usage:        0 bytes
  5480 ;; Hardware stack levels used:    1
  5481 ;; Hardware stack levels required when called:    5
  5482 ;; This function calls:
  5483 ;;		_I2C_vSlaveIsrSSP1
  5484 ;;		_timer_vInterrupt
  5485 ;; This function is called by:
  5486 ;;		Interrupt level 1
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490  0004                     _ISR:	
  5491                           
  5492                           ;incstack = 0
  5493  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5494                           
  5495                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5496  0005  3180               	pagesel	$
  5497                           
  5498                           ;InterfaceMain.c: 975:     timer_vInterrupt();
  5499  0006  318D  25C7  3180   	fcall	_timer_vInterrupt
  5500                           
  5501                           ;InterfaceMain.c: 980:     I2C_vSlaveIsrSSP1();
  5502  0009  318D  25F3         	fcall	_I2C_vSlaveIsrSSP1
  5503  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5504  000C  0009               	retfie
  5505  000D                     __end_of_ISR:	
  5506                           
  5507                           	psect	text34
  5508  0DC7                     __ptext34:	
  5509 ;; *************** function _timer_vInterrupt *****************
  5510 ;; Defined at:
  5511 ;;		line 588 in file "InterfaceMain.c"
  5512 ;; Parameters:    Size  Location     Type
  5513 ;;		None
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;  u8KeyNo         1    8[BANK0 ] unsigned char 
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  1    wreg      void 
  5518 ;; Registers used:
  5519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5520 ;; Tracked objects:
  5521 ;;		On entry : 0/0
  5522 ;;		On exit  : 0/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5525 ;;      Params:         0       0       0       0       0       0
  5526 ;;      Locals:         0       1       0       0       0       0
  5527 ;;      Temps:          0       1       0       0       0       0
  5528 ;;      Totals:         0       2       0       0       0       0
  5529 ;;Total ram usage:        2 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; Hardware stack levels required when called:    3
  5532 ;; This function calls:
  5533 ;;		_KEYPAD_bUpdateBuffer
  5534 ;;		_KEYPAD_u8Read
  5535 ;;		_evt_vSetEventMap
  5536 ;; This function is called by:
  5537 ;;		_ISR
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           
  5542                           ;psect for function _timer_vInterrupt
  5543  0DC7                     _timer_vInterrupt:	
  5544                           
  5545                           ;InterfaceMain.c: 590:     if (TMR0IF != 1) {
  5546                           
  5547                           ;incstack = 0
  5548                           ; Regs used in _timer_vInterrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5549  0DC7  1D0B               	btfss	11,2	;volatile
  5550  0DC8  0008               	return
  5551                           
  5552                           ;InterfaceMain.c: 594:     TMR0 = 0;
  5553  0DC9  0020               	movlb	0	; select bank0
  5554  0DCA  0195               	clrf	21	;volatile
  5555                           
  5556                           ;InterfaceMain.c: 595:     TMR0IF = 0;
  5557  0DCB  110B               	bcf	11,2	;volatile
  5558                           
  5559                           ;InterfaceMain.c: 598:     if (sAppStatus.u8TimerCnt < 128) {
  5560  0DCC  3080               	movlw	128
  5561  0DCD  0021               	movlb	1	; select bank1
  5562  0DCE  024D               	subwf	_sAppStatus^(0+128),w
  5563  0DCF  1803               	skipnc
  5564  0DD0  2DD8               	goto	i1l3988
  5565                           
  5566                           ;InterfaceMain.c: 599:         sAppStatus.u8TimerCnt++;
  5567  0DD1  3001               	movlw	1
  5568  0DD2  0020               	movlb	0	; select bank0
  5569  0DD3  00A7               	movwf	??_timer_vInterrupt
  5570  0DD4  0827               	movf	??_timer_vInterrupt,w
  5571  0DD5  0021               	movlb	1	; select bank1
  5572  0DD6  07CD               	addwf	_sAppStatus^(0+128),f
  5573                           
  5574                           ;InterfaceMain.c: 600:     } else {
  5575  0DD7  2DD9               	goto	i1l3990
  5576  0DD8                     i1l3988:	
  5577                           
  5578                           ;InterfaceMain.c: 601:         sAppStatus.u8TimerCnt = 0;
  5579  0DD8  01CD               	clrf	_sAppStatus^(0+128)
  5580  0DD9                     i1l3990:	
  5581                           
  5582                           ;InterfaceMain.c: 605:     if ((sAppStatus.u8TimerCnt % 2) == 0) {
  5583  0DD9  184D               	btfsc	_sAppStatus^(0+128),0
  5584  0DDA  2DDF               	goto	i1l3994
  5585                           
  5586                           ;InterfaceMain.c: 606:         evt_vSetEventMap(EVT_TIMER);
  5587  0DDB  3001               	movlw	1
  5588  0DDC  318C  2461  318D   	fcall	_evt_vSetEventMap
  5589  0DDF                     i1l3994:	
  5590                           
  5591                           ;InterfaceMain.c: 609:     KEYPAD_bUpdateBuffer();
  5592  0DDF  318E  26FB  318D   	fcall	_KEYPAD_bUpdateBuffer
  5593                           
  5594                           ;InterfaceMain.c: 610:     unsigned char u8KeyNo = KEYPAD_u8Read();
  5595  0DE2  3182  22DD  318D   	fcall	_KEYPAD_u8Read
  5596  0DE5  0020               	movlb	0	; select bank0
  5597  0DE6  00A7               	movwf	??_timer_vInterrupt
  5598  0DE7  0827               	movf	??_timer_vInterrupt,w
  5599  0DE8  00A8               	movwf	timer_vInterrupt@u8KeyNo
  5600                           
  5601                           ;InterfaceMain.c: 611:     if (u8KeyNo != 0xFF) {
  5602  0DE9  0A28               	incf	timer_vInterrupt@u8KeyNo,w
  5603  0DEA  1903               	btfsc	3,2
  5604  0DEB  0008               	return
  5605                           
  5606                           ;InterfaceMain.c: 612:         sMemoryMap.u8KeyValue = u8KeyNo;
  5607  0DEC  30CA               	movlw	202
  5608  0DED  0086               	movwf	6
  5609  0DEE  3020               	movlw	32
  5610  0DEF  0087               	movwf	7
  5611  0DF0  0828               	movf	timer_vInterrupt@u8KeyNo,w
  5612  0DF1  0081               	movwf	1
  5613  0DF2  0008               	return
  5614  0DF3                     __end_of_timer_vInterrupt:	
  5615                           
  5616                           	psect	text35
  5617  0EFB                     __ptext35:	
  5618 ;; *************** function _KEYPAD_bUpdateBuffer *****************
  5619 ;; Defined at:
  5620 ;;		line 114 in file "keypad.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;		None
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  u8Idx           1   13[COMMON] unsigned char 
  5625 ;;  u8KeyNo         1   12[COMMON] unsigned char 
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  1    wreg      unsigned char 
  5628 ;; Registers used:
  5629 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5635 ;;      Params:         0       0       0       0       0       0
  5636 ;;      Locals:         2       0       0       0       0       0
  5637 ;;      Temps:          2       0       0       0       0       0
  5638 ;;      Totals:         4       0       0       0       0       0
  5639 ;;Total ram usage:        4 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    2
  5642 ;; This function calls:
  5643 ;;		_KEYPAD_u8Read
  5644 ;;		i1_criticalSec_vBegin
  5645 ;;		i1_criticalSec_vEnd
  5646 ;; This function is called by:
  5647 ;;		_timer_vInterrupt
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           
  5652                           ;psect for function _KEYPAD_bUpdateBuffer
  5653  0EFB                     _KEYPAD_bUpdateBuffer:	
  5654                           
  5655                           ;keypad.c: 116:     if (spKEYPAD_status->u8BuffSize >= (4)) {
  5656                           
  5657                           ;incstack = 0
  5658                           ; Regs used in _KEYPAD_bUpdateBuffer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5659  0EFB  0020               	movlb	0	; select bank0
  5660  0EFC  0856               	movf	_spKEYPAD_status,w
  5661  0EFD  3E18               	addlw	24
  5662  0EFE  0086               	movwf	6
  5663  0EFF  0187               	clrf	7
  5664  0F00  3004               	movlw	4
  5665  0F01  0201               	subwf	1,w
  5666  0F02  1803               	btfsc	3,0
  5667  0F03  0008               	return
  5668                           
  5669                           ;keypad.c: 121:     unsigned char u8KeyNo = KEYPAD_u8Read();
  5670  0F04  3182  22DD  318E   	fcall	_KEYPAD_u8Read
  5671  0F07  00FA               	movwf	??_KEYPAD_bUpdateBuffer
  5672  0F08  087A               	movf	??_KEYPAD_bUpdateBuffer,w
  5673  0F09  00FC               	movwf	KEYPAD_bUpdateBuffer@u8KeyNo
  5674                           
  5675                           ;keypad.c: 122:     if (u8KeyNo == 0xFF) {
  5676  0F0A  0A7C               	incf	KEYPAD_bUpdateBuffer@u8KeyNo,w
  5677  0F0B  1903               	btfsc	3,2
  5678  0F0C  0008               	return
  5679                           
  5680                           ;keypad.c: 126:     criticalSec_vBegin();
  5681  0F0D  318C  2406  318E   	fcall	i1_criticalSec_vBegin
  5682                           
  5683                           ;keypad.c: 128:     unsigned char u8Idx = (spKEYPAD_status->u8BuffEndIdx + 1) % (4);
  5684  0F10  0020               	movlb	0	; select bank0
  5685  0F11  0856               	movf	_spKEYPAD_status,w
  5686  0F12  3E1A               	addlw	26
  5687  0F13  0086               	movwf	6
  5688  0F14  0187               	clrf	7
  5689  0F15  0801               	movf	1,w
  5690  0F16  3E01               	addlw	1
  5691  0F17  3903               	andlw	3
  5692  0F18  00FA               	movwf	??_KEYPAD_bUpdateBuffer
  5693  0F19  087A               	movf	??_KEYPAD_bUpdateBuffer,w
  5694  0F1A  00FD               	movwf	KEYPAD_bUpdateBuffer@u8Idx
  5695                           
  5696                           ;keypad.c: 129:     spKEYPAD_status->u8KeyBuffer[u8Idx] = u8KeyNo;
  5697  0F1B  087C               	movf	KEYPAD_bUpdateBuffer@u8KeyNo,w
  5698  0F1C  00FA               	movwf	??_KEYPAD_bUpdateBuffer
  5699  0F1D  087D               	movf	KEYPAD_bUpdateBuffer@u8Idx,w
  5700  0F1E  0756               	addwf	_spKEYPAD_status,w
  5701  0F1F  00FB               	movwf	??_KEYPAD_bUpdateBuffer+1
  5702  0F20  087B               	movf	??_KEYPAD_bUpdateBuffer+1,w
  5703  0F21  3E14               	addlw	20
  5704  0F22  0086               	movwf	6
  5705  0F23  0187               	clrf	7
  5706  0F24  087A               	movf	??_KEYPAD_bUpdateBuffer,w
  5707  0F25  0081               	movwf	1
  5708                           
  5709                           ;keypad.c: 130:     spKEYPAD_status->u8BuffEndIdx = u8Idx;
  5710  0F26  087D               	movf	KEYPAD_bUpdateBuffer@u8Idx,w
  5711  0F27  00FA               	movwf	??_KEYPAD_bUpdateBuffer
  5712  0F28  0856               	movf	_spKEYPAD_status,w
  5713  0F29  3E1A               	addlw	26
  5714  0F2A  0086               	movwf	6
  5715  0F2B  0187               	clrf	7
  5716  0F2C  087A               	movf	??_KEYPAD_bUpdateBuffer,w
  5717  0F2D  0081               	movwf	1
  5718                           
  5719                           ;keypad.c: 131:     spKEYPAD_status->u8BuffSize++;
  5720  0F2E  3001               	movlw	1
  5721  0F2F  00FA               	movwf	??_KEYPAD_bUpdateBuffer
  5722  0F30  0856               	movf	_spKEYPAD_status,w
  5723  0F31  3E18               	addlw	24
  5724  0F32  0086               	movwf	6
  5725  0F33  0187               	clrf	7
  5726  0F34  087A               	movf	??_KEYPAD_bUpdateBuffer,w
  5727  0F35  0781               	addwf	1,f
  5728                           
  5729                           ;keypad.c: 133:     criticalSec_vEnd();
  5730  0F36  318C  241B         	fcall	i1_criticalSec_vEnd
  5731  0F38  0008               	return
  5732  0F39                     __end_of_KEYPAD_bUpdateBuffer:	
  5733                           
  5734                           	psect	text36
  5735  0C1B                     __ptext36:	
  5736 ;; *************** function i1_criticalSec_vEnd *****************
  5737 ;; Defined at:
  5738 ;;		line 83 in file "libcom.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;		None
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;		None
  5743 ;; Return value:  Size  Location     Type
  5744 ;;                  1    wreg      void 
  5745 ;; Registers used:
  5746 ;;		wreg, status,2, status,0
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5752 ;;      Params:         0       0       0       0       0       0
  5753 ;;      Locals:         0       0       0       0       0       0
  5754 ;;      Temps:          0       0       0       0       0       0
  5755 ;;      Totals:         0       0       0       0       0       0
  5756 ;;Total ram usage:        0 bytes
  5757 ;; Hardware stack levels used:    1
  5758 ;; This function calls:
  5759 ;;		Nothing
  5760 ;; This function is called by:
  5761 ;;		_KEYPAD_bUpdateBuffer
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           
  5766                           ;psect for function i1_criticalSec_vEnd
  5767  0C1B                     i1_criticalSec_vEnd:	
  5768                           
  5769                           ;libcom.c: 84:     u8Depth--;
  5770                           
  5771                           ;incstack = 0
  5772                           ; Regs used in i1_criticalSec_vEnd: [wreg+status,2+status,0]
  5773  0C1B  3001               	movlw	1
  5774  0C1C  0020               	movlb	0	; select bank0
  5775  0C1D  02D5               	subwf	_u8Depth,f	;volatile
  5776                           
  5777                           ;libcom.c: 85:     if (u8Depth == 0) {
  5778  0C1E  0855               	movf	_u8Depth,w	;volatile
  5779  0C1F  1D03               	btfss	3,2
  5780  0C20  0008               	return
  5781                           
  5782                           ;libcom.c: 86:         GIE = 1;
  5783  0C21  178B               	bsf	11,7	;volatile
  5784  0C22  0008               	return
  5785  0C23                     __end_ofi1_criticalSec_vEnd:	
  5786                           
  5787                           	psect	text37
  5788  0C06                     __ptext37:	
  5789 ;; *************** function i1_criticalSec_vBegin *****************
  5790 ;; Defined at:
  5791 ;;		line 65 in file "libcom.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;		None
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      void 
  5798 ;; Registers used:
  5799 ;;		wreg, status,2, status,0
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5805 ;;      Params:         0       0       0       0       0       0
  5806 ;;      Locals:         0       0       0       0       0       0
  5807 ;;      Temps:          1       0       0       0       0       0
  5808 ;;      Totals:         1       0       0       0       0       0
  5809 ;;Total ram usage:        1 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; This function calls:
  5812 ;;		Nothing
  5813 ;; This function is called by:
  5814 ;;		_KEYPAD_bUpdateBuffer
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           
  5819                           ;psect for function i1_criticalSec_vBegin
  5820  0C06                     i1_criticalSec_vBegin:	
  5821                           
  5822                           ;libcom.c: 66:     GIE = 0;
  5823                           
  5824                           ;incstack = 0
  5825                           ; Regs used in i1_criticalSec_vBegin: [wreg+status,2+status,0]
  5826  0C06  138B               	bcf	11,7	;volatile
  5827                           
  5828                           ;libcom.c: 67:     u8Depth++;
  5829  0C07  3001               	movlw	1
  5830  0C08  00F0               	movwf	??i1_criticalSec_vBegin
  5831  0C09  0870               	movf	??i1_criticalSec_vBegin,w
  5832  0C0A  0020               	movlb	0	; select bank0
  5833  0C0B  07D5               	addwf	_u8Depth,f	;volatile
  5834  0C0C  0008               	return
  5835  0C0D                     __end_ofi1_criticalSec_vBegin:	
  5836                           
  5837                           	psect	text38
  5838  02DD                     __ptext38:	
  5839 ;; *************** function _KEYPAD_u8Read *****************
  5840 ;; Defined at:
  5841 ;;		line 195 in file "keypad.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;		None
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;  u16PinMap       2    2[BANK0 ] unsigned int 
  5846 ;;  u8Row           1    6[BANK0 ] unsigned char 
  5847 ;;  u8KeyNo         1    5[BANK0 ] unsigned char 
  5848 ;;  u8Col           1    4[BANK0 ] unsigned char 
  5849 ;;  u8PortB         1    1[BANK0 ] unsigned char 
  5850 ;;  u8PortA         1    0[BANK0 ] unsigned char 
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  1    wreg      unsigned char 
  5853 ;; Registers used:
  5854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5860 ;;      Params:         0       0       0       0       0       0
  5861 ;;      Locals:         0       7       0       0       0       0
  5862 ;;      Temps:          2       0       0       0       0       0
  5863 ;;      Totals:         2       7       0       0       0       0
  5864 ;;Total ram usage:        9 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; Hardware stack levels required when called:    1
  5867 ;; This function calls:
  5868 ;;		_readColumn
  5869 ;; This function is called by:
  5870 ;;		_timer_vInterrupt
  5871 ;;		_KEYPAD_bUpdateBuffer
  5872 ;; This function uses a non-reentrant model
  5873 ;;
  5874                           
  5875                           
  5876                           ;psect for function _KEYPAD_u8Read
  5877  02DD                     _KEYPAD_u8Read:	
  5878                           
  5879                           ;keypad.c: 197:     unsigned char u8PortA = PORTA;
  5880                           
  5881                           ;incstack = 0
  5882                           ; Regs used in _KEYPAD_u8Read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5883  02DD  0020               	movlb	0	; select bank0
  5884  02DE  080C               	movf	12,w	;volatile
  5885  02DF  00F8               	movwf	??_KEYPAD_u8Read
  5886  02E0  0878               	movf	??_KEYPAD_u8Read,w
  5887  02E1  00A0               	movwf	KEYPAD_u8Read@u8PortA
  5888                           
  5889                           ;keypad.c: 199:     unsigned char u8PortB = PORTB;
  5890  02E2  080D               	movf	13,w	;volatile
  5891  02E3  00F8               	movwf	??_KEYPAD_u8Read
  5892  02E4  0878               	movf	??_KEYPAD_u8Read,w
  5893  02E5  00A1               	movwf	KEYPAD_u8Read@u8PortB
  5894                           
  5895                           ;keypad.c: 205:     unsigned int u16PinMap;;keypad.c: 206:     unsigned char u8Col;;keyp
      +                          ad.c: 207:     unsigned char u8Row;;keypad.c: 208:     for (u8Row = 0; u8Row < (4); u8Ro
      +                          w++) {
  5896  02E6  01A6               	clrf	KEYPAD_u8Read@u8Row
  5897  02E7                     i1l3288:	
  5898                           
  5899                           ;keypad.c: 210:         u16PinMap = spKEYPAD_status->u16PinRows[u8Row];
  5900  02E7  3526               	lslf	KEYPAD_u8Read@u8Row,w
  5901  02E8  0756               	addwf	_spKEYPAD_status,w
  5902  02E9  00F8               	movwf	??_KEYPAD_u8Read
  5903  02EA  0878               	movf	??_KEYPAD_u8Read,w
  5904  02EB  3E09               	addlw	9
  5905  02EC  0086               	movwf	6
  5906  02ED  0187               	clrf	7
  5907  02EE  3F40               	moviw [0]fsr1
  5908  02EF  00A2               	movwf	KEYPAD_u8Read@u16PinMap
  5909  02F0  3F41               	moviw [1]fsr1
  5910  02F1  00A3               	movwf	KEYPAD_u8Read@u16PinMap+1
  5911                           
  5912                           ;keypad.c: 211:         switch (u16PinMap & 0xFF00) {
  5913  02F2  2B0D               	goto	i1l3304
  5914  02F3                     i1l3290:	
  5915                           
  5916                           ;keypad.c: 213:                 PORTA = u8PortA | (unsigned char)u16PinMap;
  5917  02F3  0820               	movf	KEYPAD_u8Read@u8PortA,w
  5918  02F4  0422               	iorwf	KEYPAD_u8Read@u16PinMap,w
  5919  02F5  008C               	movwf	12	;volatile
  5920                           
  5921                           ;keypad.c: 214:                 u8Col = readColumn();
  5922  02F6  318F  27BB  3182   	fcall	_readColumn
  5923  02F9  00F8               	movwf	??_KEYPAD_u8Read
  5924  02FA  0878               	movf	??_KEYPAD_u8Read,w
  5925  02FB  0020               	movlb	0	; select bank0
  5926  02FC  00A4               	movwf	KEYPAD_u8Read@u8Col
  5927                           
  5928                           ;keypad.c: 215:                 PORTA = u8PortA;
  5929  02FD  0820               	movf	KEYPAD_u8Read@u8PortA,w
  5930  02FE  008C               	movwf	12	;volatile
  5931                           
  5932                           ;keypad.c: 216:                 break;
  5933  02FF  2B25               	goto	i1l3306
  5934  0300                     i1l3296:	
  5935                           
  5936                           ;keypad.c: 219:                 PORTB = u8PortB | (unsigned char)u16PinMap;
  5937  0300  0821               	movf	KEYPAD_u8Read@u8PortB,w
  5938  0301  0422               	iorwf	KEYPAD_u8Read@u16PinMap,w
  5939  0302  008D               	movwf	13	;volatile
  5940                           
  5941                           ;keypad.c: 220:                 u8Col = readColumn();
  5942  0303  318F  27BB  3182   	fcall	_readColumn
  5943  0306  00F8               	movwf	??_KEYPAD_u8Read
  5944  0307  0878               	movf	??_KEYPAD_u8Read,w
  5945  0308  0020               	movlb	0	; select bank0
  5946  0309  00A4               	movwf	KEYPAD_u8Read@u8Col
  5947                           
  5948                           ;keypad.c: 221:                 PORTB = u8PortB;
  5949  030A  0821               	movf	KEYPAD_u8Read@u8PortB,w
  5950  030B  008D               	movwf	13	;volatile
  5951                           
  5952                           ;keypad.c: 222:                 break;
  5953  030C  2B25               	goto	i1l3306
  5954  030D                     i1l3304:	
  5955  030D  3000               	movlw	0
  5956  030E  0522               	andwf	KEYPAD_u8Read@u16PinMap,w
  5957  030F  00F8               	movwf	??_KEYPAD_u8Read
  5958  0310  30FF               	movlw	255
  5959  0311  0523               	andwf	KEYPAD_u8Read@u16PinMap+1,w
  5960  0312  00F9               	movwf	??_KEYPAD_u8Read+1
  5961                           
  5962                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5963                           ; Switch size 1, requested type "simple"
  5964                           ; Number of cases is 2, Range of values is 0 to 1
  5965                           ; switch strategies available:
  5966                           ; Name         Instructions Cycles
  5967                           ; simple_byte            7     4 (average)
  5968                           ; direct_byte           10     6 (fixed)
  5969                           ; jumptable            260     6 (fixed)
  5970                           ;	Chosen strategy is simple_byte
  5971  0313  0879               	movf	??_KEYPAD_u8Read+1,w
  5972  0314  3A00               	xorlw	0	; case 0
  5973  0315  1903               	skipnz
  5974  0316  2B1B               	goto	i1l5854
  5975  0317  3A01               	xorlw	1	; case 1
  5976  0318  1903               	skipnz
  5977  0319  2B20               	goto	i1l5856
  5978  031A  2B25               	goto	i1l3306
  5979  031B                     i1l5854:	
  5980                           
  5981                           ; Switch size 1, requested type "simple"
  5982                           ; Number of cases is 1, Range of values is 0 to 0
  5983                           ; switch strategies available:
  5984                           ; Name         Instructions Cycles
  5985                           ; simple_byte            4     3 (average)
  5986                           ; direct_byte            8     6 (fixed)
  5987                           ; jumptable            260     6 (fixed)
  5988                           ;	Chosen strategy is simple_byte
  5989  031B  0878               	movf	??_KEYPAD_u8Read,w
  5990  031C  3A00               	xorlw	0	; case 0
  5991  031D  1903               	skipnz
  5992  031E  2AF3               	goto	i1l3290
  5993  031F  2B25               	goto	i1l3306
  5994  0320                     i1l5856:	
  5995                           
  5996                           ; Switch size 1, requested type "simple"
  5997                           ; Number of cases is 1, Range of values is 0 to 0
  5998                           ; switch strategies available:
  5999                           ; Name         Instructions Cycles
  6000                           ; simple_byte            4     3 (average)
  6001                           ; direct_byte            8     6 (fixed)
  6002                           ; jumptable            260     6 (fixed)
  6003                           ;	Chosen strategy is simple_byte
  6004  0320  0878               	movf	??_KEYPAD_u8Read,w
  6005  0321  3A00               	xorlw	0	; case 0
  6006  0322  1903               	skipnz
  6007  0323  2B00               	goto	i1l3296
  6008  0324  2B25               	goto	i1l3306
  6009  0325                     i1l3306:	
  6010                           
  6011                           ;keypad.c: 233:         if (u8Col != 0xFF) {
  6012  0325  0A24               	incf	KEYPAD_u8Read@u8Col,w
  6013  0326  1D03               	btfss	3,2
  6014  0327  2B30               	goto	i1l3314
  6015                           
  6016                           ;keypad.c: 236:     }
  6017  0328  3001               	movlw	1
  6018  0329  00F8               	movwf	??_KEYPAD_u8Read
  6019  032A  0878               	movf	??_KEYPAD_u8Read,w
  6020  032B  07A6               	addwf	KEYPAD_u8Read@u8Row,f
  6021  032C  3004               	movlw	4
  6022  032D  0226               	subwf	KEYPAD_u8Read@u8Row,w
  6023  032E  1C03               	skipc
  6024  032F  2AE7               	goto	i1l3288
  6025  0330                     i1l3314:	
  6026                           
  6027                           ;keypad.c: 238:     if (u8Col == 0xFF) {
  6028  0330  0A24               	incf	KEYPAD_u8Read@u8Col,w
  6029  0331  1D03               	btfss	3,2
  6030  0332  2B55               	goto	i1l3322
  6031                           
  6032                           ;keypad.c: 239:         spKEYPAD_status->u8BeforeKeyNo = 0xFF;
  6033  0333  30FF               	movlw	255
  6034  0334  00F8               	movwf	??_KEYPAD_u8Read
  6035  0335  0856               	movf	_spKEYPAD_status,w
  6036  0336  3E11               	addlw	17
  6037  0337  0086               	movwf	6
  6038  0338  0187               	clrf	7
  6039  0339  0878               	movf	??_KEYPAD_u8Read,w
  6040  033A  0081               	movwf	1
  6041                           
  6042                           ;keypad.c: 240:         spKEYPAD_status->u16KeyChkCnt = 0;
  6043  033B  0856               	movf	_spKEYPAD_status,w
  6044  033C  3E12               	addlw	18
  6045  033D  0086               	movwf	6
  6046  033E  0187               	clrf	7
  6047  033F  3000               	movlw	0
  6048  0340  3FC0               	movwi [0]fsr1
  6049  0341  3FC1               	movwi [1]fsr1
  6050  0342  2B53               	goto	i1l3318
  6051  0343                     i1l3326:	
  6052                           
  6053                           ;keypad.c: 247:         spKEYPAD_status->u8BeforeKeyNo = u8KeyNo;
  6054  0343  0825               	movf	KEYPAD_u8Read@u8KeyNo,w
  6055  0344  00F8               	movwf	??_KEYPAD_u8Read
  6056  0345  0856               	movf	_spKEYPAD_status,w
  6057  0346  3E11               	addlw	17
  6058  0347  0086               	movwf	6
  6059  0348  0187               	clrf	7
  6060  0349  0878               	movf	??_KEYPAD_u8Read,w
  6061  034A  0081               	movwf	1
  6062                           
  6063                           ;keypad.c: 248:         spKEYPAD_status->u16KeyChkCnt = 1;
  6064  034B  0856               	movf	_spKEYPAD_status,w
  6065  034C  3E12               	addlw	18
  6066  034D  0086               	movwf	6
  6067  034E  0187               	clrf	7
  6068  034F  3001               	movlw	1
  6069  0350  3FC0               	movwi [0]fsr1
  6070  0351  3000               	movlw	0
  6071  0352  3FC1               	movwi [1]fsr1
  6072  0353                     i1l3318:	
  6073                           
  6074                           ;keypad.c: 241:         return 0xFF;
  6075  0353  30FF               	movlw	255
  6076  0354  0008               	return
  6077  0355                     i1l3322:	
  6078                           
  6079                           ;keypad.c: 244:     unsigned char u8KeyNo = u8Row * (4) + u8Col;
  6080  0355  0826               	movf	KEYPAD_u8Read@u8Row,w
  6081  0356  00F8               	movwf	??_KEYPAD_u8Read
  6082  0357  3001               	movlw	1
  6083  0358                     u198_25:	
  6084  0358  35F8               	lslf	??_KEYPAD_u8Read,f
  6085  0359  3EFF               	addlw	-1
  6086  035A  1D03               	skipz
  6087  035B  2B58               	goto	u198_25
  6088  035C  3578               	lslf	??_KEYPAD_u8Read,w
  6089  035D  0724               	addwf	KEYPAD_u8Read@u8Col,w
  6090  035E  00F9               	movwf	??_KEYPAD_u8Read+1
  6091  035F  0879               	movf	??_KEYPAD_u8Read+1,w
  6092  0360  00A5               	movwf	KEYPAD_u8Read@u8KeyNo
  6093                           
  6094                           ;keypad.c: 246:     if (u8KeyNo != spKEYPAD_status->u8BeforeKeyNo) {
  6095  0361  0856               	movf	_spKEYPAD_status,w
  6096  0362  3E11               	addlw	17
  6097  0363  0086               	movwf	6
  6098  0364  0187               	clrf	7
  6099  0365  0801               	movf	1,w
  6100  0366  0625               	xorwf	KEYPAD_u8Read@u8KeyNo,w
  6101  0367  1D03               	btfss	3,2
  6102  0368  2B43               	goto	i1l3326
  6103                           
  6104                           ;keypad.c: 252:     spKEYPAD_status->u16KeyChkCnt++;
  6105  0369  0856               	movf	_spKEYPAD_status,w
  6106  036A  3E12               	addlw	18
  6107  036B  0086               	movwf	6
  6108  036C  0187               	clrf	7
  6109  036D  3001               	movlw	1
  6110  036E  0781               	addwf	1,f
  6111  036F  3141               	addfsr 1,1
  6112  0370  1803               	skipnc
  6113  0371  0A81               	incf	1,f
  6114                           
  6115                           ;keypad.c: 254:     if (spKEYPAD_status->u16KeyChkCnt == (6) ||
  6116  0372  0856               	movf	_spKEYPAD_status,w
  6117  0373  3E12               	addlw	18
  6118  0374  0086               	movwf	6
  6119  0375  0187               	clrf	7
  6120  0376  0016               	moviw fsr1++
  6121  0377  3A06               	xorlw	6
  6122  0378  00F8               	movwf	??_KEYPAD_u8Read
  6123  0379  0016               	moviw fsr1++
  6124  037A  04F8               	iorwf	??_KEYPAD_u8Read,f
  6125  037B  1903               	btfsc	3,2
  6126  037C  2B93               	goto	i1l3338
  6127  037D  0856               	movf	_spKEYPAD_status,w
  6128  037E  3E12               	addlw	18
  6129  037F  0086               	movwf	6
  6130  0380  0187               	clrf	7
  6131  0381  0016               	moviw fsr1++
  6132  0382  3A80               	xorlw	128
  6133  0383  00F8               	movwf	??_KEYPAD_u8Read
  6134  0384  0016               	moviw fsr1++
  6135  0385  04F8               	iorwf	??_KEYPAD_u8Read,f
  6136  0386  1903               	btfsc	3,2
  6137  0387  2B93               	goto	i1l3338
  6138  0388  0856               	movf	_spKEYPAD_status,w
  6139  0389  3E12               	addlw	18
  6140  038A  0086               	movwf	6
  6141  038B  0187               	clrf	7
  6142  038C  0016               	moviw fsr1++
  6143  038D  00F8               	movwf	??_KEYPAD_u8Read
  6144  038E  0016               	moviw fsr1++
  6145  038F  3A01               	xorlw	1
  6146  0390  04F8               	iorwf	??_KEYPAD_u8Read,f
  6147  0391  1D03               	btfss	3,2
  6148  0392  2B95               	goto	i1l3344
  6149  0393                     i1l3338:	
  6150                           
  6151                           ;keypad.c: 256:         spKEYPAD_status->u16KeyChkCnt == (256)) {;keypad.c: 258:        
      +                           return u8KeyNo;
  6152  0393  0825               	movf	KEYPAD_u8Read@u8KeyNo,w
  6153  0394  0008               	return
  6154  0395                     i1l3344:	
  6155  0395  0856               	movf	_spKEYPAD_status,w
  6156  0396  3E12               	addlw	18
  6157  0397  0086               	movwf	6
  6158  0398  0187               	clrf	7
  6159  0399  0016               	moviw fsr1++
  6160  039A  3A0C               	xorlw	12
  6161  039B  00F8               	movwf	??_KEYPAD_u8Read
  6162  039C  0016               	moviw fsr1++
  6163  039D  3A01               	xorlw	1
  6164  039E  04F8               	iorwf	??_KEYPAD_u8Read,f
  6165  039F  1D03               	btfss	3,2
  6166  03A0  2B53               	goto	i1l3318
  6167                           
  6168                           ;keypad.c: 260:         spKEYPAD_status->u16KeyChkCnt = (256);
  6169  03A1  0856               	movf	_spKEYPAD_status,w
  6170  03A2  3E12               	addlw	18
  6171  03A3  0086               	movwf	6
  6172  03A4  0187               	clrf	7
  6173  03A5  3000               	movlw	0
  6174  03A6  3FC0               	movwi [0]fsr1
  6175  03A7  3001               	movlw	1
  6176  03A8  3FC1               	movwi [1]fsr1
  6177  03A9  2B93               	goto	i1l3338
  6178  03AA                     __end_of_KEYPAD_u8Read:	
  6179                           
  6180                           	psect	text39
  6181  0FBB                     __ptext39:	
  6182 ;; *************** function _readColumn *****************
  6183 ;; Defined at:
  6184 ;;		line 350 in file "keypad.c"
  6185 ;; Parameters:    Size  Location     Type
  6186 ;;		None
  6187 ;; Auto vars:     Size  Location     Type
  6188 ;;  u16PinMap       2    5[COMMON] unsigned int 
  6189 ;;  u8Col           1    7[COMMON] unsigned char 
  6190 ;;  u8Port          1    4[COMMON] unsigned char 
  6191 ;;  portB           1    3[COMMON] unsigned char 
  6192 ;;  portA           1    2[COMMON] unsigned char 
  6193 ;; Return value:  Size  Location     Type
  6194 ;;                  1    wreg      unsigned char 
  6195 ;; Registers used:
  6196 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6197 ;; Tracked objects:
  6198 ;;		On entry : 0/0
  6199 ;;		On exit  : 0/0
  6200 ;;		Unchanged: 0/0
  6201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6202 ;;      Params:         0       0       0       0       0       0
  6203 ;;      Locals:         6       0       0       0       0       0
  6204 ;;      Temps:          2       0       0       0       0       0
  6205 ;;      Totals:         8       0       0       0       0       0
  6206 ;;Total ram usage:        8 bytes
  6207 ;; Hardware stack levels used:    1
  6208 ;; This function calls:
  6209 ;;		Nothing
  6210 ;; This function is called by:
  6211 ;;		_KEYPAD_u8Read
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215                           
  6216                           ;psect for function _readColumn
  6217  0FBB                     _readColumn:	
  6218                           
  6219                           ;keypad.c: 352:     unsigned char portA = PORTA;
  6220                           
  6221                           ;incstack = 0
  6222                           ; Regs used in _readColumn: [wreg-fsr1h+status,2+status,0]
  6223  0FBB  0020               	movlb	0	; select bank0
  6224  0FBC  080C               	movf	12,w	;volatile
  6225  0FBD  00F0               	movwf	??_readColumn
  6226  0FBE  0870               	movf	??_readColumn,w
  6227  0FBF  00F2               	movwf	readColumn@portA
  6228                           
  6229                           ;keypad.c: 354:     unsigned char portB = PORTB;
  6230  0FC0  080D               	movf	13,w	;volatile
  6231  0FC1  00F0               	movwf	??_readColumn
  6232  0FC2  0870               	movf	??_readColumn,w
  6233  0FC3  00F3               	movwf	readColumn@portB
  6234                           
  6235                           ;keypad.c: 360:     unsigned int u16PinMap;;keypad.c: 361:     unsigned char u8Port;;key
      +                          pad.c: 362:     unsigned char u8Col;;keypad.c: 363:     for (u8Col = 0; u8Col < (4); u8C
      +                          ol++) {
  6236  0FC4  01F7               	clrf	readColumn@u8Col
  6237  0FC5                     i1l3144:	
  6238                           
  6239                           ;keypad.c: 364:         u16PinMap = spKEYPAD_status->u16PinCols[u8Col];
  6240  0FC5  3577               	lslf	readColumn@u8Col,w
  6241  0FC6  0756               	addwf	_spKEYPAD_status,w
  6242  0FC7  00F0               	movwf	??_readColumn
  6243  0FC8  0A70               	incf	??_readColumn,w
  6244  0FC9  0086               	movwf	6
  6245  0FCA  0187               	clrf	7
  6246  0FCB  3F40               	moviw [0]fsr1
  6247  0FCC  00F5               	movwf	readColumn@u16PinMap
  6248  0FCD  3F41               	moviw [1]fsr1
  6249  0FCE  00F6               	movwf	readColumn@u16PinMap+1
  6250                           
  6251                           ;keypad.c: 365:         switch (u16PinMap & 0xFF00) {
  6252  0FCF  2FD9               	goto	i1l3156
  6253  0FD0                     i1l3146:	
  6254                           
  6255                           ;keypad.c: 367:                 u8Port = portA;
  6256  0FD0  0872               	movf	readColumn@portA,w
  6257  0FD1  2FD3               	goto	L1
  6258  0FD2                     i1l3148:	
  6259                           ;keypad.c: 368:                 break;
  6260                           
  6261                           
  6262                           ;keypad.c: 371:                 u8Port = portB;
  6263  0FD2  0873               	movf	readColumn@portB,w
  6264  0FD3                     L1:	
  6265  0FD3  00F0               	movwf	??_readColumn
  6266  0FD4  0870               	movf	??_readColumn,w
  6267  0FD5  00F4               	movwf	readColumn@u8Port
  6268                           
  6269                           ;keypad.c: 372:                 break;
  6270  0FD6  2FF1               	goto	i1l3158
  6271  0FD7                     i1l3150:	
  6272                           
  6273                           ;keypad.c: 381:                 return 0xFF;
  6274  0FD7  30FF               	movlw	255
  6275  0FD8  0008               	return
  6276  0FD9                     i1l3156:	
  6277  0FD9  3000               	movlw	0
  6278  0FDA  0575               	andwf	readColumn@u16PinMap,w
  6279  0FDB  00F0               	movwf	??_readColumn
  6280  0FDC  30FF               	movlw	255
  6281  0FDD  0576               	andwf	readColumn@u16PinMap+1,w
  6282  0FDE  00F1               	movwf	??_readColumn+1
  6283                           
  6284                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6285                           ; Switch size 1, requested type "simple"
  6286                           ; Number of cases is 2, Range of values is 0 to 1
  6287                           ; switch strategies available:
  6288                           ; Name         Instructions Cycles
  6289                           ; simple_byte            7     4 (average)
  6290                           ; direct_byte           10     6 (fixed)
  6291                           ; jumptable            260     6 (fixed)
  6292                           ;	Chosen strategy is simple_byte
  6293  0FDF  0871               	movf	??_readColumn+1,w
  6294  0FE0  3A00               	xorlw	0	; case 0
  6295  0FE1  1903               	skipnz
  6296  0FE2  2FE7               	goto	i1l5858
  6297  0FE3  3A01               	xorlw	1	; case 1
  6298  0FE4  1903               	skipnz
  6299  0FE5  2FEC               	goto	i1l5860
  6300  0FE6  2FD7               	goto	i1l3150
  6301  0FE7                     i1l5858:	
  6302                           
  6303                           ; Switch size 1, requested type "simple"
  6304                           ; Number of cases is 1, Range of values is 0 to 0
  6305                           ; switch strategies available:
  6306                           ; Name         Instructions Cycles
  6307                           ; simple_byte            4     3 (average)
  6308                           ; direct_byte            8     6 (fixed)
  6309                           ; jumptable            260     6 (fixed)
  6310                           ;	Chosen strategy is simple_byte
  6311  0FE7  0870               	movf	??_readColumn,w
  6312  0FE8  3A00               	xorlw	0	; case 0
  6313  0FE9  1903               	skipnz
  6314  0FEA  2FD0               	goto	i1l3146
  6315  0FEB  2FD7               	goto	i1l3150
  6316  0FEC                     i1l5860:	
  6317                           
  6318                           ; Switch size 1, requested type "simple"
  6319                           ; Number of cases is 1, Range of values is 0 to 0
  6320                           ; switch strategies available:
  6321                           ; Name         Instructions Cycles
  6322                           ; simple_byte            4     3 (average)
  6323                           ; direct_byte            8     6 (fixed)
  6324                           ; jumptable            260     6 (fixed)
  6325                           ;	Chosen strategy is simple_byte
  6326  0FEC  0870               	movf	??_readColumn,w
  6327  0FED  3A00               	xorlw	0	; case 0
  6328  0FEE  1903               	skipnz
  6329  0FEF  2FD2               	goto	i1l3148
  6330  0FF0  2FD7               	goto	i1l3150
  6331  0FF1                     i1l3158:	
  6332                           
  6333                           ;keypad.c: 384:         if ((u8Port & (unsigned char)u16PinMap) != 0x00) {
  6334  0FF1  0874               	movf	readColumn@u8Port,w
  6335  0FF2  0575               	andwf	readColumn@u16PinMap,w
  6336  0FF3  1903               	btfsc	3,2
  6337  0FF4  2FF7               	goto	i1l3164
  6338                           
  6339                           ;keypad.c: 385:             return u8Col;
  6340  0FF5  0877               	movf	readColumn@u8Col,w
  6341  0FF6  0008               	return
  6342  0FF7                     i1l3164:	
  6343                           
  6344                           ;keypad.c: 387:     }
  6345  0FF7  3001               	movlw	1
  6346  0FF8  00F0               	movwf	??_readColumn
  6347  0FF9  0870               	movf	??_readColumn,w
  6348  0FFA  07F7               	addwf	readColumn@u8Col,f
  6349  0FFB  3004               	movlw	4
  6350  0FFC  0277               	subwf	readColumn@u8Col,w
  6351  0FFD  1803               	btfsc	3,0
  6352  0FFE  2FD7               	goto	i1l3150
  6353  0FFF  2FC5               	goto	i1l3144
  6354  1000                     __end_of_readColumn:	
  6355                           
  6356                           	psect	text40
  6357  0DF3                     __ptext40:	
  6358 ;; *************** function _I2C_vSlaveIsrSSP1 *****************
  6359 ;; Defined at:
  6360 ;;		line 492 in file "i2cUtil.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;		None
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;		None
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      void 
  6367 ;; Registers used:
  6368 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6374 ;;      Params:         0       0       0       0       0       0
  6375 ;;      Locals:         0       0       0       0       0       0
  6376 ;;      Temps:          0       2       0       0       0       0
  6377 ;;      Totals:         0       2       0       0       0       0
  6378 ;;Total ram usage:        2 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    4
  6381 ;; This function calls:
  6382 ;;		_ssp1_vCallback
  6383 ;;		_vDmyCallback
  6384 ;; This function is called by:
  6385 ;;		_ISR
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           
  6390                           ;psect for function _I2C_vSlaveIsrSSP1
  6391  0DF3                     _I2C_vSlaveIsrSSP1:	
  6392                           
  6393                           ;i2cUtil.c: 497:     if (SSP1IF == 1) {
  6394                           
  6395                           ;incstack = 0
  6396                           ; Regs used in _I2C_vSlaveIsrSSP1: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6397  0DF3  0020               	movlb	0	; select bank0
  6398  0DF4  1D91               	btfss	17,3	;volatile
  6399  0DF5  2E11               	goto	i1l4012
  6400                           
  6401                           ;i2cUtil.c: 498:         SSP1CON2bits.ACKDT = 0x00;
  6402  0DF6  0024               	movlb	4	; select bank4
  6403  0DF7  1296               	bcf	22,5	;volatile
  6404                           
  6405                           ;i2cUtil.c: 499:         pvSSP1Func(1, ((SSP1STAT & 0b00100101) | (SSP1CON2 & 0b01000000
      +                          )));
  6406  0DF8  0020               	movlb	0	; select bank0
  6407  0DF9  01A8               	clrf	vDmyCallback@u8BusNo
  6408  0DFA  0AA8               	incf	vDmyCallback@u8BusNo,f
  6409  0DFB  3040               	movlw	64
  6410  0DFC  0024               	movlb	4	; select bank4
  6411  0DFD  0516               	andwf	22,w	;volatile
  6412  0DFE  0020               	movlb	0	; select bank0
  6413  0DFF  00AD               	movwf	??_I2C_vSlaveIsrSSP1
  6414  0E00  0024               	movlb	4	; select bank4
  6415  0E01  0814               	movf	20,w	;volatile
  6416  0E02  3925               	andlw	37
  6417  0E03  0020               	movlb	0	; select bank0
  6418  0E04  042D               	iorwf	??_I2C_vSlaveIsrSSP1,w
  6419  0E05  00AE               	movwf	??_I2C_vSlaveIsrSSP1+1
  6420  0E06  082E               	movf	??_I2C_vSlaveIsrSSP1+1,w
  6421  0E07  00A9               	movwf	vDmyCallback@u8EvtType
  6422  0E08  085D               	movf	_pvSSP1Func+1,w
  6423  0E09  008A               	movwf	10
  6424  0E0A  085C               	movf	_pvSSP1Func,w
  6425  0E0B  000A               	callw
  6426  0E0C  318D               	pagesel	$
  6427                           
  6428                           ;i2cUtil.c: 500:         SSP1IF = 0;
  6429  0E0D  0020               	movlb	0	; select bank0
  6430  0E0E  1191               	bcf	17,3	;volatile
  6431                           
  6432                           ;i2cUtil.c: 501:         SSP1CON1bits.CKP = 1;
  6433  0E0F  0024               	movlb	4	; select bank4
  6434  0E10  1615               	bsf	21,4	;volatile
  6435  0E11                     i1l4012:	
  6436                           
  6437                           ;i2cUtil.c: 504:     if (BCL1IF == 1) {
  6438  0E11  0020               	movlb	0	; select bank0
  6439  0E12  1D92               	btfss	18,3	;volatile
  6440  0E13  0008               	return
  6441                           
  6442                           ;i2cUtil.c: 505:         pvSSP1Func(1, I2C_SLV_EVT_BUS_ERROR);
  6443  0E14  01A8               	clrf	vDmyCallback@u8BusNo
  6444  0E15  0AA8               	incf	vDmyCallback@u8BusNo,f
  6445  0E16  30FF               	movlw	255
  6446  0E17  00AD               	movwf	??_I2C_vSlaveIsrSSP1
  6447  0E18  082D               	movf	??_I2C_vSlaveIsrSSP1,w
  6448  0E19  00A9               	movwf	vDmyCallback@u8EvtType
  6449  0E1A  085D               	movf	_pvSSP1Func+1,w
  6450  0E1B  008A               	movwf	10
  6451  0E1C  085C               	movf	_pvSSP1Func,w
  6452  0E1D  000A               	callw
  6453  0E1E  318D               	pagesel	$
  6454                           
  6455                           ;i2cUtil.c: 507:         BCL1IF = 0;
  6456  0E1F  0020               	movlb	0	; select bank0
  6457  0E20  1192               	bcf	18,3	;volatile
  6458  0E21  0008               	return
  6459  0E22                     __end_of_I2C_vSlaveIsrSSP1:	
  6460                           
  6461                           	psect	text41
  6462  0E22                     __ptext41:	
  6463 ;; *************** function _ssp1_vCallback *****************
  6464 ;; Defined at:
  6465 ;;		line 631 in file "InterfaceMain.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;  u8BusNo         1    8[BANK0 ] unsigned char 
  6468 ;;  u8EvtType       1    9[BANK0 ] unsigned char 
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;  u8Data          1    0        unsigned char 
  6471 ;; Return value:  Size  Location     Type
  6472 ;;                  1    wreg      void 
  6473 ;; Registers used:
  6474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6480 ;;      Params:         0       2       0       0       0       0
  6481 ;;      Locals:         0       1       0       0       0       0
  6482 ;;      Temps:          0       2       0       0       0       0
  6483 ;;      Totals:         0       5       0       0       0       0
  6484 ;;Total ram usage:        5 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; Hardware stack levels required when called:    3
  6487 ;; This function calls:
  6488 ;;		_ssp1_u8ReadData
  6489 ;;		_ssp1_vWriteData
  6490 ;; This function is called by:
  6491 ;;		_main
  6492 ;;		_I2C_vSlaveIsrSSP1
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           
  6497                           ;psect for function _ssp1_vCallback
  6498  0E22                     _ssp1_vCallback:	
  6499                           
  6500                           ;InterfaceMain.c: 633:     switch (u8EvtType) {
  6501                           
  6502                           ;incstack = 0
  6503                           ; Regs used in _ssp1_vCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6504  0E22  2E37               	goto	i1l3780
  6505  0E23                     i1l3762:	
  6506  0E23  0024               	movlb	4	; select bank4
  6507  0E24  0811               	movf	17,w	;volatile
  6508                           
  6509                           ;InterfaceMain.c: 639:             sAppStatus.bWriteStartFlg = (1);
  6510  0E25  0021               	movlb	1	; select bank1
  6511  0E26  01CE               	clrf	(_sAppStatus^(0+128)+1)
  6512  0E27  0ACE               	incf	(_sAppStatus^(0+128)+1),f
  6513                           
  6514                           ;InterfaceMain.c: 640:             break;
  6515  0E28  0008               	return
  6516  0E29                     i1l3766:	
  6517                           
  6518                           ;InterfaceMain.c: 643:             ssp1_vWriteData((unsigned char)SSP1BUF);
  6519  0E29  0024               	movlb	4	; select bank4
  6520  0E2A  0811               	movf	17,w	;volatile
  6521  0E2B  3180  203B         	fcall	_ssp1_vWriteData
  6522  0E2D                     i1l3768:	
  6523                           
  6524                           ;InterfaceMain.c: 645:             sAppStatus.bWriteStartFlg = (0);
  6525  0E2D  0021               	movlb	1	; select bank1
  6526  0E2E  01CE               	clrf	(_sAppStatus^(0+128)+1)
  6527                           
  6528                           ;InterfaceMain.c: 646:             break;
  6529  0E2F  0008               	return
  6530  0E30                     i1l3770:	
  6531  0E30  0024               	movlb	4	; select bank4
  6532  0E31  0811               	movf	17,w	;volatile
  6533  0E32                     i1l3772:	
  6534                           
  6535                           ;InterfaceMain.c: 652:             SSP1BUF = ssp1_u8ReadData();
  6536  0E32  3185  2521         	fcall	_ssp1_u8ReadData
  6537  0E34  0024               	movlb	4	; select bank4
  6538  0E35  0091               	movwf	17	;volatile
  6539                           
  6540                           ;InterfaceMain.c: 653:             break;
  6541  0E36  0008               	return
  6542  0E37                     i1l3780:	
  6543  0E37  0020               	movlb	0	; select bank0
  6544  0E38  0829               	movf	ssp1_vCallback@u8EvtType,w
  6545  0E39  00AA               	movwf	??_ssp1_vCallback
  6546  0E3A  01AB               	clrf	??_ssp1_vCallback+1
  6547                           
  6548                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6549                           ; Switch size 1, requested type "simple"
  6550                           ; Number of cases is 1, Range of values is 0 to 0
  6551                           ; switch strategies available:
  6552                           ; Name         Instructions Cycles
  6553                           ; simple_byte            4     3 (average)
  6554                           ; direct_byte            8     6 (fixed)
  6555                           ; jumptable            260     6 (fixed)
  6556                           ;	Chosen strategy is simple_byte
  6557  0E3B  082B               	movf	??_ssp1_vCallback+1,w
  6558  0E3C  3A00               	xorlw	0	; case 0
  6559  0E3D  1903               	skipnz
  6560  0E3E  2E40               	goto	i1l5862
  6561  0E3F  2E2D               	goto	i1l3768
  6562  0E40                     i1l5862:	
  6563                           
  6564                           ; Switch size 1, requested type "simple"
  6565                           ; Number of cases is 5, Range of values is 1 to 100
  6566                           ; switch strategies available:
  6567                           ; Name         Instructions Cycles
  6568                           ; simple_byte           16     9 (average)
  6569                           ; direct_byte          209     9 (fixed)
  6570                           ; jumptable            263     9 (fixed)
  6571                           ;	Chosen strategy is simple_byte
  6572  0E40  082A               	movf	??_ssp1_vCallback,w
  6573  0E41  3A01               	xorlw	1	; case 1
  6574  0E42  1903               	skipnz
  6575  0E43  2E23               	goto	i1l3762
  6576  0E44  3A04               	xorlw	4	; case 5
  6577  0E45  1903               	skipnz
  6578  0E46  2E30               	goto	i1l3770
  6579  0E47  3A24               	xorlw	36	; case 33
  6580  0E48  1903               	skipnz
  6581  0E49  2E29               	goto	i1l3766
  6582  0E4A  3A05               	xorlw	5	; case 36
  6583  0E4B  1903               	skipnz
  6584  0E4C  2E32               	goto	i1l3772
  6585  0E4D  3A40               	xorlw	64	; case 100
  6586  0E4E  1903               	skipnz
  6587  0E4F  2E51               	goto	i1l170
  6588  0E50  2E2D               	goto	i1l3768
  6589  0E51                     i1l170:	
  6590  0E51  0008               	return
  6591  0E52                     __end_of_ssp1_vCallback:	
  6592                           
  6593                           	psect	text42
  6594  0003                     __ptext42:	
  6595 ;; *************** function _vDmyCallback *****************
  6596 ;; Defined at:
  6597 ;;		line 636 in file "i2cUtil.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;  u8BusNo         1    8[BANK0 ] unsigned char 
  6600 ;;  u8EvtType       1    9[BANK0 ] unsigned char 
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;		None
  6603 ;; Return value:  Size  Location     Type
  6604 ;;                  1    wreg      void 
  6605 ;; Registers used:
  6606 ;;		None
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6612 ;;      Params:         0       2       0       0       0       0
  6613 ;;      Locals:         0       0       0       0       0       0
  6614 ;;      Temps:          0       0       0       0       0       0
  6615 ;;      Totals:         0       2       0       0       0       0
  6616 ;;Total ram usage:        2 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; This function calls:
  6619 ;;		Nothing
  6620 ;; This function is called by:
  6621 ;;		_I2C_vSlaveIsrSSP2
  6622 ;;		_I2C_vSlaveIsrSSP1
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           
  6627                           ;psect for function _vDmyCallback
  6628  0003                     _vDmyCallback:	
  6629                           
  6630                           ;i2cUtil.c: 637:     return;
  6631                           
  6632                           ;incstack = 0
  6633                           ; Regs used in _vDmyCallback: []
  6634  0003  0008               	return
  6635  0004                     __end_of_vDmyCallback:	
  6636                           
  6637                           	psect	text43
  6638  003B                     __ptext43:	
  6639 ;; *************** function _ssp1_vWriteData *****************
  6640 ;; Defined at:
  6641 ;;		line 683 in file "InterfaceMain.c"
  6642 ;; Parameters:    Size  Location     Type
  6643 ;;  u8Data          1    wreg     unsigned char 
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;  u8Data          1    7[BANK0 ] unsigned char 
  6646 ;;  u8Addr          1    6[BANK0 ] unsigned char 
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  1    wreg      void 
  6649 ;; Registers used:
  6650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6656 ;;      Params:         0       0       0       0       0       0
  6657 ;;      Locals:         0       2       0       0       0       0
  6658 ;;      Temps:          0       6       0       0       0       0
  6659 ;;      Totals:         0       8       0       0       0       0
  6660 ;;Total ram usage:        8 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    2
  6663 ;; This function calls:
  6664 ;;		_evt_vSetDrawEvent
  6665 ;;		_evt_vSetEventMap
  6666 ;;		i1_memset
  6667 ;; This function is called by:
  6668 ;;		_ssp1_vCallback
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           
  6673                           ;psect for function _ssp1_vWriteData
  6674  003B                     _ssp1_vWriteData:	
  6675                           
  6676                           ;incstack = 0
  6677                           ; Regs used in _ssp1_vWriteData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6678                           ;ssp1_vWriteData@u8Data stored from wreg
  6679  003B  0020               	movlb	0	; select bank0
  6680  003C  00A7               	movwf	ssp1_vWriteData@u8Data
  6681                           
  6682                           ;InterfaceMain.c: 687:     if (sAppStatus.bWriteStartFlg) {
  6683  003D  0021               	movlb	1	; select bank1
  6684  003E  084E               	movf	(_sAppStatus^(0+128)+1),w
  6685  003F  1903               	btfsc	3,2
  6686  0040  284F               	goto	i1l3374
  6687                           
  6688                           ;InterfaceMain.c: 689:         if (u8Data < (0xA7)) {
  6689  0041  30A7               	movlw	167
  6690  0042  0020               	movlb	0	; select bank0
  6691  0043  0227               	subwf	ssp1_vWriteData@u8Data,w
  6692  0044  1803               	skipnc
  6693  0045  284C               	goto	i1l174
  6694                           
  6695                           ;InterfaceMain.c: 691:             sAppStatus.u8MapAddr = u8Data;
  6696  0046  0827               	movf	ssp1_vWriteData@u8Data,w
  6697  0047  00A0               	movwf	??_ssp1_vWriteData
  6698  0048  0820               	movf	??_ssp1_vWriteData,w
  6699  0049  0021               	movlb	1	; select bank1
  6700  004A  00CF               	movwf	(_sAppStatus^(0+128)+2)
  6701                           
  6702                           ;InterfaceMain.c: 692:         } else {
  6703  004B  0008               	return
  6704  004C                     i1l174:	
  6705                           
  6706                           ;InterfaceMain.c: 695:             SSP1CON2bits.ACKDT = 0x01;
  6707  004C  0024               	movlb	4	; select bank4
  6708  004D  1696               	bsf	22,5	;volatile
  6709  004E  0008               	return
  6710  004F                     i1l3374:	
  6711                           
  6712                           ;InterfaceMain.c: 705:     if (sAppStatus.u8MapAddr >= (0xA7)) {
  6713  004F  30A7               	movlw	167
  6714  0050  024F               	subwf	(_sAppStatus^(0+128)+2),w
  6715  0051  1C03               	skipc
  6716  0052  29D8               	goto	i1l3492
  6717                           
  6718                           ;InterfaceMain.c: 707:         SSP1CON2bits.ACKDT = 0x01;
  6719  0053  0024               	movlb	4	; select bank4
  6720  0054  1696               	bsf	22,5	;volatile
  6721                           
  6722                           ;InterfaceMain.c: 709:         return;
  6723  0055  0008               	return
  6724  0056                     i1l3378:	
  6725                           
  6726                           ;InterfaceMain.c: 720:             sMemoryMap.u8KeyValue = u8Data;
  6727  0056  30CA               	movlw	202
  6728  0057  0086               	movwf	6
  6729  0058  3020               	movlw	32
  6730  0059  0087               	movwf	7
  6731  005A  0827               	movf	ssp1_vWriteData@u8Data,w
  6732  005B  0081               	movwf	1
  6733                           
  6734                           ;InterfaceMain.c: 721:             break;
  6735  005C  29F8               	goto	i1l3494
  6736  005D                     i1l3380:	
  6737                           
  6738                           ;InterfaceMain.c: 724:             if (u8Data > 0x03) {
  6739  005D  3004               	movlw	4
  6740  005E  0227               	subwf	ssp1_vWriteData@u8Data,w
  6741  005F  1C03               	skipc
  6742  0060  2864               	goto	i1l3384
  6743                           
  6744                           ;InterfaceMain.c: 726:                 SSP1CON2bits.ACKDT = 0x01;
  6745  0061  0024               	movlb	4	; select bank4
  6746  0062  1696               	bsf	22,5	;volatile
  6747                           
  6748                           ;InterfaceMain.c: 728:                 return;
  6749  0063  0008               	return
  6750  0064                     i1l3384:	
  6751                           
  6752                           ;InterfaceMain.c: 731:             if (sMemoryMap.u8Power != u8Data) {
  6753  0064  30C9               	movlw	201
  6754  0065  0086               	movwf	6
  6755  0066  3020               	movlw	32
  6756  0067  0087               	movwf	7
  6757  0068  3142               	addfsr 1,2
  6758  0069  0801               	movf	1,w
  6759  006A  0627               	xorwf	ssp1_vWriteData@u8Data,w
  6760  006B  1903               	skipnz
  6761  006C  29F8               	goto	i1l3494
  6762                           
  6763                           ;InterfaceMain.c: 733:                 if ((u8Data & 0x01) == 0x00) {
  6764  006D  1827               	btfsc	ssp1_vWriteData@u8Data,0
  6765  006E  28B9               	goto	i1l3404
  6766                           
  6767                           ;InterfaceMain.c: 735:                     sMemoryMap.u8Power = 0x00;
  6768  006F  30C9               	movlw	201
  6769  0070  0086               	movwf	6
  6770  0071  3020               	movlw	32
  6771  0072  0087               	movwf	7
  6772  0073  3142               	addfsr 1,2
  6773  0074  0181               	clrf	1
  6774                           
  6775                           ;InterfaceMain.c: 736:                     sMemoryMap.u8Contrast = (0x28);
  6776  0075  30CC               	movlw	204
  6777  0076  0086               	movwf	6
  6778  0077  3020               	movlw	32
  6779  0078  0087               	movwf	7
  6780  0079  3028               	movlw	40
  6781  007A  0081               	movwf	1
  6782                           
  6783                           ;InterfaceMain.c: 737:                     sMemoryMap.u8CursorType = 0x00;
  6784  007B  30C9               	movlw	201
  6785  007C  0086               	movwf	6
  6786  007D  3020               	movlw	32
  6787  007E  0087               	movwf	7
  6788  007F  3144               	addfsr 1,4
  6789  0080  0181               	clrf	1
  6790                           
  6791                           ;InterfaceMain.c: 738:                     sMemoryMap.u8CursorRow = 0x00;
  6792  0081  30C9               	movlw	201
  6793  0082  0086               	movwf	6
  6794  0083  3020               	movlw	32
  6795  0084  0087               	movwf	7
  6796  0085  3145               	addfsr 1,5
  6797  0086  0181               	clrf	1
  6798                           
  6799                           ;InterfaceMain.c: 739:                     sMemoryMap.u8CursorCol = 0x00;
  6800  0087  30C9               	movlw	201
  6801  0088  0086               	movwf	6
  6802  0089  3020               	movlw	32
  6803  008A  0087               	movwf	7
  6804  008B  3146               	addfsr 1,6
  6805  008C  0181               	clrf	1
  6806                           
  6807                           ;InterfaceMain.c: 740:                     memset(sMemoryMap.u8DispRam, 0x00, (80));
  6808  008D  30D0               	movlw	208
  6809  008E  00F0               	movwf	i1memset@dest
  6810  008F  3020               	movlw	32
  6811  0090  00F1               	movwf	i1memset@dest+1
  6812  0091  3000               	movlw	0
  6813  0092  00F2               	movwf	i1memset@c
  6814  0093  00F3               	movwf	i1memset@c+1
  6815  0094  3050               	movlw	80
  6816  0095  00F4               	movwf	i1memset@n
  6817  0096  3000               	movlw	0
  6818  0097  00F5               	movwf	i1memset@n+1
  6819  0098  3184  2466  3180   	fcall	i1_memset
  6820                           
  6821                           ;InterfaceMain.c: 741:                     memset(sMemoryMap.u8CGRam, 0xE0, (64));
  6822  009B  3020               	movlw	32
  6823  009C  00F0               	movwf	i1memset@dest
  6824  009D  3021               	movlw	33
  6825  009E  00F1               	movwf	i1memset@dest+1
  6826  009F  30E0               	movlw	224
  6827  00A0  00F2               	movwf	i1memset@c
  6828  00A1  3000               	movlw	0
  6829  00A2  00F3               	movwf	i1memset@c+1
  6830  00A3  3040               	movlw	64
  6831  00A4  00F4               	movwf	i1memset@n
  6832  00A5  3000               	movlw	0
  6833  00A6  00F5               	movwf	i1memset@n+1
  6834  00A7  3184  2466  3180   	fcall	i1_memset
  6835                           
  6836                           ;InterfaceMain.c: 742:                     memset(sMemoryMap.u8IconRam, 0x00, (16));
  6837  00AA  3060               	movlw	96
  6838  00AB  00F0               	movwf	i1memset@dest
  6839  00AC  3021               	movlw	33
  6840  00AD  00F1               	movwf	i1memset@dest+1
  6841  00AE  3000               	movlw	0
  6842  00AF  00F2               	movwf	i1memset@c
  6843  00B0  00F3               	movwf	i1memset@c+1
  6844  00B1  3010               	movlw	16
  6845  00B2  00F4               	movwf	i1memset@n
  6846  00B3  3000               	movlw	0
  6847  00B4  00F5               	movwf	i1memset@n+1
  6848  00B5  3184  2466  3180   	fcall	i1_memset
  6849                           
  6850                           ;InterfaceMain.c: 743:                 } else {
  6851  00B8  28BF               	goto	i1l3406
  6852  00B9                     i1l3404:	
  6853                           
  6854                           ;InterfaceMain.c: 745:                     sMemoryMap.u8Power = u8Data;
  6855  00B9  30CB               	movlw	203
  6856  00BA  0086               	movwf	6
  6857  00BB  3020               	movlw	32
  6858  00BC  0087               	movwf	7
  6859  00BD  0827               	movf	ssp1_vWriteData@u8Data,w
  6860  00BE  0081               	movwf	1
  6861  00BF                     i1l3406:	
  6862                           
  6863                           ;InterfaceMain.c: 748:                 evt_vSetEventMap(EVT_PW_CONTRAST);
  6864  00BF  3002               	movlw	2
  6865  00C0  318C  2461  3180   	fcall	_evt_vSetEventMap
  6866  00C3  29F8               	goto	i1l3494
  6867  00C4                     i1l3408:	
  6868                           
  6869                           ;InterfaceMain.c: 753:             if (u8Data > (63)) {
  6870  00C4  3040               	movlw	64
  6871  00C5  0227               	subwf	ssp1_vWriteData@u8Data,w
  6872  00C6  1C03               	skipc
  6873  00C7  28CB               	goto	i1l3412
  6874                           
  6875                           ;InterfaceMain.c: 755:                 SSP1CON2bits.ACKDT = 0x01;
  6876  00C8  0024               	movlb	4	; select bank4
  6877  00C9  1696               	bsf	22,5	;volatile
  6878                           
  6879                           ;InterfaceMain.c: 757:                 return;
  6880  00CA  0008               	return
  6881  00CB                     i1l3412:	
  6882                           
  6883                           ;InterfaceMain.c: 760:             if (sMemoryMap.u8Contrast != u8Data) {
  6884  00CB  30C9               	movlw	201
  6885  00CC  0086               	movwf	6
  6886  00CD  3020               	movlw	32
  6887  00CE  0087               	movwf	7
  6888  00CF  3143               	addfsr 1,3
  6889  00D0  0801               	movf	1,w
  6890  00D1  0627               	xorwf	ssp1_vWriteData@u8Data,w
  6891  00D2  1903               	skipnz
  6892  00D3  29F8               	goto	i1l3494
  6893                           
  6894                           ;InterfaceMain.c: 762:                 sMemoryMap.u8Contrast = u8Data;
  6895  00D4  30CC               	movlw	204
  6896  00D5  0086               	movwf	6
  6897  00D6  3020               	movlw	32
  6898  00D7  0087               	movwf	7
  6899  00D8  0827               	movf	ssp1_vWriteData@u8Data,w
  6900  00D9  0081               	movwf	1
  6901                           
  6902                           ;InterfaceMain.c: 764:                 evt_vSetEventMap(EVT_PW_CONTRAST);
  6903  00DA  3002               	movlw	2
  6904  00DB  318C  2461  3180   	fcall	_evt_vSetEventMap
  6905  00DE  29F8               	goto	i1l3494
  6906  00DF                     i1l3418:	
  6907                           
  6908                           ;InterfaceMain.c: 770:             if (u8Data > 0x03) {
  6909  00DF  3004               	movlw	4
  6910  00E0  0227               	subwf	ssp1_vWriteData@u8Data,w
  6911  00E1  1C03               	skipc
  6912  00E2  28E6               	goto	i1l3422
  6913                           
  6914                           ;InterfaceMain.c: 772:                 SSP1CON2bits.ACKDT = 0x01;
  6915  00E3  0024               	movlb	4	; select bank4
  6916  00E4  1696               	bsf	22,5	;volatile
  6917                           
  6918                           ;InterfaceMain.c: 774:                 return;
  6919  00E5  0008               	return
  6920  00E6                     i1l3422:	
  6921                           
  6922                           ;InterfaceMain.c: 777:             if (sMemoryMap.u8CursorType != u8Data) {
  6923  00E6  30C9               	movlw	201
  6924  00E7  0086               	movwf	6
  6925  00E8  3020               	movlw	32
  6926  00E9  0087               	movwf	7
  6927  00EA  3144               	addfsr 1,4
  6928  00EB  0801               	movf	1,w
  6929  00EC  0627               	xorwf	ssp1_vWriteData@u8Data,w
  6930  00ED  1903               	skipnz
  6931  00EE  29F8               	goto	i1l3494
  6932                           
  6933                           ;InterfaceMain.c: 779:                 sMemoryMap.u8CursorType = u8Data;
  6934  00EF  30CD               	movlw	205
  6935  00F0  0086               	movwf	6
  6936  00F1  3020               	movlw	32
  6937  00F2  0087               	movwf	7
  6938  00F3  0827               	movf	ssp1_vWriteData@u8Data,w
  6939  00F4  0081               	movwf	1
  6940                           
  6941                           ;InterfaceMain.c: 781:                 evt_vSetEventMap(EVT_CURSOR_SET);
  6942  00F5  3004               	movlw	4
  6943  00F6  318C  2461  3180   	fcall	_evt_vSetEventMap
  6944  00F9  29F8               	goto	i1l3494
  6945  00FA                     i1l3428:	
  6946                           
  6947                           ;InterfaceMain.c: 787:             if (u8Data > (1)) {
  6948  00FA  3002               	movlw	2
  6949  00FB  0227               	subwf	ssp1_vWriteData@u8Data,w
  6950  00FC  1C03               	skipc
  6951  00FD  2901               	goto	i1l3432
  6952                           
  6953                           ;InterfaceMain.c: 789:                 SSP1CON2bits.ACKDT = 0x01;
  6954  00FE  0024               	movlb	4	; select bank4
  6955  00FF  1696               	bsf	22,5	;volatile
  6956                           
  6957                           ;InterfaceMain.c: 791:                 return;
  6958  0100  0008               	return
  6959  0101                     i1l3432:	
  6960                           
  6961                           ;InterfaceMain.c: 794:             if (sMemoryMap.u8CursorRow != u8Data) {
  6962  0101  30C9               	movlw	201
  6963  0102  0086               	movwf	6
  6964  0103  3020               	movlw	32
  6965  0104  0087               	movwf	7
  6966  0105  3145               	addfsr 1,5
  6967  0106  0801               	movf	1,w
  6968  0107  0627               	xorwf	ssp1_vWriteData@u8Data,w
  6969  0108  1903               	skipnz
  6970  0109  29F8               	goto	i1l3494
  6971                           
  6972                           ;InterfaceMain.c: 796:                 sMemoryMap.u8CursorRow = u8Data;
  6973  010A  30CE               	movlw	206
  6974  010B  0086               	movwf	6
  6975  010C  3020               	movlw	32
  6976  010D  0087               	movwf	7
  6977  010E  0827               	movf	ssp1_vWriteData@u8Data,w
  6978  010F  0081               	movwf	1
  6979                           
  6980                           ;InterfaceMain.c: 798:                 evt_vSetEventMap(EVT_CURSOR_DRAW);
  6981  0110  3008               	movlw	8
  6982  0111  318C  2461  3180   	fcall	_evt_vSetEventMap
  6983  0114  29F8               	goto	i1l3494
  6984  0115                     i1l3438:	
  6985                           
  6986                           ;InterfaceMain.c: 804:             if (u8Data > (39)) {
  6987  0115  3028               	movlw	40
  6988  0116  0227               	subwf	ssp1_vWriteData@u8Data,w
  6989  0117  1C03               	skipc
  6990  0118  291C               	goto	i1l3442
  6991                           
  6992                           ;InterfaceMain.c: 806:                 SSP1CON2bits.ACKDT = 0x01;
  6993  0119  0024               	movlb	4	; select bank4
  6994  011A  1696               	bsf	22,5	;volatile
  6995                           
  6996                           ;InterfaceMain.c: 808:                 return;
  6997  011B  0008               	return
  6998  011C                     i1l3442:	
  6999                           
  7000                           ;InterfaceMain.c: 811:             if (sMemoryMap.u8CursorCol != u8Data) {
  7001  011C  30C9               	movlw	201
  7002  011D  0086               	movwf	6
  7003  011E  3020               	movlw	32
  7004  011F  0087               	movwf	7
  7005  0120  3146               	addfsr 1,6
  7006  0121  0801               	movf	1,w
  7007  0122  0627               	xorwf	ssp1_vWriteData@u8Data,w
  7008  0123  1903               	skipnz
  7009  0124  29F8               	goto	i1l3494
  7010                           
  7011                           ;InterfaceMain.c: 813:                 sMemoryMap.u8CursorCol = u8Data;
  7012  0125  30CF               	movlw	207
  7013  0126  0086               	movwf	6
  7014  0127  3020               	movlw	32
  7015  0128  0087               	movwf	7
  7016  0129  0827               	movf	ssp1_vWriteData@u8Data,w
  7017  012A  0081               	movwf	1
  7018                           
  7019                           ;InterfaceMain.c: 815:                 evt_vSetEventMap(EVT_CURSOR_DRAW);
  7020  012B  3008               	movlw	8
  7021  012C  318C  2461  3180   	fcall	_evt_vSetEventMap
  7022  012F  29F8               	goto	i1l3494
  7023  0130                     i1l3448:	
  7024                           
  7025                           ;InterfaceMain.c: 820:             if (sAppStatus.u8MapAddr < (0x57)) {
  7026  0130  3057               	movlw	87
  7027  0131  0021               	movlb	1	; select bank1
  7028  0132  024F               	subwf	(_sAppStatus^(0+128)+2),w
  7029  0133  1803               	skipnc
  7030  0134  2964               	goto	i1l3460
  7031                           
  7032                           ;InterfaceMain.c: 822:                 u8Addr = sAppStatus.u8MapAddr - (0x07);
  7033  0135  084F               	movf	(_sAppStatus^(0+128)+2),w
  7034  0136  3EF9               	addlw	249
  7035  0137  0020               	movlb	0	; select bank0
  7036  0138  00A0               	movwf	??_ssp1_vWriteData
  7037  0139  0820               	movf	??_ssp1_vWriteData,w
  7038  013A  00A6               	movwf	ssp1_vWriteData@u8Addr
  7039                           
  7040                           ;InterfaceMain.c: 823:                 if (sMemoryMap.u8DispRam[u8Addr] == u8Data) {
  7041  013B  0826               	movf	ssp1_vWriteData@u8Addr,w
  7042  013C  00A0               	movwf	??_ssp1_vWriteData
  7043  013D  01A1               	clrf	??_ssp1_vWriteData+1
  7044  013E  30D0               	movlw	208
  7045  013F  00A2               	movwf	??_ssp1_vWriteData+2
  7046  0140  3020               	movlw	32
  7047  0141  00A3               	movwf	??_ssp1_vWriteData+3
  7048  0142  0820               	movf	??_ssp1_vWriteData,w
  7049  0143  0722               	addwf	??_ssp1_vWriteData+2,w
  7050  0144  0086               	movwf	6
  7051  0145  0821               	movf	??_ssp1_vWriteData+1,w
  7052  0146  3D23               	addwfc	??_ssp1_vWriteData+3,w
  7053  0147  0087               	movwf	7
  7054  0148  0801               	movf	1,w
  7055  0149  0627               	xorwf	ssp1_vWriteData@u8Data,w
  7056  014A  1903               	btfsc	3,2
  7057  014B  29F8               	goto	i1l3494
  7058                           
  7059                           ;InterfaceMain.c: 827:                 sMemoryMap.u8DispRam[u8Addr] = u8Data;
  7060  014C  0826               	movf	ssp1_vWriteData@u8Addr,w
  7061  014D  00A0               	movwf	??_ssp1_vWriteData
  7062  014E  01A1               	clrf	??_ssp1_vWriteData+1
  7063  014F  30D0               	movlw	208
  7064  0150  00A2               	movwf	??_ssp1_vWriteData+2
  7065  0151  3020               	movlw	32
  7066  0152  00A3               	movwf	??_ssp1_vWriteData+3
  7067  0153  0820               	movf	??_ssp1_vWriteData,w
  7068  0154  0722               	addwf	??_ssp1_vWriteData+2,w
  7069  0155  00A4               	movwf	??_ssp1_vWriteData+4
  7070  0156  0821               	movf	??_ssp1_vWriteData+1,w
  7071  0157  3D23               	addwfc	??_ssp1_vWriteData+3,w
  7072  0158  00A5               	movwf	??_ssp1_vWriteData+5
  7073  0159  0824               	movf	??_ssp1_vWriteData+4,w
  7074  015A  0086               	movwf	6
  7075  015B  0825               	movf	??_ssp1_vWriteData+5,w
  7076  015C  0087               	movwf	7
  7077  015D  0827               	movf	ssp1_vWriteData@u8Data,w
  7078  015E  0081               	movwf	1
  7079                           
  7080                           ;InterfaceMain.c: 829:                 evt_vSetDrawEvent(u8Addr);
  7081  015F  0826               	movf	ssp1_vWriteData@u8Addr,w
  7082  0160  318C  2454  3180   	fcall	_evt_vSetDrawEvent
  7083                           
  7084                           ;InterfaceMain.c: 830:             } else if (sAppStatus.u8MapAddr < (0x97)) {
  7085  0163  29F8               	goto	i1l3494
  7086  0164                     i1l3460:	
  7087  0164  3097               	movlw	151
  7088  0165  024F               	subwf	(_sAppStatus^(0+128)+2),w
  7089  0166  1803               	skipnc
  7090  0167  29A0               	goto	i1l3476
  7091                           
  7092                           ;InterfaceMain.c: 832:                 if (u8Data > 0x1F) {
  7093  0168  3020               	movlw	32
  7094  0169  0020               	movlb	0	; select bank0
  7095  016A  0227               	subwf	ssp1_vWriteData@u8Data,w
  7096  016B  1C03               	skipc
  7097  016C  2970               	goto	i1l3466
  7098                           
  7099                           ;InterfaceMain.c: 834:                     SSP1CON2bits.ACKDT = 0x01;
  7100  016D  0024               	movlb	4	; select bank4
  7101  016E  1696               	bsf	22,5	;volatile
  7102                           
  7103                           ;InterfaceMain.c: 836:                     return;
  7104  016F  0008               	return
  7105  0170                     i1l3466:	
  7106                           
  7107                           ;InterfaceMain.c: 839:                 u8Addr = sAppStatus.u8MapAddr - (0x57);
  7108  0170  0021               	movlb	1	; select bank1
  7109  0171  084F               	movf	(_sAppStatus^(0+128)+2),w
  7110  0172  3EA9               	addlw	169
  7111  0173  0020               	movlb	0	; select bank0
  7112  0174  00A0               	movwf	??_ssp1_vWriteData
  7113  0175  0820               	movf	??_ssp1_vWriteData,w
  7114  0176  00A6               	movwf	ssp1_vWriteData@u8Addr
  7115                           
  7116                           ;InterfaceMain.c: 840:                 if (sMemoryMap.u8CGRam[u8Addr] == u8Data) {
  7117  0177  0826               	movf	ssp1_vWriteData@u8Addr,w
  7118  0178  00A0               	movwf	??_ssp1_vWriteData
  7119  0179  01A1               	clrf	??_ssp1_vWriteData+1
  7120  017A  3020               	movlw	32
  7121  017B  00A2               	movwf	??_ssp1_vWriteData+2
  7122  017C  3021               	movlw	33
  7123  017D  00A3               	movwf	??_ssp1_vWriteData+3
  7124  017E  0820               	movf	??_ssp1_vWriteData,w
  7125  017F  0722               	addwf	??_ssp1_vWriteData+2,w
  7126  0180  0086               	movwf	6
  7127  0181  0821               	movf	??_ssp1_vWriteData+1,w
  7128  0182  3D23               	addwfc	??_ssp1_vWriteData+3,w
  7129  0183  0087               	movwf	7
  7130  0184  0801               	movf	1,w
  7131  0185  0627               	xorwf	ssp1_vWriteData@u8Data,w
  7132  0186  1903               	btfsc	3,2
  7133  0187  29F8               	goto	i1l3494
  7134                           
  7135                           ;InterfaceMain.c: 844:                 sMemoryMap.u8CGRam[u8Addr] = u8Data;
  7136  0188  0826               	movf	ssp1_vWriteData@u8Addr,w
  7137  0189  00A0               	movwf	??_ssp1_vWriteData
  7138  018A  01A1               	clrf	??_ssp1_vWriteData+1
  7139  018B  3020               	movlw	32
  7140  018C  00A2               	movwf	??_ssp1_vWriteData+2
  7141  018D  3021               	movlw	33
  7142  018E  00A3               	movwf	??_ssp1_vWriteData+3
  7143  018F  0820               	movf	??_ssp1_vWriteData,w
  7144  0190  0722               	addwf	??_ssp1_vWriteData+2,w
  7145  0191  00A4               	movwf	??_ssp1_vWriteData+4
  7146  0192  0821               	movf	??_ssp1_vWriteData+1,w
  7147  0193  3D23               	addwfc	??_ssp1_vWriteData+3,w
  7148  0194  00A5               	movwf	??_ssp1_vWriteData+5
  7149  0195  0824               	movf	??_ssp1_vWriteData+4,w
  7150  0196  0086               	movwf	6
  7151  0197  0825               	movf	??_ssp1_vWriteData+5,w
  7152  0198  0087               	movwf	7
  7153  0199  0827               	movf	ssp1_vWriteData@u8Data,w
  7154  019A  0081               	movwf	1
  7155                           
  7156                           ;InterfaceMain.c: 846:                 evt_vSetEventMap(EVT_SET_CGRAM);
  7157  019B  3040               	movlw	64
  7158  019C  318C  2461  3180   	fcall	_evt_vSetEventMap
  7159                           
  7160                           ;InterfaceMain.c: 847:             } else {
  7161  019F  29F8               	goto	i1l3494
  7162  01A0                     i1l3476:	
  7163                           
  7164                           ;InterfaceMain.c: 849:                 if (u8Data > 0x1F) {
  7165  01A0  3020               	movlw	32
  7166  01A1  0020               	movlb	0	; select bank0
  7167  01A2  0227               	subwf	ssp1_vWriteData@u8Data,w
  7168  01A3  1C03               	skipc
  7169  01A4  29A8               	goto	i1l3480
  7170                           
  7171                           ;InterfaceMain.c: 851:                     SSP1CON2bits.ACKDT = 0x01;
  7172  01A5  0024               	movlb	4	; select bank4
  7173  01A6  1696               	bsf	22,5	;volatile
  7174                           
  7175                           ;InterfaceMain.c: 853:                     return;
  7176  01A7  0008               	return
  7177  01A8                     i1l3480:	
  7178                           
  7179                           ;InterfaceMain.c: 856:                 u8Addr = sAppStatus.u8MapAddr - (0x97);
  7180  01A8  0021               	movlb	1	; select bank1
  7181  01A9  084F               	movf	(_sAppStatus^(0+128)+2),w
  7182  01AA  3E69               	addlw	105
  7183  01AB  0020               	movlb	0	; select bank0
  7184  01AC  00A0               	movwf	??_ssp1_vWriteData
  7185  01AD  0820               	movf	??_ssp1_vWriteData,w
  7186  01AE  00A6               	movwf	ssp1_vWriteData@u8Addr
  7187                           
  7188                           ;InterfaceMain.c: 857:                 if (sMemoryMap.u8IconRam[u8Addr] == u8Data) {
  7189  01AF  0826               	movf	ssp1_vWriteData@u8Addr,w
  7190  01B0  00A0               	movwf	??_ssp1_vWriteData
  7191  01B1  01A1               	clrf	??_ssp1_vWriteData+1
  7192  01B2  3060               	movlw	96
  7193  01B3  00A2               	movwf	??_ssp1_vWriteData+2
  7194  01B4  3021               	movlw	33
  7195  01B5  00A3               	movwf	??_ssp1_vWriteData+3
  7196  01B6  0820               	movf	??_ssp1_vWriteData,w
  7197  01B7  0722               	addwf	??_ssp1_vWriteData+2,w
  7198  01B8  0086               	movwf	6
  7199  01B9  0821               	movf	??_ssp1_vWriteData+1,w
  7200  01BA  3D23               	addwfc	??_ssp1_vWriteData+3,w
  7201  01BB  0087               	movwf	7
  7202  01BC  0801               	movf	1,w
  7203  01BD  0627               	xorwf	ssp1_vWriteData@u8Data,w
  7204  01BE  1903               	btfsc	3,2
  7205  01BF  29F8               	goto	i1l3494
  7206                           
  7207                           ;InterfaceMain.c: 861:                 sMemoryMap.u8IconRam[u8Addr] = u8Data;
  7208  01C0  0826               	movf	ssp1_vWriteData@u8Addr,w
  7209  01C1  00A0               	movwf	??_ssp1_vWriteData
  7210  01C2  01A1               	clrf	??_ssp1_vWriteData+1
  7211  01C3  3060               	movlw	96
  7212  01C4  00A2               	movwf	??_ssp1_vWriteData+2
  7213  01C5  3021               	movlw	33
  7214  01C6  00A3               	movwf	??_ssp1_vWriteData+3
  7215  01C7  0820               	movf	??_ssp1_vWriteData,w
  7216  01C8  0722               	addwf	??_ssp1_vWriteData+2,w
  7217  01C9  00A4               	movwf	??_ssp1_vWriteData+4
  7218  01CA  0821               	movf	??_ssp1_vWriteData+1,w
  7219  01CB  3D23               	addwfc	??_ssp1_vWriteData+3,w
  7220  01CC  00A5               	movwf	??_ssp1_vWriteData+5
  7221  01CD  0824               	movf	??_ssp1_vWriteData+4,w
  7222  01CE  0086               	movwf	6
  7223  01CF  0825               	movf	??_ssp1_vWriteData+5,w
  7224  01D0  0087               	movwf	7
  7225  01D1  0827               	movf	ssp1_vWriteData@u8Data,w
  7226  01D2  0081               	movwf	1
  7227                           
  7228                           ;InterfaceMain.c: 863:                 evt_vSetEventMap(EVT_DRAW_ICON);
  7229  01D3  3080               	movlw	128
  7230  01D4  318C  2461  3180   	fcall	_evt_vSetEventMap
  7231  01D7  29F8               	goto	i1l3494
  7232  01D8                     i1l3492:	
  7233  01D8  084F               	movf	(_sAppStatus^(0+128)+2),w
  7234  01D9  0020               	movlb	0	; select bank0
  7235  01DA  00A0               	movwf	??_ssp1_vWriteData
  7236  01DB  01A1               	clrf	??_ssp1_vWriteData+1
  7237                           
  7238                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7239                           ; Switch size 1, requested type "simple"
  7240                           ; Number of cases is 1, Range of values is 0 to 0
  7241                           ; switch strategies available:
  7242                           ; Name         Instructions Cycles
  7243                           ; simple_byte            4     3 (average)
  7244                           ; direct_byte            8     6 (fixed)
  7245                           ; jumptable            260     6 (fixed)
  7246                           ;	Chosen strategy is simple_byte
  7247  01DC  0821               	movf	??_ssp1_vWriteData+1,w
  7248  01DD  3A00               	xorlw	0	; case 0
  7249  01DE  1903               	skipnz
  7250  01DF  29E1               	goto	i1l5864
  7251  01E0  2930               	goto	i1l3448
  7252  01E1                     i1l5864:	
  7253                           
  7254                           ; Switch size 1, requested type "simple"
  7255                           ; Number of cases is 7, Range of values is 0 to 6
  7256                           ; switch strategies available:
  7257                           ; Name         Instructions Cycles
  7258                           ; direct_byte           20     6 (fixed)
  7259                           ; simple_byte           22    12 (average)
  7260                           ; jumptable            260     6 (fixed)
  7261                           ;	Chosen strategy is simple_byte
  7262  01E1  0820               	movf	??_ssp1_vWriteData,w
  7263  01E2  3A00               	xorlw	0	; case 0
  7264  01E3  1903               	skipnz
  7265  01E4  29F8               	goto	i1l3494
  7266  01E5  3A01               	xorlw	1	; case 1
  7267  01E6  1903               	skipnz
  7268  01E7  2856               	goto	i1l3378
  7269  01E8  3A03               	xorlw	3	; case 2
  7270  01E9  1903               	skipnz
  7271  01EA  285D               	goto	i1l3380
  7272  01EB  3A01               	xorlw	1	; case 3
  7273  01EC  1903               	skipnz
  7274  01ED  28C4               	goto	i1l3408
  7275  01EE  3A07               	xorlw	7	; case 4
  7276  01EF  1903               	skipnz
  7277  01F0  28DF               	goto	i1l3418
  7278  01F1  3A01               	xorlw	1	; case 5
  7279  01F2  1903               	skipnz
  7280  01F3  28FA               	goto	i1l3428
  7281  01F4  3A03               	xorlw	3	; case 6
  7282  01F5  1903               	skipnz
  7283  01F6  2915               	goto	i1l3438
  7284  01F7  2930               	goto	i1l3448
  7285  01F8                     i1l3494:	
  7286                           
  7287                           ;InterfaceMain.c: 868:     sAppStatus.u8MapAddr++;
  7288  01F8  3001               	movlw	1
  7289  01F9  0020               	movlb	0	; select bank0
  7290  01FA  00A0               	movwf	??_ssp1_vWriteData
  7291  01FB  0820               	movf	??_ssp1_vWriteData,w
  7292  01FC  0021               	movlb	1	; select bank1
  7293  01FD  07CF               	addwf	(_sAppStatus^(0+128)+2),f
  7294  01FE  0008               	return
  7295  01FF                     __end_of_ssp1_vWriteData:	
  7296                           
  7297                           	psect	text44
  7298  0466                     __ptext44:	
  7299 ;; *************** function i1_memset *****************
  7300 ;; Defined at:
  7301 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memset.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;  dest            2    0[COMMON] PTR void 
  7304 ;;		 -> main@keypadSts(27), sMemoryMap(167), 
  7305 ;;  c               2    2[COMMON] int 
  7306 ;;  n               2    4[COMMON] unsigned int 
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;  memset          2   12[COMMON] PTR unsigned char 
  7309 ;;		 -> main@keypadSts(27), sMemoryMap(167), 
  7310 ;;  memset          2   10[COMMON] unsigned int 
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  2    0[COMMON] PTR void 
  7313 ;; Registers used:
  7314 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7315 ;; Tracked objects:
  7316 ;;		On entry : 0/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7320 ;;      Params:         6       0       0       0       0       0
  7321 ;;      Locals:         4       0       0       0       0       0
  7322 ;;      Temps:          4       0       0       0       0       0
  7323 ;;      Totals:        14       0       0       0       0       0
  7324 ;;Total ram usage:       14 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; This function calls:
  7327 ;;		Nothing
  7328 ;; This function is called by:
  7329 ;;		_ssp1_vWriteData
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           
  7334                           ;psect for function i1_memset
  7335  0466                     i1_memset:	
  7336                           
  7337                           ;incstack = 0
  7338                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7339  0466  0871               	movf	i1memset@dest+1,w
  7340  0467  00FD               	movwf	i1memset@s+1
  7341  0468  0870               	movf	i1memset@dest,w
  7342  0469  00FC               	movwf	i1memset@s
  7343  046A  0874               	movf	i1memset@n,w
  7344  046B  0475               	iorwf	i1memset@n+1,w
  7345  046C  1903               	btfsc	3,2
  7346  046D  0008               	return
  7347  046E  087C               	movf	i1memset@s,w
  7348  046F  0086               	movwf	6
  7349  0470  087D               	movf	i1memset@s+1,w
  7350  0471  0087               	movwf	7
  7351  0472  0872               	movf	i1memset@c,w
  7352  0473  0081               	movwf	1
  7353  0474  0874               	movf	i1memset@n,w
  7354  0475  077C               	addwf	i1memset@s,w
  7355  0476  00F6               	movwf	??i1_memset
  7356  0477  0875               	movf	i1memset@n+1,w
  7357  0478  3D7D               	addwfc	i1memset@s+1,w
  7358  0479  00F7               	movwf	??i1_memset+1
  7359  047A  0876               	movf	??i1_memset,w
  7360  047B  3EFF               	addlw	255
  7361  047C  00F8               	movwf	??i1_memset+2
  7362  047D  30FF               	movlw	255
  7363  047E  3D77               	addwfc	??i1_memset+1,w
  7364  047F  00F9               	movwf	??i1_memset+3
  7365  0480  0878               	movf	??i1_memset+2,w
  7366  0481  0086               	movwf	6
  7367  0482  0879               	movf	??i1_memset+3,w
  7368  0483  0087               	movwf	7
  7369  0484  0872               	movf	i1memset@c,w
  7370  0485  0081               	movwf	1
  7371  0486  3000               	movlw	0
  7372  0487  0275               	subwf	i1memset@n+1,w
  7373  0488  3003               	movlw	3
  7374  0489  1903               	skipnz
  7375  048A  0274               	subwf	i1memset@n,w
  7376  048B  1C03               	btfss	3,0
  7377  048C  0008               	return
  7378  048D  087C               	movf	i1memset@s,w
  7379  048E  3E01               	addlw	1
  7380  048F  00F6               	movwf	??i1_memset
  7381  0490  3000               	movlw	0
  7382  0491  3D7D               	addwfc	i1memset@s+1,w
  7383  0492  00F7               	movwf	??i1_memset+1
  7384  0493  0876               	movf	??i1_memset,w
  7385  0494  0086               	movwf	6
  7386  0495  0877               	movf	??i1_memset+1,w
  7387  0496  0087               	movwf	7
  7388  0497  0872               	movf	i1memset@c,w
  7389  0498  0081               	movwf	1
  7390  0499  087C               	movf	i1memset@s,w
  7391  049A  3E02               	addlw	2
  7392  049B  00F6               	movwf	??i1_memset
  7393  049C  3000               	movlw	0
  7394  049D  3D7D               	addwfc	i1memset@s+1,w
  7395  049E  00F7               	movwf	??i1_memset+1
  7396  049F  0876               	movf	??i1_memset,w
  7397  04A0  0086               	movwf	6
  7398  04A1  0877               	movf	??i1_memset+1,w
  7399  04A2  0087               	movwf	7
  7400  04A3  0872               	movf	i1memset@c,w
  7401  04A4  0081               	movwf	1
  7402  04A5  0874               	movf	i1memset@n,w
  7403  04A6  077C               	addwf	i1memset@s,w
  7404  04A7  00F6               	movwf	??i1_memset
  7405  04A8  0875               	movf	i1memset@n+1,w
  7406  04A9  3D7D               	addwfc	i1memset@s+1,w
  7407  04AA  00F7               	movwf	??i1_memset+1
  7408  04AB  0876               	movf	??i1_memset,w
  7409  04AC  3EFE               	addlw	254
  7410  04AD  00F8               	movwf	??i1_memset+2
  7411  04AE  30FF               	movlw	255
  7412  04AF  3D77               	addwfc	??i1_memset+1,w
  7413  04B0  00F9               	movwf	??i1_memset+3
  7414  04B1  0878               	movf	??i1_memset+2,w
  7415  04B2  0086               	movwf	6
  7416  04B3  0879               	movf	??i1_memset+3,w
  7417  04B4  0087               	movwf	7
  7418  04B5  0872               	movf	i1memset@c,w
  7419  04B6  0081               	movwf	1
  7420  04B7  0874               	movf	i1memset@n,w
  7421  04B8  077C               	addwf	i1memset@s,w
  7422  04B9  00F6               	movwf	??i1_memset
  7423  04BA  0875               	movf	i1memset@n+1,w
  7424  04BB  3D7D               	addwfc	i1memset@s+1,w
  7425  04BC  00F7               	movwf	??i1_memset+1
  7426  04BD  0876               	movf	??i1_memset,w
  7427  04BE  3EFD               	addlw	253
  7428  04BF  00F8               	movwf	??i1_memset+2
  7429  04C0  30FF               	movlw	255
  7430  04C1  3D77               	addwfc	??i1_memset+1,w
  7431  04C2  00F9               	movwf	??i1_memset+3
  7432  04C3  0878               	movf	??i1_memset+2,w
  7433  04C4  0086               	movwf	6
  7434  04C5  0879               	movf	??i1_memset+3,w
  7435  04C6  0087               	movwf	7
  7436  04C7  0872               	movf	i1memset@c,w
  7437  04C8  0081               	movwf	1
  7438  04C9  3000               	movlw	0
  7439  04CA  0275               	subwf	i1memset@n+1,w
  7440  04CB  3007               	movlw	7
  7441  04CC  1903               	skipnz
  7442  04CD  0274               	subwf	i1memset@n,w
  7443  04CE  1C03               	btfss	3,0
  7444  04CF  0008               	return
  7445  04D0  087C               	movf	i1memset@s,w
  7446  04D1  3E03               	addlw	3
  7447  04D2  00F6               	movwf	??i1_memset
  7448  04D3  3000               	movlw	0
  7449  04D4  3D7D               	addwfc	i1memset@s+1,w
  7450  04D5  00F7               	movwf	??i1_memset+1
  7451  04D6  0876               	movf	??i1_memset,w
  7452  04D7  0086               	movwf	6
  7453  04D8  0877               	movf	??i1_memset+1,w
  7454  04D9  0087               	movwf	7
  7455  04DA  0872               	movf	i1memset@c,w
  7456  04DB  0081               	movwf	1
  7457  04DC  0874               	movf	i1memset@n,w
  7458  04DD  077C               	addwf	i1memset@s,w
  7459  04DE  00F6               	movwf	??i1_memset
  7460  04DF  0875               	movf	i1memset@n+1,w
  7461  04E0  3D7D               	addwfc	i1memset@s+1,w
  7462  04E1  00F7               	movwf	??i1_memset+1
  7463  04E2  0876               	movf	??i1_memset,w
  7464  04E3  3EFC               	addlw	252
  7465  04E4  00F8               	movwf	??i1_memset+2
  7466  04E5  30FF               	movlw	255
  7467  04E6  3D77               	addwfc	??i1_memset+1,w
  7468  04E7  00F9               	movwf	??i1_memset+3
  7469  04E8  0878               	movf	??i1_memset+2,w
  7470  04E9  0086               	movwf	6
  7471  04EA  0879               	movf	??i1_memset+3,w
  7472  04EB  0087               	movwf	7
  7473  04EC  0872               	movf	i1memset@c,w
  7474  04ED  0081               	movwf	1
  7475  04EE  3000               	movlw	0
  7476  04EF  0275               	subwf	i1memset@n+1,w
  7477  04F0  3009               	movlw	9
  7478  04F1  1903               	skipnz
  7479  04F2  0274               	subwf	i1memset@n,w
  7480  04F3  1C03               	btfss	3,0
  7481  04F4  0008               	return
  7482  04F5  097C               	comf	i1memset@s,w
  7483  04F6  00F6               	movwf	??i1_memset
  7484  04F7  097D               	comf	i1memset@s+1,w
  7485  04F8  00F7               	movwf	??i1_memset+1
  7486  04F9  0AF6               	incf	??i1_memset,f
  7487  04FA  1903               	skipnz
  7488  04FB  0AF7               	incf	??i1_memset+1,f
  7489  04FC  3003               	movlw	3
  7490  04FD  0576               	andwf	??i1_memset,w
  7491  04FE  00FA               	movwf	i1memset@k
  7492  04FF  3000               	movlw	0
  7493  0500  0577               	andwf	??i1_memset+1,w
  7494  0501  00FB               	movwf	i1memset@k+1
  7495  0502  087A               	movf	i1memset@k,w
  7496  0503  07FC               	addwf	i1memset@s,f
  7497  0504  087B               	movf	i1memset@k+1,w
  7498  0505  3DFD               	addwfc	i1memset@s+1,f
  7499  0506  087A               	movf	i1memset@k,w
  7500  0507  02F4               	subwf	i1memset@n,f
  7501  0508  087B               	movf	i1memset@k+1,w
  7502  0509  3BF5               	subwfb	i1memset@n+1,f
  7503  050A  30FC               	movlw	252
  7504  050B  05F4               	andwf	i1memset@n,f
  7505  050C  30FF               	movlw	255
  7506  050D  05F5               	andwf	i1memset@n+1,f
  7507  050E                     i1l3256:	
  7508  050E  0874               	movf	i1memset@n,w
  7509  050F  0475               	iorwf	i1memset@n+1,w
  7510  0510  1903               	btfsc	3,2
  7511  0511  0008               	return
  7512  0512  087C               	movf	i1memset@s,w
  7513  0513  0086               	movwf	6
  7514  0514  087D               	movf	i1memset@s+1,w
  7515  0515  0087               	movwf	7
  7516  0516  0872               	movf	i1memset@c,w
  7517  0517  0081               	movwf	1
  7518  0518  3001               	movlw	1
  7519  0519  02F4               	subwf	i1memset@n,f
  7520  051A  3000               	movlw	0
  7521  051B  3BF5               	subwfb	i1memset@n+1,f
  7522  051C  3001               	movlw	1
  7523  051D  07FC               	addwf	i1memset@s,f
  7524  051E  3000               	movlw	0
  7525  051F  3DFD               	addwfc	i1memset@s+1,f
  7526  0520  2D0E               	goto	i1l3256
  7527  0521                     __end_ofi1_memset:	
  7528                           
  7529                           	psect	text45
  7530  0C54                     __ptext45:	
  7531 ;; *************** function _evt_vSetDrawEvent *****************
  7532 ;; Defined at:
  7533 ;;		line 365 in file "InterfaceMain.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;  u8Addr          1    wreg     unsigned char 
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;  u8Addr          1    2[COMMON] unsigned char 
  7538 ;; Return value:  Size  Location     Type
  7539 ;;                  1    wreg      void 
  7540 ;; Registers used:
  7541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7547 ;;      Params:         0       0       0       0       0       0
  7548 ;;      Locals:         1       0       0       0       0       0
  7549 ;;      Temps:          0       0       0       0       0       0
  7550 ;;      Totals:         1       0       0       0       0       0
  7551 ;;Total ram usage:        1 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:    1
  7554 ;; This function calls:
  7555 ;;		_evt_vSetEventMap
  7556 ;; This function is called by:
  7557 ;;		_ssp1_vWriteData
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561                           
  7562                           ;psect for function _evt_vSetDrawEvent
  7563  0C54                     _evt_vSetDrawEvent:	
  7564                           
  7565                           ;incstack = 0
  7566                           ; Regs used in _evt_vSetDrawEvent: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7567                           ;evt_vSetDrawEvent@u8Addr stored from wreg
  7568  0C54  00F2               	movwf	evt_vSetDrawEvent@u8Addr
  7569                           
  7570                           ;InterfaceMain.c: 367:     if (u8Addr < 40) {
  7571  0C55  3028               	movlw	40
  7572  0C56  0272               	subwf	evt_vSetDrawEvent@u8Addr,w
  7573  0C57  1803               	skipnc
  7574  0C58  2C5D               	goto	i1l3134
  7575                           
  7576                           ;InterfaceMain.c: 368:         evt_vSetEventMap(EVT_DRAW_LINE_0);
  7577  0C59  3010               	movlw	16
  7578  0C5A  318C  2461         	fcall	_evt_vSetEventMap
  7579                           
  7580                           ;InterfaceMain.c: 369:     } else {
  7581  0C5C  0008               	return
  7582  0C5D                     i1l3134:	
  7583                           
  7584                           ;InterfaceMain.c: 370:         evt_vSetEventMap(EVT_DRAW_LINE_1);
  7585  0C5D  3020               	movlw	32
  7586  0C5E  318C  2461         	fcall	_evt_vSetEventMap
  7587  0C60  0008               	return
  7588  0C61                     __end_of_evt_vSetDrawEvent:	
  7589                           
  7590                           	psect	text46
  7591  0C61                     __ptext46:	
  7592 ;; *************** function _evt_vSetEventMap *****************
  7593 ;; Defined at:
  7594 ;;		line 346 in file "InterfaceMain.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;  eEvtType        1    wreg     enum E3076
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;  eEvtType        1    1[COMMON] enum E3076
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  1    wreg      void 
  7601 ;; Registers used:
  7602 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7608 ;;      Params:         0       0       0       0       0       0
  7609 ;;      Locals:         1       0       0       0       0       0
  7610 ;;      Temps:          1       0       0       0       0       0
  7611 ;;      Totals:         2       0       0       0       0       0
  7612 ;;Total ram usage:        2 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; This function calls:
  7615 ;;		Nothing
  7616 ;; This function is called by:
  7617 ;;		_evt_vSetDrawEvent
  7618 ;;		_timer_vInterrupt
  7619 ;;		_ssp1_vWriteData
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           
  7624                           ;psect for function _evt_vSetEventMap
  7625  0C61                     _evt_vSetEventMap:	
  7626                           
  7627                           ;incstack = 0
  7628                           ; Regs used in _evt_vSetEventMap: [wreg+fsr1l+fsr1h+status,2+status,0]
  7629                           ;evt_vSetEventMap@eEvtType stored from wreg
  7630  0C61  00F1               	movwf	evt_vSetEventMap@eEvtType
  7631                           
  7632                           ;InterfaceMain.c: 347:     sMemoryMap.eStatus = MEM_STS_PROCESSING;
  7633  0C62  30C9               	movlw	201
  7634  0C63  0086               	movwf	6
  7635  0C64  3020               	movlw	32
  7636  0C65  0087               	movwf	7
  7637  0C66  3001               	movlw	1
  7638  0C67  3FC0               	movwi [0]fsr1
  7639                           
  7640                           ;InterfaceMain.c: 348:     sAppStatus.u8EventMap = sAppStatus.u8EventMap | eEvtType;
  7641  0C68  0021               	movlb	1	; select bank1
  7642  0C69  0850               	movf	(_sAppStatus^(0+128)+3),w
  7643  0C6A  0471               	iorwf	evt_vSetEventMap@eEvtType,w
  7644  0C6B  00F0               	movwf	??_evt_vSetEventMap
  7645  0C6C  0870               	movf	??_evt_vSetEventMap,w
  7646  0C6D  00D0               	movwf	(_sAppStatus^(0+128)+3)
  7647  0C6E  0008               	return
  7648  0C6F                     __end_of_evt_vSetEventMap:	
  7649                           
  7650                           	psect	text47
  7651  0521                     __ptext47:	
  7652 ;; *************** function _ssp1_u8ReadData *****************
  7653 ;; Defined at:
  7654 ;;		line 885 in file "InterfaceMain.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;		None
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;  u8Addr          1    6[COMMON] unsigned char 
  7659 ;;  u8Data          1    5[COMMON] unsigned char 
  7660 ;; Return value:  Size  Location     Type
  7661 ;;                  1    wreg      unsigned char 
  7662 ;; Registers used:
  7663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7664 ;; Tracked objects:
  7665 ;;		On entry : 0/0
  7666 ;;		On exit  : 0/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7669 ;;      Params:         0       0       0       0       0       0
  7670 ;;      Locals:         2       0       0       0       0       0
  7671 ;;      Temps:          5       0       0       0       0       0
  7672 ;;      Totals:         7       0       0       0       0       0
  7673 ;;Total ram usage:        7 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; This function calls:
  7676 ;;		Nothing
  7677 ;; This function is called by:
  7678 ;;		_ssp1_vCallback
  7679 ;; This function uses a non-reentrant model
  7680 ;;
  7681                           
  7682                           
  7683                           ;psect for function _ssp1_u8ReadData
  7684  0521                     _ssp1_u8ReadData:	
  7685                           
  7686                           ;InterfaceMain.c: 890:     if (sAppStatus.u8MapAddr >= (0xA7)) {
  7687                           
  7688                           ;incstack = 0
  7689                           ; Regs used in _ssp1_u8ReadData: [wreg-fsr1h+status,2+status,0]
  7690  0521  30A7               	movlw	167
  7691  0522  0021               	movlb	1	; select bank1
  7692  0523  024F               	subwf	(_sAppStatus^(0+128)+2),w
  7693  0524  1C03               	skipc
  7694  0525  2D95               	goto	i1l3540
  7695                           
  7696                           ;InterfaceMain.c: 893:         SSP1CON2bits.ACKDT = 0x01;
  7697  0526  0024               	movlb	4	; select bank4
  7698  0527  1696               	bsf	22,5	;volatile
  7699                           
  7700                           ;InterfaceMain.c: 895:         return 0xFF;
  7701  0528  30FF               	movlw	255
  7702  0529  0008               	return
  7703  052A                     i1l3508:	
  7704                           
  7705                           ;InterfaceMain.c: 903:             u8Data = sMemoryMap.eStatus;
  7706  052A  30C9               	movlw	201
  7707  052B  0086               	movwf	6
  7708  052C  3020               	movlw	32
  7709  052D  0087               	movwf	7
  7710  052E  2D5C               	goto	L6
  7711  052F                     i1l3510:	
  7712                           ;InterfaceMain.c: 904:             break;
  7713                           
  7714                           
  7715                           ;InterfaceMain.c: 907:             u8Data = sMemoryMap.u8KeyValue;
  7716  052F  30C9               	movlw	201
  7717  0530  0086               	movwf	6
  7718  0531  3020               	movlw	32
  7719  0532  0087               	movwf	7
  7720  0533  3141               	addfsr 1,1
  7721  0534  0801               	movf	1,w
  7722  0535  00F0               	movwf	??_ssp1_u8ReadData
  7723  0536  0870               	movf	??_ssp1_u8ReadData,w
  7724  0537  00F5               	movwf	ssp1_u8ReadData@u8Data
  7725                           
  7726                           ;InterfaceMain.c: 908:             sMemoryMap.u8KeyValue = 0xFF;
  7727  0538  30CA               	movlw	202
  7728  0539  0086               	movwf	6
  7729  053A  3020               	movlw	32
  7730  053B  0087               	movwf	7
  7731  053C  30FF               	movlw	255
  7732  053D  0081               	movwf	1
  7733                           
  7734                           ;InterfaceMain.c: 909:             break;
  7735  053E  2DB4               	goto	i1l3542
  7736  053F                     i1l3512:	
  7737                           
  7738                           ;InterfaceMain.c: 912:             u8Data = sMemoryMap.u8Power;
  7739  053F  30C9               	movlw	201
  7740  0540  0086               	movwf	6
  7741  0541  3020               	movlw	32
  7742  0542  0087               	movwf	7
  7743  0543  3142               	addfsr 1,2
  7744  0544  2D5C               	goto	L6
  7745  0545                     i1l3514:	
  7746                           ;InterfaceMain.c: 913:             break;
  7747                           
  7748                           
  7749                           ;InterfaceMain.c: 916:             u8Data = sMemoryMap.u8Contrast;
  7750  0545  30C9               	movlw	201
  7751  0546  0086               	movwf	6
  7752  0547  3020               	movlw	32
  7753  0548  0087               	movwf	7
  7754  0549  3143               	addfsr 1,3
  7755  054A  2D5C               	goto	L6
  7756  054B                     i1l3516:	
  7757                           ;InterfaceMain.c: 917:             break;
  7758                           
  7759                           
  7760                           ;InterfaceMain.c: 920:             u8Data = sMemoryMap.u8CursorType;
  7761  054B  30C9               	movlw	201
  7762  054C  0086               	movwf	6
  7763  054D  3020               	movlw	32
  7764  054E  0087               	movwf	7
  7765  054F  3144               	addfsr 1,4
  7766  0550  2D5C               	goto	L6
  7767  0551                     i1l3518:	
  7768                           ;InterfaceMain.c: 921:             break;
  7769                           
  7770                           
  7771                           ;InterfaceMain.c: 924:             u8Data = sMemoryMap.u8CursorRow;
  7772  0551  30C9               	movlw	201
  7773  0552  0086               	movwf	6
  7774  0553  3020               	movlw	32
  7775  0554  0087               	movwf	7
  7776  0555  3145               	addfsr 1,5
  7777  0556  2D5C               	goto	L6
  7778  0557                     i1l3520:	
  7779                           ;InterfaceMain.c: 925:             break;
  7780                           
  7781                           
  7782                           ;InterfaceMain.c: 928:             u8Data = sMemoryMap.u8CursorCol;
  7783  0557  30C9               	movlw	201
  7784  0558  0086               	movwf	6
  7785  0559  3020               	movlw	32
  7786  055A  0087               	movwf	7
  7787  055B  3146               	addfsr 1,6
  7788  055C                     L6:	
  7789  055C  0801               	movf	1,w
  7790  055D  00F0               	movwf	??_ssp1_u8ReadData
  7791  055E  0870               	movf	??_ssp1_u8ReadData,w
  7792  055F  2D93               	goto	L9
  7793  0560                     i1l3522:	
  7794                           ;InterfaceMain.c: 929:             break;
  7795                           
  7796                           
  7797                           ;InterfaceMain.c: 932:             if (sAppStatus.u8MapAddr < (0x57)) {
  7798  0560  3057               	movlw	87
  7799  0561  024F               	subwf	(_sAppStatus^(0+128)+2),w
  7800  0562  1803               	skipnc
  7801  0563  2D70               	goto	i1l3528
  7802                           
  7803                           ;InterfaceMain.c: 934:                 u8Addr = sAppStatus.u8MapAddr - (0x07);
  7804  0564  084F               	movf	(_sAppStatus^(0+128)+2),w
  7805  0565  3EF9               	addlw	249
  7806  0566  00F0               	movwf	??_ssp1_u8ReadData
  7807  0567  0870               	movf	??_ssp1_u8ReadData,w
  7808  0568  00F6               	movwf	ssp1_u8ReadData@u8Addr
  7809                           
  7810                           ;InterfaceMain.c: 935:                 u8Data = sMemoryMap.u8DispRam[u8Addr];
  7811  0569  0876               	movf	ssp1_u8ReadData@u8Addr,w
  7812  056A  00F0               	movwf	??_ssp1_u8ReadData
  7813  056B  01F1               	clrf	??_ssp1_u8ReadData+1
  7814  056C  30D0               	movlw	208
  7815  056D  00F2               	movwf	??_ssp1_u8ReadData+2
  7816  056E  3020               	movlw	32
  7817  056F  2D89               	goto	L10
  7818  0570                     i1l3528:	
  7819                           ;InterfaceMain.c: 936:             } else if (sAppStatus.u8MapAddr < (0x97)) {
  7820                           
  7821  0570  3097               	movlw	151
  7822  0571  024F               	subwf	(_sAppStatus^(0+128)+2),w
  7823  0572  1803               	skipnc
  7824  0573  2D7E               	goto	i1l3534
  7825                           
  7826                           ;InterfaceMain.c: 938:                 u8Addr = sAppStatus.u8MapAddr - (0x57);
  7827  0574  084F               	movf	(_sAppStatus^(0+128)+2),w
  7828  0575  3EA9               	addlw	169
  7829  0576  00F0               	movwf	??_ssp1_u8ReadData
  7830  0577  0870               	movf	??_ssp1_u8ReadData,w
  7831  0578  00F6               	movwf	ssp1_u8ReadData@u8Addr
  7832                           
  7833                           ;InterfaceMain.c: 939:                 u8Data = sMemoryMap.u8CGRam[u8Addr];
  7834  0579  0876               	movf	ssp1_u8ReadData@u8Addr,w
  7835  057A  00F0               	movwf	??_ssp1_u8ReadData
  7836  057B  01F1               	clrf	??_ssp1_u8ReadData+1
  7837  057C  3020               	movlw	32
  7838  057D  2D87               	goto	L11
  7839  057E                     i1l3534:	
  7840                           ;InterfaceMain.c: 940:             } else {
  7841                           
  7842                           
  7843                           ;InterfaceMain.c: 942:                 u8Addr = sAppStatus.u8MapAddr - (0x97);
  7844  057E  084F               	movf	(_sAppStatus^(0+128)+2),w
  7845  057F  3E69               	addlw	105
  7846  0580  00F0               	movwf	??_ssp1_u8ReadData
  7847  0581  0870               	movf	??_ssp1_u8ReadData,w
  7848  0582  00F6               	movwf	ssp1_u8ReadData@u8Addr
  7849                           
  7850                           ;InterfaceMain.c: 943:                 u8Data = sMemoryMap.u8IconRam[u8Addr];
  7851  0583  0876               	movf	ssp1_u8ReadData@u8Addr,w
  7852  0584  00F0               	movwf	??_ssp1_u8ReadData
  7853  0585  01F1               	clrf	??_ssp1_u8ReadData+1
  7854  0586  3060               	movlw	96
  7855  0587                     L11:	
  7856  0587  00F2               	movwf	??_ssp1_u8ReadData+2
  7857  0588  3021               	movlw	33
  7858  0589                     L10:	
  7859  0589  00F3               	movwf	??_ssp1_u8ReadData+3
  7860  058A  0870               	movf	??_ssp1_u8ReadData,w
  7861  058B  0772               	addwf	??_ssp1_u8ReadData+2,w
  7862  058C  0086               	movwf	6
  7863  058D  0871               	movf	??_ssp1_u8ReadData+1,w
  7864  058E  3D73               	addwfc	??_ssp1_u8ReadData+3,w
  7865  058F  0087               	movwf	7
  7866  0590  0801               	movf	1,w
  7867  0591  00F4               	movwf	??_ssp1_u8ReadData+4
  7868  0592  0874               	movf	??_ssp1_u8ReadData+4,w
  7869  0593                     L9:	
  7870  0593  00F5               	movwf	ssp1_u8ReadData@u8Data
  7871  0594  2DB4               	goto	i1l3542
  7872  0595                     i1l3540:	
  7873  0595  084F               	movf	(_sAppStatus^(0+128)+2),w
  7874  0596  00F0               	movwf	??_ssp1_u8ReadData
  7875  0597  01F1               	clrf	??_ssp1_u8ReadData+1
  7876                           
  7877                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7878                           ; Switch size 1, requested type "simple"
  7879                           ; Number of cases is 1, Range of values is 0 to 0
  7880                           ; switch strategies available:
  7881                           ; Name         Instructions Cycles
  7882                           ; simple_byte            4     3 (average)
  7883                           ; direct_byte            8     6 (fixed)
  7884                           ; jumptable            260     6 (fixed)
  7885                           ;	Chosen strategy is simple_byte
  7886  0598  0871               	movf	??_ssp1_u8ReadData+1,w
  7887  0599  3A00               	xorlw	0	; case 0
  7888  059A  1903               	skipnz
  7889  059B  2D9D               	goto	i1l5866
  7890  059C  2D60               	goto	i1l3522
  7891  059D                     i1l5866:	
  7892                           
  7893                           ; Switch size 1, requested type "simple"
  7894                           ; Number of cases is 7, Range of values is 0 to 6
  7895                           ; switch strategies available:
  7896                           ; Name         Instructions Cycles
  7897                           ; direct_byte           20     6 (fixed)
  7898                           ; simple_byte           22    12 (average)
  7899                           ; jumptable            260     6 (fixed)
  7900                           ;	Chosen strategy is simple_byte
  7901  059D  0870               	movf	??_ssp1_u8ReadData,w
  7902  059E  3A00               	xorlw	0	; case 0
  7903  059F  1903               	skipnz
  7904  05A0  2D2A               	goto	i1l3508
  7905  05A1  3A01               	xorlw	1	; case 1
  7906  05A2  1903               	skipnz
  7907  05A3  2D2F               	goto	i1l3510
  7908  05A4  3A03               	xorlw	3	; case 2
  7909  05A5  1903               	skipnz
  7910  05A6  2D3F               	goto	i1l3512
  7911  05A7  3A01               	xorlw	1	; case 3
  7912  05A8  1903               	skipnz
  7913  05A9  2D45               	goto	i1l3514
  7914  05AA  3A07               	xorlw	7	; case 4
  7915  05AB  1903               	skipnz
  7916  05AC  2D4B               	goto	i1l3516
  7917  05AD  3A01               	xorlw	1	; case 5
  7918  05AE  1903               	skipnz
  7919  05AF  2D51               	goto	i1l3518
  7920  05B0  3A03               	xorlw	3	; case 6
  7921  05B1  1903               	skipnz
  7922  05B2  2D57               	goto	i1l3520
  7923  05B3  2D60               	goto	i1l3522
  7924  05B4                     i1l3542:	
  7925                           
  7926                           ;InterfaceMain.c: 948:     sAppStatus.u8MapAddr++;
  7927  05B4  3001               	movlw	1
  7928  05B5  00F0               	movwf	??_ssp1_u8ReadData
  7929  05B6  0870               	movf	??_ssp1_u8ReadData,w
  7930  05B7  07CF               	addwf	(_sAppStatus^(0+128)+2),f
  7931                           
  7932                           ;InterfaceMain.c: 950:     return u8Data;
  7933  05B8  0875               	movf	ssp1_u8ReadData@u8Data,w
  7934  05B9  0008               	return
  7935  05BA                     __end_of_ssp1_u8ReadData:	
  7936  007E                     btemp	set	126	;btemp
  7937  007E                     int$flags	set	126
  7938  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         13
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     49      62
    BANK1            80     45      49
    BANK2            41      0       0
    BANK3             0      0       0
    BANK4             0      0       0

Pointer List with Targets:

    memset@dest	PTR void  size(2) Largest target is 167
		 -> main@keypadSts(BANK1[27]), sMemoryMap(BIGRAM[167]), 

    memset@s	PTR unsigned char  size(2) Largest target is 167
		 -> main@keypadSts(BANK1[27]), sMemoryMap(BIGRAM[167]), 

    memcpy@d1	PTR void  size(1) Largest target is 16
		 -> lcd_vDarwLine@u8Msg(BANK1[16]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> lcd_vDarwLine@u8Msg(BANK1[16]), 

    memcpy@s1	PTR const void  size(2) Largest target is 167
		 -> sMemoryMap.u8DispRam(BIGRAM[80]), sMemoryMap(BIGRAM[167]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 167
		 -> sMemoryMap.u8DispRam(BIGRAM[80]), sMemoryMap(BIGRAM[167]), 

    ST7032_vWriteDataSSP2@pcData	PTR unsigned char  size(1) Largest target is 16
		 -> lcd_vDarwLine@u8Msg(BANK1[16]), 

    ST7032_vWriteDataSSP2@pu8WkData	PTR unsigned char  size(1) Largest target is 16
		 -> lcd_vDarwLine@u8Msg(BANK1[16]), 

    ST7032_vWriteCGRAMSSP2@pu8BitMap	PTR unsigned char  size(2) Largest target is 167
		 -> sMemoryMap.u8CGRam(BIGRAM[64]), sMemoryMap(BIGRAM[167]), 

    ST7032_vWriteCGRAMSSP2@pu8WkMap	PTR unsigned char  size(2) Largest target is 167
		 -> sMemoryMap.u8CGRam(BIGRAM[64]), sMemoryMap(BIGRAM[167]), 

    spKEYPAD_status	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), main@keypadSts(BANK1[27]), 

    KEYPAD_vInit@spStatus	PTR struct . size(1) Largest target is 27
		 -> main@keypadSts(BANK1[27]), 

    I2C_vInitSlaveSSP1@pvCallback	PTR FTN(unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> ssp1_vCallback(), 

    pvSSP2Func	PTR FTN(unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> vDmyCallback(), 

    pvSSP1Func	PTR FTN(unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> vDmyCallback(), ssp1_vCallback(), 

    sp__memcpy	PTR void  size(1) Largest target is 16
		 -> lcd_vDarwLine@u8Msg(BANK1[16]), 

    sp__memset	PTR void  size(2) Largest target is 167
		 -> main@keypadSts(BANK1[27]), sMemoryMap(BIGRAM[167]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _timer_vInterrupt->_KEYPAD_bUpdateBuffer
    _KEYPAD_bUpdateBuffer->_KEYPAD_u8Read
    _KEYPAD_u8Read->_readColumn
    _ssp1_vWriteData->i1_memset
    _evt_vSetDrawEvent->_evt_vSetEventMap

Critical Paths under _main in BANK0

    _main->_lcd_vDarwLine
    _lcd_vPowerSetting->_ST7032_vInitSSP2
    _ST7032_vInitSSP2->_I2C_u8MstStartSSP2
    _ST7032_vInitSSP2->_vExecCmdEndSSP2
    _ST7032_vInitSSP2->_vExecCmdSSP2
    _lcd_vDrawIconRAM->_ST7032_vWriteIconSSP2
    _ST7032_vWriteIconSSP2->_bSetCursorSSP2
    _lcd_vDrawCGRAM->_ST7032_vWriteCGRAMSSP2
    _ST7032_vWriteCGRAMSSP2->_bSetCursorSSP2
    _lcd_vDarwLine->_lcd_vDrawCursor
    _memcpy->___wmul
    _lcd_vDrawCursor->_ST7032_bSetCursorSSP2
    _ST7032_bSetCursorSSP2->_bSetCursorSSP2
    _bSetCursorSSP2->___awdiv
    _ST7032_vWriteDataSSP2->___awmod
    _lcd_vCursorSetting->_ST7032_vDispSettingSSP2
    _ST7032_vDispSettingSSP2->_I2C_u8MstStartSSP2
    _ST7032_vDispSettingSSP2->_vExecCmdEndSSP2
    _evt_u8GetEventMap->_criticalSec_vBegin
    _ST7032_vSetContrastSSP2->_I2C_u8MstStartSSP2
    _ST7032_vSetContrastSSP2->_vExecCmdEndSSP2
    _ST7032_vSetContrastSSP2->_vExecCmdSSP2
    _vExecCmdSSP2->_I2C_u8MstTxSSP2
    _vExecCmdEndSSP2->_I2C_u8MstTxSSP2
    _KEYPAD_vInit->_memset

Critical Paths under _ISR in BANK0

    _ISR->_I2C_vSlaveIsrSSP1
    _timer_vInterrupt->_KEYPAD_u8Read
    _KEYPAD_bUpdateBuffer->_KEYPAD_u8Read
    _I2C_vSlaveIsrSSP1->_ssp1_vCallback
    _ssp1_vCallback->_ssp1_vWriteData

Critical Paths under _main in BANK1

    _main->_lcd_vDarwLine

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0   47587
                                             48 BANK0      1     1      0
                                             17 BANK1     28    28      0
                _I2C_vInitMasterSSP2
                 _I2C_vInitSlaveSSP1
                       _KEYPAD_vInit
                   _ST7032_vInitSSP2
            _ST7032_vSetContrastSSP2
                  _evt_u8GetEventMap
                 _lcd_vCursorSetting
                      _lcd_vDarwLine
                     _lcd_vDrawCGRAM
                    _lcd_vDrawCursor
                   _lcd_vDrawIconRAM
                  _lcd_vPowerSetting
                             _memset
 ---------------------------------------------------------------------------------
 (1) _lcd_vPowerSetting                                    3     3      0    1601
                                             18 BANK0      2     2      0
                   _ST7032_vInitSSP2
                 _criticalSec_vBegin
                   _criticalSec_vEnd
 ---------------------------------------------------------------------------------
 (2) _ST7032_vInitSSP2                                     1     1      0    1536
                                             17 BANK0      1     1      0
                 _I2C_u8MstStartSSP2
                    _vExecCmdEndSSP2
                       _vExecCmdSSP2
 ---------------------------------------------------------------------------------
 (1) _lcd_vDrawIconRAM                                     6     6      0    6786
                                             36 BANK0      6     6      0
              _ST7032_vWriteIconSSP2
 ---------------------------------------------------------------------------------
 (2) _ST7032_vWriteIconSSP2                                2     1      1    6656
                                             34 BANK0      2     1      1
                 _I2C_u8MstStartSSP2
                    _I2C_u8MstTxSSP2
                   _I2C_vMstStopSSP2
                     _bSetCursorSSP2
                       _vExecCmdSSP2
 ---------------------------------------------------------------------------------
 (1) _lcd_vDrawCGRAM                                       5     5      0    6922
                                             41 BANK0      5     5      0
             _ST7032_vWriteCGRAMSSP2
 ---------------------------------------------------------------------------------
 (2) _ST7032_vWriteCGRAMSSP2                               7     5      2    6761
                                             34 BANK0      7     5      2
                 _I2C_u8MstStartSSP2
                    _I2C_u8MstTxSSP2
                   _I2C_vMstStopSSP2
                     _bSetCursorSSP2
                       _vExecCmdSSP2
 ---------------------------------------------------------------------------------
 (1) _lcd_vDarwLine                                       23    23      0   16309
                                             42 BANK0      6     6      0
                                              0 BANK1     17    17      0
              _ST7032_bSetCursorSSP2
              _ST7032_vWriteDataSSP2
                             ___wmul
                 _criticalSec_vBegin
                   _criticalSec_vEnd
                    _lcd_vDrawCursor
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     6      4     424
                                             21 BANK0     10     6      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_vDrawCursor                                      3     3      0    5752
                                             39 BANK0      3     3      0
              _ST7032_bSetCursorSSP2
                 _criticalSec_vBegin
                   _criticalSec_vEnd
 ---------------------------------------------------------------------------------
 (2) _ST7032_bSetCursorSSP2                                5     4      1    5684
                                             34 BANK0      5     4      1
                             ___bmul
                     _bSetCursorSSP2
 ---------------------------------------------------------------------------------
 (3) _bSetCursorSSP2                                      10    10      0    4999
                                             24 BANK0     10    10      0
                 _I2C_u8MstStartSSP2
                            ___awdiv
                            ___awmod
                    _vExecCmdEndSSP2
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                             15 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     316
                                             15 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     316
                                             15 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ST7032_vWriteDataSSP2                                9     8      1    4000
                                             22 BANK0      9     8      1
                 _I2C_u8MstStartSSP2
                    _I2C_u8MstTxSSP2
                   _I2C_vMstStopSSP2
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    2233
                                             15 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_vCursorSetting                                   5     5      0    1877
                                             22 BANK0      5     5      0
            _ST7032_vDispSettingSSP2
 ---------------------------------------------------------------------------------
 (2) _ST7032_vDispSettingSSP2                              5     3      2    1747
                                             17 BANK0      5     3      2
                 _I2C_u8MstStartSSP2
                    _vExecCmdEndSSP2
 ---------------------------------------------------------------------------------
 (1) _evt_u8GetEventMap                                    2     2      0      34
                                             16 BANK0      2     2      0
                 _criticalSec_vBegin
                   _criticalSec_vEnd
 ---------------------------------------------------------------------------------
 (2) _criticalSec_vEnd                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _criticalSec_vBegin                                   1     1      0       0
                                             15 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ST7032_vSetContrastSSP2                              3     3      0    1632
                                             17 BANK0      3     3      0
                 _I2C_u8MstStartSSP2
                    _vExecCmdEndSSP2
                       _vExecCmdSSP2
 ---------------------------------------------------------------------------------
 (3) _vExecCmdSSP2                                         1     1      0      62
                                             16 BANK0      1     1      0
                    _I2C_u8MstTxSSP2
 ---------------------------------------------------------------------------------
 (3) _vExecCmdEndSSP2                                      1     1      0      62
                                             16 BANK0      1     1      0
                    _I2C_u8MstTxSSP2
                   _I2C_vMstStopSSP2
 ---------------------------------------------------------------------------------
 (4) _I2C_vMstStopSSP2                                     0     0      0       0
                    _vMasterWaitSSP2
 ---------------------------------------------------------------------------------
 (4) _I2C_u8MstTxSSP2                                      1     1      0      31
                                             15 BANK0      1     1      0
                    _vMasterWaitSSP2
 ---------------------------------------------------------------------------------
 (3) _I2C_u8MstStartSSP2                                   2     1      1    1412
                                             15 BANK0      2     1      1
                    _vMasterWaitSSP2
 ---------------------------------------------------------------------------------
 (5) _vMasterWaitSSP2                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KEYPAD_vInit                                         2     2      0    2062
                                             29 BANK0      2     2      0
                             _memset
 ---------------------------------------------------------------------------------
 (1) _memset                                              14     8      6    1853
                                             15 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (1) _I2C_vInitSlaveSSP1                                   4     1      3     240
                                             15 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _I2C_vInitMasterSSP2                                  2     1      1     120
                                             15 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  0     0      0    3695
                  _I2C_vSlaveIsrSSP1
                   _timer_vInterrupt
 ---------------------------------------------------------------------------------
 (9) _timer_vInterrupt                                     2     2      0    1375
                                              7 BANK0      2     2      0
               _KEYPAD_bUpdateBuffer
                      _KEYPAD_u8Read
                   _evt_vSetEventMap
 ---------------------------------------------------------------------------------
 (10) _KEYPAD_bUpdateBuffer                                4     4      0     699
                                             10 COMMON     4     4      0
                      _KEYPAD_u8Read
               i1_criticalSec_vBegin
                 i1_criticalSec_vEnd
 ---------------------------------------------------------------------------------
 (11) i1_criticalSec_vEnd                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_criticalSec_vBegin                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _KEYPAD_u8Read                                       9     9      0     609
                                              8 COMMON     2     2      0
                                              0 BANK0      7     7      0
                         _readColumn
 ---------------------------------------------------------------------------------
 (11) _readColumn                                          8     8      0     205
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (9) _I2C_vSlaveIsrSSP1                                    2     2      0    2320
                                             13 BANK0      2     2      0
                     _ssp1_vCallback *
                       _vDmyCallback *
 ---------------------------------------------------------------------------------
 (10) _vDmyCallback                                        2     0      2     424
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (10) _ssp1_vCallback                                      5     3      2    1896
                                              8 BANK0      5     3      2
                    _ssp1_u8ReadData
                    _ssp1_vWriteData
 ---------------------------------------------------------------------------------
 (11) _ssp1_vWriteData                                     8     8      0    1770
                                              0 BANK0      8     8      0
                  _evt_vSetDrawEvent
                   _evt_vSetEventMap
                           i1_memset
 ---------------------------------------------------------------------------------
 (12) i1_memset                                           14     8      6     953
                                              0 COMMON    14     8      6
 ---------------------------------------------------------------------------------
 (12) _evt_vSetDrawEvent                                   1     1      0      44
                                              2 COMMON     1     1      0
                   _evt_vSetEventMap
 ---------------------------------------------------------------------------------
 (10) _evt_vSetEventMap                                    2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _ssp1_u8ReadData                                     7     7      0     101
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_vInitMasterSSP2
   _I2C_vInitSlaveSSP1
   _KEYPAD_vInit
     _memset
   _ST7032_vInitSSP2
     _I2C_u8MstStartSSP2
       _vMasterWaitSSP2
     _vExecCmdEndSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
     _vExecCmdSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
   _ST7032_vSetContrastSSP2
     _I2C_u8MstStartSSP2
       _vMasterWaitSSP2
     _vExecCmdEndSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
     _vExecCmdSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
   _evt_u8GetEventMap
     _criticalSec_vBegin
     _criticalSec_vEnd
   _lcd_vCursorSetting
     _ST7032_vDispSettingSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _vExecCmdEndSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
         _I2C_vMstStopSSP2
           _vMasterWaitSSP2
   _lcd_vDarwLine
     _ST7032_bSetCursorSSP2
       ___bmul
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
     _ST7032_vWriteDataSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       ___awmod
     ___wmul
     _criticalSec_vBegin
     _criticalSec_vEnd
     _lcd_vDrawCursor
       _ST7032_bSetCursorSSP2
         ___bmul
         _bSetCursorSSP2
           _I2C_u8MstStartSSP2
             _vMasterWaitSSP2
           ___awdiv
           ___awmod
           _vExecCmdEndSSP2
             _I2C_u8MstTxSSP2
               _vMasterWaitSSP2
             _I2C_vMstStopSSP2
               _vMasterWaitSSP2
       _criticalSec_vBegin
       _criticalSec_vEnd
     _memcpy
       ___wmul (ARG)
   _lcd_vDrawCGRAM
     _ST7032_vWriteCGRAMSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
       _vExecCmdSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
   _lcd_vDrawCursor
     _ST7032_bSetCursorSSP2
       ___bmul
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
     _criticalSec_vBegin
     _criticalSec_vEnd
   _lcd_vDrawIconRAM
     _ST7032_vWriteIconSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
       _vExecCmdSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
   _lcd_vPowerSetting
     _ST7032_vInitSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _vExecCmdEndSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
         _I2C_vMstStopSSP2
           _vMasterWaitSSP2
       _vExecCmdSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
     _criticalSec_vBegin
     _criticalSec_vEnd
   _memset

 _ISR (ROOT)
   _I2C_vSlaveIsrSSP1
     _ssp1_vCallback *
       _ssp1_u8ReadData
       _ssp1_vWriteData
         _evt_vSetDrawEvent
           _evt_vSetEventMap
         _evt_vSetEventMap
         i1_memset
     _vDmyCallback *
   _timer_vInterrupt
     _KEYPAD_bUpdateBuffer
       _KEYPAD_u8Read
         _readColumn
       i1_criticalSec_vBegin
       i1_criticalSec_vEnd
     _KEYPAD_u8Read
       _readColumn
     _evt_vSetEventMap

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      7D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     31      3E       6       77.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     2D      31       8       61.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               29      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      7D      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Jul 17 09:59:44 2019

                  _vMasterWaitSSP2 0C23                   readColumn@u8Port 0074  
            I2C_u8MstTxSSP2@u8Data 002F           __size_of_vExecCmdEndSSP2 000E  
                   ___bmul@product 0031                    readColumn@portA 0072  
                  readColumn@portB 0073                        __CFG_CP$OFF 0000  
                  _spKEYPAD_status 0056                       ___awdiv@sign 0035  
              ___wmul@multiplicand 0031                     ??_vExecCmdSSP2 0030  
                              l129 0F77                                l331 0CE2  
                              l370 0C23                                l796 07ED  
                              _GIE 005F                                _RB0 0068  
                              _RB3 006B                       __CFG_CPD$OFF 0000  
                              _ISR 0004                 _I2C_u8MstStartSSP2 0CD6  
                     ___awmod@sign 0035                       __CFG_BORV$HI 0000  
                              wreg 0009     __size_of_ST7032_bSetCursorSSP2 001F  
    __end_of_ST7032_bSetCursorSSP2 0D12   __size_of_ST7032_vSetContrastSSP2 0045  
                 _timer_vInterrupt 0DC7                       __CFG_LVP$OFF 0000  
                             ?_ISR 0070                ?_I2C_u8MstStartSSP2 002F  
                             l5120 07E7                               l5140 0CD0  
                             l5220 0EC3                               l5142 0CD1  
                             l3608 0453                               l5072 06DB  
                             l5056 0DA6                               l5224 0EF1  
                             l5320 02BC                               l5074 06F4  
                             l5234 0D35                               l3820 0D80  
                             l5092 0650                               l5332 02D0  
                             l5324 02C2                               l5316 02B0  
                             l5308 0291                               l5166 0F72  
                             l3824 0D87                               l5336 02D6  
                             l5328 02C9                               l3850 0C99  
                             l3826 0D89                               l3852 0C9B  
                             l4920 0771                               l4912 076B  
                             l4922 077D                               l4930 0792  
                             l4908 0764                               l4846 0CE6  
                             l4934 079A                               l4926 0789  
                             l4870 068E                               l4880 0696  
                             l4864 0683                               l4954 0C80  
                             l4882 06A2                               l4892 06BD  
                             l4958 0C86                               l4896 06C5  
                             l4888 06B4                               u3205 06AD  
                             u3215 06B5                               u4007 0620  
                             u3305 078A                               u4017 0E95  
                             u4107 0D2F                               u4027 0EA0  
                             u4117 07BD                               u4037 0EA8  
                             u3405 05E4             ??_KEYPAD_bUpdateBuffer 007A  
                             u4127 07C8                               u3415 0D1D  
                             u3175 0699                               u3335 073E  
                             u4047 0EB9                               u4137 07D8  
                             u3425 0D23                               u4057 0631  
                             u4147 07E0                               u3275 0774  
                             u3195 06A3                               u4067 0643  
                             u4077 065A                               u3295 0783  
                             u4087 0754                               u3455 0638  
                             u4097 06E7                               u3555 07CF  
                             _PEIE 005E                               u3485 07EE  
                             u3495 07F3                               u3907 0F6A  
                             u3917 05CA                               u3927 05D2  
                             u3937 05DD                               u3947 05ED  
                             u3957 05F5                               u3967 05FD  
                             u3887 0289                               u3977 0605  
                             u3897 0F5F                               u3987 060D  
                             u3997 0615                               _TMR0 0015  
                     __CFG_WRT$OFF 0000                               _main 01FF  
      lcd_vPowerSetting@u8Settings 0070                               fsr0h 0005  
                             fsr1h 0007                               indf0 0000  
                             fsr0l 0004                               indf1 0001  
                             fsr1l 0006                               btemp 007E  
                    __CFG_BOREN$ON 0000                               start 000D  
                    __CFG_IESO$OFF 0000         __size_of_lcd_vPowerSetting 0040  
                ___bmul@multiplier 0032               ??_I2C_u8MstStartSSP2 0030  
                            ??_ISR 007E                    ??_lcd_vDarwLine 004A  
                    ?_KEYPAD_vInit 0070                      _KEYPAD_u8Read 02DD  
                            ?_main 0070                    __end_of___awdiv 06CA  
                ?_ST7032_vInitSSP2 0070                      __CFG_WDTE$OFF 0000  
                  __end_of___awmod 079F                    ___awdiv@divisor 002F  
                            i1l170 0E51                              i1l174 004C  
         __end_of_evt_vSetEventMap 0C6F                    ___awdiv@counter 0034  
     ST7032_vSetContrastSSP2@u8Val 0033                              _PORTA 000C  
                            _PORTB 000D                              _TRISA 008C  
                            _TRISB 008D                 ??_ST7032_vInitSSP2 0031  
                    __CFG_PWRTE$ON 0000                     __CFG_FCMEN$OFF 0000  
     ST7032_bSetCursorSSP2@u8ColNo 0042       ST7032_bSetCursorSSP2@u8RowNo 0045  
           lcd_vPowerSetting@u8Val 0033                   ?_ssp1_vWriteData 0070  
       lcd_vDrawCursor@u8CursorCol 0049                              pclath 000A  
       lcd_vDrawCursor@u8CursorRow 0048            __end_of_I2C_u8MstTxSSP2 0C3D  
                            status 0003            __end_of_vMasterWaitSSP2 0C2B  
                            wtemp0 007E     lcd_vCursorSetting@bCursorBlink 0039  
                 __end_ofi1_memset 0521       __end_ofi1_criticalSec_vBegin 0C0D  
               _lcd_vCursorSetting 0CA4                     __CFG_MCLRE$OFF 0000  
         ?_ST7032_vDispSettingSSP2 0031               __end_of_vDmyCallback 0004  
                  __initialization 000F       ST7032_vDispSettingSSP2@bDisp 0035  
                     __end_of_main 02DD                     ??_KEYPAD_vInit 003D  
              ?_lcd_vCursorSetting 0070                     ?_KEYPAD_u8Read 0070  
                           ??_main 0050                  ??_vExecCmdEndSSP2 0030  
                   __CFG_PLLEN$OFF 0000                   ??_lcd_vDrawCGRAM 0049  
                 _lcd_vDrawIconRAM 0D33                             _BCL1IE 0493  
                           _BCL1IF 0093                             _BCL2IE 04A1  
                           _BCL2IF 00A1            __size_of_ssp1_vCallback 0030  
                 ___awdiv@dividend 0031                             _ANSELA 018C  
                           _ANSELB 018D               ??_lcd_vCursorSetting 0036  
   lcd_vCursorSetting@u8CursorType 003A                             i1l4012 0E11  
                           i1l3134 0C5D                             i1l3150 0FD7  
                           i1l3144 0FC5                             i1l3304 030D  
                           i1l3146 0FD0                             i1l3322 0355  
                           i1l3314 0330                             i1l3306 0325  
                           i1l3412 00CB                             i1l3404 00B9  
                           i1l3164 0FF7                             i1l3148 0FD2  
                           i1l3156 0FD9                             i1l3510 052F  
                           i1l3422 00E6                             i1l3406 00BF  
                           i1l3158 0FF1                             i1l3326 0343  
                           i1l3318 0353                             i1l3520 0557  
                           i1l3512 053F                             i1l3256 050E  
                           i1l3432 0101                             i1l3408 00C4  
                           i1l3344 0395                             i1l3522 0560  
                           i1l3514 0545                             i1l3442 011C  
                           i1l3418 00DF                             i1l3338 0393  
                           i1l3290 02F3                             i1l3516 054B  
                           i1l3508 052A                             i1l3540 0595  
                           i1l3460 0164                             i1l3428 00FA  
                           i1l3380 005D                             i1l3534 057E  
                           i1l3518 0551                             i1l3542 05B4  
                           i1l3438 0115                             i1l3374 004F  
                           i1l3528 0570                             i1l3480 01A8  
                           i1l3448 0130                             i1l3384 0064  
                           i1l3296 0300                             i1l3288 02E7  
                           i1l3466 0170                             i1l3378 0056  
                           i1l3476 01A0                             i1l3492 01D8  
                           i1l3494 01F8                             i1l3770 0E30  
                           i1l3762 0E23                             i1l3772 0E32  
                           i1l3780 0E37                             i1l3766 0E29  
                           i1l3768 0E2D                             i1l3990 0DD9  
                           i1l3994 0DDF                             i1l5860 0FEC  
                           i1l3988 0DD8                             i1l5862 0E40  
                           i1l5854 031B                             i1l5864 01E1  
                           i1l5856 0320                             i1l5866 059D  
                           i1l5858 0FE7                     main@u8EventMap 00B1  
                           u198_25 0358                             _OSCCON 0099  
                           _TMR0IE 005D                             _TMR0IF 005A  
                ?_I2C_vMstStopSSP2 0070                             _SSP1IE 048B  
                           _SSP1IF 008B                             _SSP2IE 04A0  
                           _SSP2IF 00A0               __end_of_vExecCmdSSP2 0C48  
        __size_of_criticalSec_vEnd 0008           __size_of_lcd_vDrawCursor 0022  
                    main@keypadSts 00B2                 ??_I2C_vMstStopSSP2 002F  
     __size_of_I2C_vInitMasterSSP2 0015               KEYPAD_vInit@spStatus 003E  
                           ___bmul 0C7D                             ___wmul 07E4  
                _evt_u8GetEventMap 0CBC                          ??___awdiv 0033  
                   __CFG_STVREN$ON 0000                          ??___awmod 0033  
                           _memcpy 0D9C                             _memset 03AA  
               ?_evt_u8GetEventMap 0070                   ___awdiv@quotient 0036  
            ssp1_vWriteData@u8Addr 0026                    ___awmod@divisor 002F  
            ssp1_vWriteData@u8Data 0027                    ___awmod@counter 0034  
          ??_ST7032_vWriteDataSSP2 0037                ??_evt_u8GetEventMap 0030  
          _ST7032_vSetContrastSSP2 079F       I2C_vInitSlaveSSP1@pvCallback 0030  
          ??_ST7032_vWriteIconSSP2 0043                 _I2C_vInitSlaveSSP1 0D76  
         __size_of_ssp1_u8ReadData 0099            __end_of__initialization 0037  
                 ?_I2C_u8MstTxSSP2 0070    __end_of_ST7032_vDispSettingSSP2 0D33  
                 ?_vMasterWaitSSP2 0070                ?_I2C_vInitSlaveSSP1 002F  
              ___bmul@multiplicand 002F          __end_of_evt_u8GetEventMap 0CD6  
    lcd_vCursorSetting@bCursorDisp 0038                     __pcstackCOMMON 0070  
         __end_of_timer_vInterrupt 0DF3         __end_of_criticalSec_vBegin 0C1B  
                     __pidataBANK0 0C02                    ??_KEYPAD_u8Read 0078  
       __end_ofi1_criticalSec_vEnd 0C23               ??_I2C_vInitSlaveSSP1 0032  
                        ?i1_memset 0070               i1_criticalSec_vBegin 0C06  
       ST7032_vWriteIconSSP2@u8Map 0042               __end_of_KEYPAD_vInit 0E89  
                       __pbssBANK0 0051                         __pbssBANK1 00CD  
                       _sAppStatus 00CD              __size_of_vDmyCallback 0001  
             vExecCmdEndSSP2@u8Cmd 0030                         __pmaintext 01FF  
         ??_ST7032_vWriteCGRAMSSP2 0044            evt_vSetDrawEvent@u8Addr 0072  
                          ?___bmul 002F                            ?___wmul 002F  
          __size_of_bSetCursorSSP2 0046                         __pintentry 0004  
                ??_lcd_vDrawCursor 0047          evt_u8GetEventMap@u8EvtMap 0031  
                          ?_memcpy 0035                            ?_memset 002F  
                       _sMemoryMap 20C9          ??_ST7032_vSetContrastSSP2 0031  
                ?_evt_vSetEventMap 0070              ?i1_criticalSec_vBegin 0070  
                       ??i1_memset 0076                 ??_evt_vSetEventMap 0070  
                     _vDmyCallback 0003                            _SSP1ADD 0212  
                          _SSP2ADD 021A                            _SSP1BUF 0211  
                          _SSP2BUF 0219                     _ssp1_vCallback 0E22  
                          _SSP1MSK 0213                            _SSP2MSK 021B  
                _I2C_vSlaveIsrSSP1 0DF3              __size_of_vExecCmdSSP2 000B  
            _ST7032_bSetCursorSSP2 0CF3           evt_vSetEventMap@eEvtType 0071  
               ?_I2C_vSlaveIsrSSP1 0070          __size_of_ST7032_vInitSSP2 006B  
                     i1memset@dest 0070      __size_of_KEYPAD_bUpdateBuffer 003E  
              lcd_vDrawCGRAM@u8Idx 004D                   _criticalSec_vEnd 0C2B  
                ??_ssp1_u8ReadData 0070                ??_I2C_vSlaveIsrSSP1 002D  
       __size_of_evt_u8GetEventMap 001A                         _pvSSP1Func 005C  
                       _pvSSP2Func 005A                            _u8Depth 0055  
         __end_of_lcd_vDrawIconRAM 0D54                    _vExecCmdEndSSP2 0C6F  
                       _readColumn 0FBB                    __size_of___bmul 0012  
                          ___awdiv 0678        __size_of_I2C_u8MstStartSSP2 001D  
                          ___awmod 0759                    __size_of___wmul 001C  
         I2C_vInitMasterSSP2@eMode 0030                    __size_of_memcpy 002B  
                  __size_of_memset 00BC              __end_of_lcd_vDarwLine 0FBB  
                          __ptext1 0F39                            __ptext2 05BA  
                          __ptext3 0D33                            __ptext4 0E89  
                          __ptext5 0EC1                            __ptext6 0625  
                          __ptext7 0F79                            __ptext8 0D9C  
                          __ptext9 0D54                       __size_of_ISR 0009  
                     _vExecCmdSSP2 0C3D                _I2C_vInitMasterSSP2 0C8F  
 __size_of_ST7032_vDispSettingSSP2 0021                   ___awmod@dividend 0031  
           __end_of_ssp1_vCallback 0E52          __end_of_I2C_vSlaveIsrSSP1 0E22  
               lcd_vDarwLine@u8Msg 00A0                            clrloop0 0C49  
       ST7032_vWriteDataSSP2@u8Idx 003C         ST7032_vWriteDataSSP2@u8Len 0036  
             end_of_initialization 0037                            memcpy@d 003E  
                          memcpy@n 0037                            memcpy@s 003B  
        KEYPAD_bUpdateBuffer@u8Idx 007D                            memset@c 0031  
                          memset@k 0039                            memset@n 0033  
                          memset@s 003B               ?_I2C_vInitMasterSSP2 002F  
         __size_of_ssp1_vWriteData 01C4                  vExecCmdSSP2@u8Cmd 0030  
  __size_of_ST7032_vWriteCGRAMSSP2 0053          __size_of_I2C_vMstStopSSP2 0007  
           ??i1_criticalSec_vBegin 0070                   __CFG_FOSC$INTOSC 0000  
   __size_of_ST7032_vWriteDataSSP2 0049                    ?_ssp1_vCallback 0028  
            __size_of_KEYPAD_vInit 0037      __end_of_ST7032_vWriteDataSSP2 0713  
      I2C_vInitSlaveSSP1@u8Address 0032             ?_ST7032_bSetCursorSSP2 0042  
   __size_of_ST7032_vWriteIconSSP2 0038      __end_of_ST7032_vWriteIconSSP2 0EC1  
      __size_of_lcd_vCursorSetting 0018            __end_of_vExecCmdEndSSP2 0C7D  
            ??_I2C_vInitMasterSSP2 0030                        ?_readColumn 0070  
                   _bSetCursorSSP2 0713                  ?_timer_vInterrupt 0070  
                   __end_of___bmul 0C8F                     __end_of___wmul 0800  
                     _KEYPAD_vInit 0E52                          i1memset@c 0072  
                        i1memset@k 007A                          i1memset@n 0074  
                        i1memset@s 007C                 ??_timer_vInterrupt 0027  
                   __end_of_memcpy 0DC7                     __end_of_memset 0466  
              start_initialization 000F         __size_of_I2C_vSlaveIsrSSP1 002F  
               _criticalSec_vBegin 0C14                        __end_of_ISR 000D  
           _ST7032_vWriteCGRAMSSP2 0625                  __size_ofi1_memset 00BB  
               i1_criticalSec_vEnd 0C1B                ?_criticalSec_vBegin 0070  
                 _ST7032_vInitSSP2 05BA    ST7032_vWriteCGRAMSSP2@pu8BitMap 0042  
          __size_of_lcd_vDrawCGRAM 003A                    _lcd_vDrawCursor 0D54  
              ?i1_criticalSec_vEnd 0070               bSetCursorSSP2@u8Addr 0040  
           __end_of_bSetCursorSSP2 0759                           ??___bmul 0030  
         __size_of_I2C_u8MstTxSSP2 000A                           ??___wmul 0033  
         __size_of_vMasterWaitSSP2 0008                        __pdataBANK0 005A  
      ST7032_vWriteIconSSP2@u8Addr 0043               ??_criticalSec_vBegin 002F  
            __end_of_KEYPAD_u8Read 03AA                           ??_memcpy 0039  
                         ??_memset 0035                  ??_ssp1_vWriteData 0020  
                       memset@dest 002F               ??i1_criticalSec_vEnd 0070  
          _ST7032_vDispSettingSSP2 0D12        __size_of_I2C_vInitSlaveSSP1 0026  
         __end_of_criticalSec_vEnd 0C33                        __pbssBIGRAM 20C9  
                        ___latbits 0001                      __pcstackBANK0 0020  
                    __pcstackBANK1 00A0                    _ssp1_u8ReadData 0521  
              __size_of_readColumn 0045        ST7032_vWriteCGRAMSSP2@u8Idx 0048  
                 ?_vExecCmdEndSSP2 0070          __size_of_evt_vSetEventMap 000E  
                  ?_bSetCursorSSP2 0070                  ?_lcd_vDrawIconRAM 0070  
      I2C_vInitMasterSSP2@u8ClkDiv 002F                           ?___awdiv 002F  
                         ?___awmod 002F                 ??_lcd_vDrawIconRAM 0044  
                 _I2C_vMstStopSSP2 0C0D       __end_of_KEYPAD_bUpdateBuffer 0F39  
      I2C_u8MstStartSSP2@u8Address 0030                  _evt_vSetDrawEvent 0C54  
               ?_evt_vSetDrawEvent 0070     ST7032_vWriteDataSSP2@pu8WkData 003E  
          __end_of_lcd_vDrawCursor 0D76                ??_evt_vSetDrawEvent 0072  
   ST7032_vDispSettingSSP2@bCursor 0031                     ___wmul@product 0033  
              vDmyCallback@u8BusNo 0028                          clear_ram0 0C48  
       __end_of_I2C_u8MstStartSSP2 0CF3                           _SSP1CON1 0215  
                         _SSP1CON2 0216                           _SSP1CON3 0217  
                         _SSP2CON1 021D                           _SSP2CON2 021E  
                         _SSP2CON3 021F           ?_ST7032_vSetContrastSSP2 0070  
                         _SSP1STAT 0214                           _SSP2STAT 021C  
        ??_ST7032_vDispSettingSSP2 0033                   ??_ssp1_vCallback 002A  
             lcd_vDarwLine@u8RowNo 00B0          __end_of_evt_vSetDrawEvent 0C61  
   ST7032_vWriteCGRAMSSP2@u8CharNo 0045                  ___wmul@multiplier 002F  
      ST7032_bSetCursorSSP2@u8Addr 0046                  ??_I2C_u8MstTxSSP2 002F  
          __end_of_ssp1_u8ReadData 05BA               KEYPAD_u8Read@u8KeyNo 0025  
                ??_vMasterWaitSSP2 002F               KEYPAD_u8Read@u8PortA 0020  
             KEYPAD_u8Read@u8PortB 0021            ??_ST7032_bSetCursorSSP2 0043  
                         i1_memset 0466              lcd_vDrawIconRAM@u8Idx 0049  
                   _lcd_vDrawCGRAM 0EC1             __size_of_lcd_vDarwLine 0042  
                 _bMstStartFlgSSP1 0058                   _bMstStartFlgSSP2 0057  
   ST7032_vWriteCGRAMSSP2@pu8WkMap 0046                bSetCursorSSP2@u8Pos 0041  
                        memcpy@tmp 003A                       ??_readColumn 0070  
      KEYPAD_bUpdateBuffer@u8KeyNo 007C              ssp1_u8ReadData@u8Addr 0076  
                         _u8Status 0059                   __size_of___awdiv 0052  
            ssp1_u8ReadData@u8Data 0075                   __size_of___awmod 0046  
         __end_of_ST7032_vInitSSP2 0625            ?_ST7032_vWriteCGRAMSSP2 0042  
    __size_ofi1_criticalSec_vBegin 0007         __end_of_lcd_vCursorSetting 0CBC  
                         __ptext10 0CF3                           __ptext11 0713  
                         __ptext20 0C2B                           __ptext12 0678  
                         __ptext21 0C14                           __ptext13 0C7D  
                         __ptext30 03AA                           __ptext22 079F  
                         __ptext14 07E4                           __ptext31 0D76  
                         __ptext23 0C3D                           __ptext15 06CA  
                         __ptext40 0DF3                           __ptext32 0C8F  
                         __ptext24 0C6F                           __ptext16 0759  
                         __ptext41 0E22                           __ptext25 0C0D  
                         __ptext17 0CA4                           __ptext42 0003  
                         __ptext34 0DC7                           __ptext26 0C33  
                         __ptext18 0D12                           __ptext43 003B  
                         __ptext35 0EFB                           __ptext27 0CD6  
                         __ptext19 0CBC                           __ptext44 0466  
                         __ptext36 0C1B                           __ptext28 0C23  
                         __ptext45 0C54                           __ptext37 0C06  
                         __ptext29 0E52                           __ptext46 0C61  
                         __ptext38 02DD                           __ptext47 0521  
                         __ptext39 0FBB          __size_of_timer_vInterrupt 002C  
                     _SSP1CON1bits 0215                       _SSP1CON2bits 0216  
                 ?_lcd_vDrawCursor 0070              _ST7032_vWriteDataSSP2 06CA  
      __end_of_I2C_vInitMasterSSP2 0CA4             __end_of_lcd_vDrawCGRAM 0EFB  
                     _SSP2CON1bits 021D                       _SSP2CON2bits 021E  
       I2C_u8MstStartSSP2@bReadFlg 002F                 __end_of_readColumn 1000  
                    __size_of_main 00DE               _KEYPAD_bUpdateBuffer 0EFB  
            _ST7032_vWriteIconSSP2 0E89                   _evt_vSetEventMap 0C61  
    ST7032_vDispSettingSSP2@bBlink 0032                    _ssp1_vWriteData 003B  
  __end_of_ST7032_vSetContrastSSP2 07E4                  _lcd_vPowerSetting 0F39  
                         int$flags 007E                       _SSP1STATbits 0214  
               ?_lcd_vPowerSetting 0070     __end_of_ST7032_vWriteCGRAMSSP2 0678  
                     _SSP2STATbits 021C            I2C_vInitSlaveSSP1@eMode 002F  
       __size_of_evt_vSetDrawEvent 000D                      _lcd_vDarwLine 0F79  
            vDmyCallback@u8EvtType 0029                   ?_ssp1_u8ReadData 0070  
      ST7032_vWriteDataSSP2@pcData 003D                  ?_criticalSec_vEnd 0070  
              ??_lcd_vPowerSetting 0032                           memcpy@d1 003D  
                         memcpy@s1 0035                      ?_vDmyCallback 0028  
          ssp1_vCallback@u8EvtType 0029                 ??_criticalSec_vEnd 002F  
                  ?_lcd_vDrawCGRAM 0070                           intlevel1 0000  
         __end_of_I2C_vMstStopSSP2 0C14              ?_KEYPAD_bUpdateBuffer 0070  
                 ??_bSetCursorSSP2 0038                  __CFG_CLKOUTEN$OFF 0000  
        __end_of_lcd_vPowerSetting 0F79                 KEYPAD_u8Read@u8Col 0024  
               KEYPAD_u8Read@u8Row 0026         __end_of_I2C_vInitSlaveSSP1 0D9C  
      __size_of_criticalSec_vBegin 0007                     ?_lcd_vDarwLine 0070  
                      _stStateSSP1 0053                        _stStateSSP2 0051  
                       _OPTION_REG 0095                      ?_vExecCmdSSP2 0070  
      __size_ofi1_criticalSec_vEnd 0008  ST7032_vSetContrastSSP2@u8Contrast 0032  
                   ??_vDmyCallback 007E          __size_of_lcd_vDrawIconRAM 0021  
              readColumn@u16PinMap 0075             ?_ST7032_vWriteDataSSP2 0036  
            ssp1_vCallback@u8BusNo 0028            __end_of_ssp1_vWriteData 01FF  
           KEYPAD_u8Read@u16PinMap 0022             ?_ST7032_vWriteIconSSP2 0042  
           __size_of_KEYPAD_u8Read 00CD            timer_vInterrupt@u8KeyNo 0028  
                  _I2C_u8MstTxSSP2 0C33                    readColumn@u8Col 0077  
