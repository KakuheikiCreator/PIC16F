

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Jul 11 06:53:11 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	stringtext13,global,class=STRCODE,delta=2
    18                           	psect	stringtext14,global,class=STRCODE,delta=2
    19                           	psect	stringtext15,global,class=STRCODE,delta=2
    20                           	psect	stringtext16,global,class=STRCODE,delta=2
    21                           	psect	stringtext17,global,class=STRCODE,delta=2
    22                           	psect	stringtext18,global,class=STRCODE,delta=2
    23                           	psect	stringtext19,global,class=STRCODE,delta=2
    24                           	psect	stringtext20,global,class=STRCODE,delta=2
    25                           	psect	stringtext21,global,class=STRCODE,delta=2
    26                           	psect	stringtext22,global,class=STRCODE,delta=2
    27                           	psect	stringtext23,global,class=STRCODE,delta=2
    28                           	psect	stringtext24,global,class=STRCODE,delta=2
    29                           	psect	stringtext25,global,class=STRCODE,delta=2
    30                           	psect	stringtext26,global,class=STRCODE,delta=2
    31                           	psect	cinit,global,class=CODE,merge=1,delta=2
    32                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    33                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	inittext,global,class=CODE,delta=2
    36                           	psect	clrtext,global,class=CODE,delta=2
    37                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    38                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    39                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    40                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    41                           	psect	text1,local,class=CODE,merge=1,delta=2
    42                           	psect	text2,local,class=CODE,merge=1,delta=2
    43                           	psect	text3,local,class=CODE,merge=1,delta=2
    44                           	psect	text4,local,class=CODE,merge=1,delta=2
    45                           	psect	text5,local,class=CODE,merge=1,delta=2
    46                           	psect	text6,local,class=CODE,merge=1,delta=2
    47                           	psect	text7,local,class=CODE,merge=1,delta=2
    48                           	psect	text8,local,class=CODE,merge=1,delta=2
    49                           	psect	text9,local,class=CODE,merge=1,delta=2
    50                           	psect	text10,local,class=CODE,merge=1,delta=2
    51                           	psect	text11,local,class=CODE,merge=1,delta=2
    52                           	psect	text12,local,class=CODE,merge=1,delta=2
    53                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text15,local,class=CODE,merge=1,delta=2
    56                           	psect	text16,local,class=CODE,merge=1,delta=2
    57                           	psect	text17,local,class=CODE,merge=1,delta=2
    58                           	psect	text18,local,class=CODE,merge=1,delta=2
    59                           	psect	text19,local,class=CODE,merge=1,delta=2
    60                           	psect	text20,local,class=CODE,merge=1,delta=2
    61                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text24,local,class=CODE,merge=1,delta=2
    65                           	psect	text25,local,class=CODE,merge=1,delta=2
    66                           	psect	text26,local,class=CODE,merge=1,delta=2
    67                           	psect	text27,local,class=CODE,merge=1,delta=2
    68                           	psect	text28,local,class=CODE,merge=1,delta=2
    69                           	psect	text29,local,class=CODE,merge=1,delta=2
    70                           	psect	text30,local,class=CODE,merge=1,delta=2
    71                           	psect	text31,local,class=CODE,merge=1,delta=2
    72                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    73                           	psect	text33,local,class=CODE,merge=1,delta=2
    74                           	psect	text34,local,class=CODE,merge=1,delta=2
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	psect	text36,local,class=CODE,merge=1,delta=2
    77                           	psect	text37,local,class=CODE,merge=1,delta=2
    78                           	psect	text38,local,class=CODE,merge=1,delta=2
    79                           	psect	text39,local,class=CODE,merge=1,delta=2
    80                           	psect	text40,local,class=CODE,merge=1,delta=2
    81                           	psect	text41,local,class=CODE,merge=1,delta=2
    82                           	psect	text42,local,class=CODE,merge=1,delta=2
    83                           	psect	text43,local,class=CODE,merge=1,delta=2
    84                           	psect	text44,local,class=CODE,merge=1,delta=2
    85                           	dabs	1,0x7E,2
    86  0000                     
    87                           ; Version 2.05
    88                           ; Generated 20/12/2018 GMT
    89                           ; 
    90                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC16F1827 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0008                     	;# 
   130  0009                     	;# 
   131  000A                     	;# 
   132  000B                     	;# 
   133  000C                     	;# 
   134  000D                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0016                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001C                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  008C                     	;# 
   151  008D                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0095                     	;# 
   157  0096                     	;# 
   158  0097                     	;# 
   159  0098                     	;# 
   160  0099                     	;# 
   161  009A                     	;# 
   162  009B                     	;# 
   163  009B                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  0111                     	;# 
   170  0112                     	;# 
   171  0113                     	;# 
   172  0114                     	;# 
   173  0115                     	;# 
   174  0116                     	;# 
   175  0117                     	;# 
   176  0118                     	;# 
   177  0119                     	;# 
   178  011A                     	;# 
   179  011B                     	;# 
   180  011D                     	;# 
   181  011E                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184  0191                     	;# 
   185  0191                     	;# 
   186  0192                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0193                     	;# 
   190  0194                     	;# 
   191  0195                     	;# 
   192  0196                     	;# 
   193  0199                     	;# 
   194  019A                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019C                     	;# 
   200  019C                     	;# 
   201  019D                     	;# 
   202  019E                     	;# 
   203  019F                     	;# 
   204  020C                     	;# 
   205  020D                     	;# 
   206  0211                     	;# 
   207  0211                     	;# 
   208  0212                     	;# 
   209  0212                     	;# 
   210  0213                     	;# 
   211  0213                     	;# 
   212  0214                     	;# 
   213  0214                     	;# 
   214  0215                     	;# 
   215  0215                     	;# 
   216  0215                     	;# 
   217  0216                     	;# 
   218  0216                     	;# 
   219  0217                     	;# 
   220  0217                     	;# 
   221  0219                     	;# 
   222  021A                     	;# 
   223  021B                     	;# 
   224  021C                     	;# 
   225  021D                     	;# 
   226  021E                     	;# 
   227  021F                     	;# 
   228  0291                     	;# 
   229  0291                     	;# 
   230  0292                     	;# 
   231  0293                     	;# 
   232  0294                     	;# 
   233  0295                     	;# 
   234  0295                     	;# 
   235  0296                     	;# 
   236  0298                     	;# 
   237  0298                     	;# 
   238  0299                     	;# 
   239  029A                     	;# 
   240  029B                     	;# 
   241  029C                     	;# 
   242  029C                     	;# 
   243  029D                     	;# 
   244  029E                     	;# 
   245  029E                     	;# 
   246  0311                     	;# 
   247  0311                     	;# 
   248  0312                     	;# 
   249  0313                     	;# 
   250  0318                     	;# 
   251  0318                     	;# 
   252  0319                     	;# 
   253  031A                     	;# 
   254  0394                     	;# 
   255  0395                     	;# 
   256  0396                     	;# 
   257  039A                     	;# 
   258  039C                     	;# 
   259  039D                     	;# 
   260  039E                     	;# 
   261  039F                     	;# 
   262  0415                     	;# 
   263  0416                     	;# 
   264  0417                     	;# 
   265  041C                     	;# 
   266  041D                     	;# 
   267  041E                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0013                     	;# 
   296  0014                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  001E                     	;# 
   307  001F                     	;# 
   308  008C                     	;# 
   309  008D                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0093                     	;# 
   313  0094                     	;# 
   314  0095                     	;# 
   315  0096                     	;# 
   316  0097                     	;# 
   317  0098                     	;# 
   318  0099                     	;# 
   319  009A                     	;# 
   320  009B                     	;# 
   321  009B                     	;# 
   322  009C                     	;# 
   323  009D                     	;# 
   324  009E                     	;# 
   325  010C                     	;# 
   326  010D                     	;# 
   327  0111                     	;# 
   328  0112                     	;# 
   329  0113                     	;# 
   330  0114                     	;# 
   331  0115                     	;# 
   332  0116                     	;# 
   333  0117                     	;# 
   334  0118                     	;# 
   335  0119                     	;# 
   336  011A                     	;# 
   337  011B                     	;# 
   338  011D                     	;# 
   339  011E                     	;# 
   340  018C                     	;# 
   341  018D                     	;# 
   342  0191                     	;# 
   343  0191                     	;# 
   344  0192                     	;# 
   345  0193                     	;# 
   346  0193                     	;# 
   347  0193                     	;# 
   348  0194                     	;# 
   349  0195                     	;# 
   350  0196                     	;# 
   351  0199                     	;# 
   352  019A                     	;# 
   353  019B                     	;# 
   354  019B                     	;# 
   355  019B                     	;# 
   356  019B                     	;# 
   357  019C                     	;# 
   358  019C                     	;# 
   359  019D                     	;# 
   360  019E                     	;# 
   361  019F                     	;# 
   362  020C                     	;# 
   363  020D                     	;# 
   364  0211                     	;# 
   365  0211                     	;# 
   366  0212                     	;# 
   367  0212                     	;# 
   368  0213                     	;# 
   369  0213                     	;# 
   370  0214                     	;# 
   371  0214                     	;# 
   372  0215                     	;# 
   373  0215                     	;# 
   374  0215                     	;# 
   375  0216                     	;# 
   376  0216                     	;# 
   377  0217                     	;# 
   378  0217                     	;# 
   379  0219                     	;# 
   380  021A                     	;# 
   381  021B                     	;# 
   382  021C                     	;# 
   383  021D                     	;# 
   384  021E                     	;# 
   385  021F                     	;# 
   386  0291                     	;# 
   387  0291                     	;# 
   388  0292                     	;# 
   389  0293                     	;# 
   390  0294                     	;# 
   391  0295                     	;# 
   392  0295                     	;# 
   393  0296                     	;# 
   394  0298                     	;# 
   395  0298                     	;# 
   396  0299                     	;# 
   397  029A                     	;# 
   398  029B                     	;# 
   399  029C                     	;# 
   400  029C                     	;# 
   401  029D                     	;# 
   402  029E                     	;# 
   403  029E                     	;# 
   404  0311                     	;# 
   405  0311                     	;# 
   406  0312                     	;# 
   407  0313                     	;# 
   408  0318                     	;# 
   409  0318                     	;# 
   410  0319                     	;# 
   411  031A                     	;# 
   412  0394                     	;# 
   413  0395                     	;# 
   414  0396                     	;# 
   415  039A                     	;# 
   416  039C                     	;# 
   417  039D                     	;# 
   418  039E                     	;# 
   419  039F                     	;# 
   420  0415                     	;# 
   421  0416                     	;# 
   422  0417                     	;# 
   423  041C                     	;# 
   424  041D                     	;# 
   425  041E                     	;# 
   426  0FE4                     	;# 
   427  0FE5                     	;# 
   428  0FE6                     	;# 
   429  0FE7                     	;# 
   430  0FE8                     	;# 
   431  0FE9                     	;# 
   432  0FEA                     	;# 
   433  0FEB                     	;# 
   434  0FED                     	;# 
   435  0FEE                     	;# 
   436  0FEF                     	;# 
   437  0000                     	;# 
   438  0001                     	;# 
   439  0002                     	;# 
   440  0003                     	;# 
   441  0004                     	;# 
   442  0005                     	;# 
   443  0006                     	;# 
   444  0007                     	;# 
   445  0008                     	;# 
   446  0009                     	;# 
   447  000A                     	;# 
   448  000B                     	;# 
   449  000C                     	;# 
   450  000D                     	;# 
   451  0011                     	;# 
   452  0012                     	;# 
   453  0013                     	;# 
   454  0014                     	;# 
   455  0015                     	;# 
   456  0016                     	;# 
   457  0016                     	;# 
   458  0017                     	;# 
   459  0018                     	;# 
   460  0019                     	;# 
   461  001A                     	;# 
   462  001B                     	;# 
   463  001C                     	;# 
   464  001E                     	;# 
   465  001F                     	;# 
   466  008C                     	;# 
   467  008D                     	;# 
   468  0091                     	;# 
   469  0092                     	;# 
   470  0093                     	;# 
   471  0094                     	;# 
   472  0095                     	;# 
   473  0096                     	;# 
   474  0097                     	;# 
   475  0098                     	;# 
   476  0099                     	;# 
   477  009A                     	;# 
   478  009B                     	;# 
   479  009B                     	;# 
   480  009C                     	;# 
   481  009D                     	;# 
   482  009E                     	;# 
   483  010C                     	;# 
   484  010D                     	;# 
   485  0111                     	;# 
   486  0112                     	;# 
   487  0113                     	;# 
   488  0114                     	;# 
   489  0115                     	;# 
   490  0116                     	;# 
   491  0117                     	;# 
   492  0118                     	;# 
   493  0119                     	;# 
   494  011A                     	;# 
   495  011B                     	;# 
   496  011D                     	;# 
   497  011E                     	;# 
   498  018C                     	;# 
   499  018D                     	;# 
   500  0191                     	;# 
   501  0191                     	;# 
   502  0192                     	;# 
   503  0193                     	;# 
   504  0193                     	;# 
   505  0193                     	;# 
   506  0194                     	;# 
   507  0195                     	;# 
   508  0196                     	;# 
   509  0199                     	;# 
   510  019A                     	;# 
   511  019B                     	;# 
   512  019B                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019C                     	;# 
   516  019C                     	;# 
   517  019D                     	;# 
   518  019E                     	;# 
   519  019F                     	;# 
   520  020C                     	;# 
   521  020D                     	;# 
   522  0211                     	;# 
   523  0211                     	;# 
   524  0212                     	;# 
   525  0212                     	;# 
   526  0213                     	;# 
   527  0213                     	;# 
   528  0214                     	;# 
   529  0214                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0215                     	;# 
   533  0216                     	;# 
   534  0216                     	;# 
   535  0217                     	;# 
   536  0217                     	;# 
   537  0219                     	;# 
   538  021A                     	;# 
   539  021B                     	;# 
   540  021C                     	;# 
   541  021D                     	;# 
   542  021E                     	;# 
   543  021F                     	;# 
   544  0291                     	;# 
   545  0291                     	;# 
   546  0292                     	;# 
   547  0293                     	;# 
   548  0294                     	;# 
   549  0295                     	;# 
   550  0295                     	;# 
   551  0296                     	;# 
   552  0298                     	;# 
   553  0298                     	;# 
   554  0299                     	;# 
   555  029A                     	;# 
   556  029B                     	;# 
   557  029C                     	;# 
   558  029C                     	;# 
   559  029D                     	;# 
   560  029E                     	;# 
   561  029E                     	;# 
   562  0311                     	;# 
   563  0311                     	;# 
   564  0312                     	;# 
   565  0313                     	;# 
   566  0318                     	;# 
   567  0318                     	;# 
   568  0319                     	;# 
   569  031A                     	;# 
   570  0394                     	;# 
   571  0395                     	;# 
   572  0396                     	;# 
   573  039A                     	;# 
   574  039C                     	;# 
   575  039D                     	;# 
   576  039E                     	;# 
   577  039F                     	;# 
   578  0415                     	;# 
   579  0416                     	;# 
   580  0417                     	;# 
   581  041C                     	;# 
   582  041D                     	;# 
   583  041E                     	;# 
   584  0FE4                     	;# 
   585  0FE5                     	;# 
   586  0FE6                     	;# 
   587  0FE7                     	;# 
   588  0FE8                     	;# 
   589  0FE9                     	;# 
   590  0FEA                     	;# 
   591  0FEB                     	;# 
   592  0FED                     	;# 
   593  0FEE                     	;# 
   594  0FEF                     	;# 
   595  0000                     	;# 
   596  0001                     	;# 
   597  0002                     	;# 
   598  0003                     	;# 
   599  0004                     	;# 
   600  0005                     	;# 
   601  0006                     	;# 
   602  0007                     	;# 
   603  0008                     	;# 
   604  0009                     	;# 
   605  000A                     	;# 
   606  000B                     	;# 
   607  000C                     	;# 
   608  000D                     	;# 
   609  0011                     	;# 
   610  0012                     	;# 
   611  0013                     	;# 
   612  0014                     	;# 
   613  0015                     	;# 
   614  0016                     	;# 
   615  0016                     	;# 
   616  0017                     	;# 
   617  0018                     	;# 
   618  0019                     	;# 
   619  001A                     	;# 
   620  001B                     	;# 
   621  001C                     	;# 
   622  001E                     	;# 
   623  001F                     	;# 
   624  008C                     	;# 
   625  008D                     	;# 
   626  0091                     	;# 
   627  0092                     	;# 
   628  0093                     	;# 
   629  0094                     	;# 
   630  0095                     	;# 
   631  0096                     	;# 
   632  0097                     	;# 
   633  0098                     	;# 
   634  0099                     	;# 
   635  009A                     	;# 
   636  009B                     	;# 
   637  009B                     	;# 
   638  009C                     	;# 
   639  009D                     	;# 
   640  009E                     	;# 
   641  010C                     	;# 
   642  010D                     	;# 
   643  0111                     	;# 
   644  0112                     	;# 
   645  0113                     	;# 
   646  0114                     	;# 
   647  0115                     	;# 
   648  0116                     	;# 
   649  0117                     	;# 
   650  0118                     	;# 
   651  0119                     	;# 
   652  011A                     	;# 
   653  011B                     	;# 
   654  011D                     	;# 
   655  011E                     	;# 
   656  018C                     	;# 
   657  018D                     	;# 
   658  0191                     	;# 
   659  0191                     	;# 
   660  0192                     	;# 
   661  0193                     	;# 
   662  0193                     	;# 
   663  0193                     	;# 
   664  0194                     	;# 
   665  0195                     	;# 
   666  0196                     	;# 
   667  0199                     	;# 
   668  019A                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019C                     	;# 
   674  019C                     	;# 
   675  019D                     	;# 
   676  019E                     	;# 
   677  019F                     	;# 
   678  020C                     	;# 
   679  020D                     	;# 
   680  0211                     	;# 
   681  0211                     	;# 
   682  0212                     	;# 
   683  0212                     	;# 
   684  0213                     	;# 
   685  0213                     	;# 
   686  0214                     	;# 
   687  0214                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0215                     	;# 
   691  0216                     	;# 
   692  0216                     	;# 
   693  0217                     	;# 
   694  0217                     	;# 
   695  0219                     	;# 
   696  021A                     	;# 
   697  021B                     	;# 
   698  021C                     	;# 
   699  021D                     	;# 
   700  021E                     	;# 
   701  021F                     	;# 
   702  0291                     	;# 
   703  0291                     	;# 
   704  0292                     	;# 
   705  0293                     	;# 
   706  0294                     	;# 
   707  0295                     	;# 
   708  0295                     	;# 
   709  0296                     	;# 
   710  0298                     	;# 
   711  0298                     	;# 
   712  0299                     	;# 
   713  029A                     	;# 
   714  029B                     	;# 
   715  029C                     	;# 
   716  029C                     	;# 
   717  029D                     	;# 
   718  029E                     	;# 
   719  029E                     	;# 
   720  0311                     	;# 
   721  0311                     	;# 
   722  0312                     	;# 
   723  0313                     	;# 
   724  0318                     	;# 
   725  0318                     	;# 
   726  0319                     	;# 
   727  031A                     	;# 
   728  0394                     	;# 
   729  0395                     	;# 
   730  0396                     	;# 
   731  039A                     	;# 
   732  039C                     	;# 
   733  039D                     	;# 
   734  039E                     	;# 
   735  039F                     	;# 
   736  0415                     	;# 
   737  0416                     	;# 
   738  0417                     	;# 
   739  041C                     	;# 
   740  041D                     	;# 
   741  041E                     	;# 
   742  0FE4                     	;# 
   743  0FE5                     	;# 
   744  0FE6                     	;# 
   745  0FE7                     	;# 
   746  0FE8                     	;# 
   747  0FE9                     	;# 
   748  0FEA                     	;# 
   749  0FEB                     	;# 
   750  0FED                     	;# 
   751  0FEE                     	;# 
   752  0FEF                     	;# 
   753  0000                     	;# 
   754  0001                     	;# 
   755  0002                     	;# 
   756  0003                     	;# 
   757  0004                     	;# 
   758  0005                     	;# 
   759  0006                     	;# 
   760  0007                     	;# 
   761  0008                     	;# 
   762  0009                     	;# 
   763  000A                     	;# 
   764  000B                     	;# 
   765  000C                     	;# 
   766  000D                     	;# 
   767  0011                     	;# 
   768  0012                     	;# 
   769  0013                     	;# 
   770  0014                     	;# 
   771  0015                     	;# 
   772  0016                     	;# 
   773  0016                     	;# 
   774  0017                     	;# 
   775  0018                     	;# 
   776  0019                     	;# 
   777  001A                     	;# 
   778  001B                     	;# 
   779  001C                     	;# 
   780  001E                     	;# 
   781  001F                     	;# 
   782  008C                     	;# 
   783  008D                     	;# 
   784  0091                     	;# 
   785  0092                     	;# 
   786  0093                     	;# 
   787  0094                     	;# 
   788  0095                     	;# 
   789  0096                     	;# 
   790  0097                     	;# 
   791  0098                     	;# 
   792  0099                     	;# 
   793  009A                     	;# 
   794  009B                     	;# 
   795  009B                     	;# 
   796  009C                     	;# 
   797  009D                     	;# 
   798  009E                     	;# 
   799  010C                     	;# 
   800  010D                     	;# 
   801  0111                     	;# 
   802  0112                     	;# 
   803  0113                     	;# 
   804  0114                     	;# 
   805  0115                     	;# 
   806  0116                     	;# 
   807  0117                     	;# 
   808  0118                     	;# 
   809  0119                     	;# 
   810  011A                     	;# 
   811  011B                     	;# 
   812  011D                     	;# 
   813  011E                     	;# 
   814  018C                     	;# 
   815  018D                     	;# 
   816  0191                     	;# 
   817  0191                     	;# 
   818  0192                     	;# 
   819  0193                     	;# 
   820  0193                     	;# 
   821  0193                     	;# 
   822  0194                     	;# 
   823  0195                     	;# 
   824  0196                     	;# 
   825  0199                     	;# 
   826  019A                     	;# 
   827  019B                     	;# 
   828  019B                     	;# 
   829  019B                     	;# 
   830  019B                     	;# 
   831  019C                     	;# 
   832  019C                     	;# 
   833  019D                     	;# 
   834  019E                     	;# 
   835  019F                     	;# 
   836  020C                     	;# 
   837  020D                     	;# 
   838  0211                     	;# 
   839  0211                     	;# 
   840  0212                     	;# 
   841  0212                     	;# 
   842  0213                     	;# 
   843  0213                     	;# 
   844  0214                     	;# 
   845  0214                     	;# 
   846  0215                     	;# 
   847  0215                     	;# 
   848  0215                     	;# 
   849  0216                     	;# 
   850  0216                     	;# 
   851  0217                     	;# 
   852  0217                     	;# 
   853  0219                     	;# 
   854  021A                     	;# 
   855  021B                     	;# 
   856  021C                     	;# 
   857  021D                     	;# 
   858  021E                     	;# 
   859  021F                     	;# 
   860  0291                     	;# 
   861  0291                     	;# 
   862  0292                     	;# 
   863  0293                     	;# 
   864  0294                     	;# 
   865  0295                     	;# 
   866  0295                     	;# 
   867  0296                     	;# 
   868  0298                     	;# 
   869  0298                     	;# 
   870  0299                     	;# 
   871  029A                     	;# 
   872  029B                     	;# 
   873  029C                     	;# 
   874  029C                     	;# 
   875  029D                     	;# 
   876  029E                     	;# 
   877  029E                     	;# 
   878  0311                     	;# 
   879  0311                     	;# 
   880  0312                     	;# 
   881  0313                     	;# 
   882  0318                     	;# 
   883  0318                     	;# 
   884  0319                     	;# 
   885  031A                     	;# 
   886  0394                     	;# 
   887  0395                     	;# 
   888  0396                     	;# 
   889  039A                     	;# 
   890  039C                     	;# 
   891  039D                     	;# 
   892  039E                     	;# 
   893  039F                     	;# 
   894  0415                     	;# 
   895  0416                     	;# 
   896  0417                     	;# 
   897  041C                     	;# 
   898  041D                     	;# 
   899  041E                     	;# 
   900  0FE4                     	;# 
   901  0FE5                     	;# 
   902  0FE6                     	;# 
   903  0FE7                     	;# 
   904  0FE8                     	;# 
   905  0FE9                     	;# 
   906  0FEA                     	;# 
   907  0FEB                     	;# 
   908  0FED                     	;# 
   909  0FEE                     	;# 
   910  0FEF                     	;# 
   911  0000                     	;# 
   912  0001                     	;# 
   913  0002                     	;# 
   914  0003                     	;# 
   915  0004                     	;# 
   916  0005                     	;# 
   917  0006                     	;# 
   918  0007                     	;# 
   919  0008                     	;# 
   920  0009                     	;# 
   921  000A                     	;# 
   922  000B                     	;# 
   923  000C                     	;# 
   924  000D                     	;# 
   925  0011                     	;# 
   926  0012                     	;# 
   927  0013                     	;# 
   928  0014                     	;# 
   929  0015                     	;# 
   930  0016                     	;# 
   931  0016                     	;# 
   932  0017                     	;# 
   933  0018                     	;# 
   934  0019                     	;# 
   935  001A                     	;# 
   936  001B                     	;# 
   937  001C                     	;# 
   938  001E                     	;# 
   939  001F                     	;# 
   940  008C                     	;# 
   941  008D                     	;# 
   942  0091                     	;# 
   943  0092                     	;# 
   944  0093                     	;# 
   945  0094                     	;# 
   946  0095                     	;# 
   947  0096                     	;# 
   948  0097                     	;# 
   949  0098                     	;# 
   950  0099                     	;# 
   951  009A                     	;# 
   952  009B                     	;# 
   953  009B                     	;# 
   954  009C                     	;# 
   955  009D                     	;# 
   956  009E                     	;# 
   957  010C                     	;# 
   958  010D                     	;# 
   959  0111                     	;# 
   960  0112                     	;# 
   961  0113                     	;# 
   962  0114                     	;# 
   963  0115                     	;# 
   964  0116                     	;# 
   965  0117                     	;# 
   966  0118                     	;# 
   967  0119                     	;# 
   968  011A                     	;# 
   969  011B                     	;# 
   970  011D                     	;# 
   971  011E                     	;# 
   972  018C                     	;# 
   973  018D                     	;# 
   974  0191                     	;# 
   975  0191                     	;# 
   976  0192                     	;# 
   977  0193                     	;# 
   978  0193                     	;# 
   979  0193                     	;# 
   980  0194                     	;# 
   981  0195                     	;# 
   982  0196                     	;# 
   983  0199                     	;# 
   984  019A                     	;# 
   985  019B                     	;# 
   986  019B                     	;# 
   987  019B                     	;# 
   988  019B                     	;# 
   989  019C                     	;# 
   990  019C                     	;# 
   991  019D                     	;# 
   992  019E                     	;# 
   993  019F                     	;# 
   994  020C                     	;# 
   995  020D                     	;# 
   996  0211                     	;# 
   997  0211                     	;# 
   998  0212                     	;# 
   999  0212                     	;# 
  1000  0213                     	;# 
  1001  0213                     	;# 
  1002  0214                     	;# 
  1003  0214                     	;# 
  1004  0215                     	;# 
  1005  0215                     	;# 
  1006  0215                     	;# 
  1007  0216                     	;# 
  1008  0216                     	;# 
  1009  0217                     	;# 
  1010  0217                     	;# 
  1011  0219                     	;# 
  1012  021A                     	;# 
  1013  021B                     	;# 
  1014  021C                     	;# 
  1015  021D                     	;# 
  1016  021E                     	;# 
  1017  021F                     	;# 
  1018  0291                     	;# 
  1019  0291                     	;# 
  1020  0292                     	;# 
  1021  0293                     	;# 
  1022  0294                     	;# 
  1023  0295                     	;# 
  1024  0295                     	;# 
  1025  0296                     	;# 
  1026  0298                     	;# 
  1027  0298                     	;# 
  1028  0299                     	;# 
  1029  029A                     	;# 
  1030  029B                     	;# 
  1031  029C                     	;# 
  1032  029C                     	;# 
  1033  029D                     	;# 
  1034  029E                     	;# 
  1035  029E                     	;# 
  1036  0311                     	;# 
  1037  0311                     	;# 
  1038  0312                     	;# 
  1039  0313                     	;# 
  1040  0318                     	;# 
  1041  0318                     	;# 
  1042  0319                     	;# 
  1043  031A                     	;# 
  1044  0394                     	;# 
  1045  0395                     	;# 
  1046  0396                     	;# 
  1047  039A                     	;# 
  1048  039C                     	;# 
  1049  039D                     	;# 
  1050  039E                     	;# 
  1051  039F                     	;# 
  1052  0415                     	;# 
  1053  0416                     	;# 
  1054  0417                     	;# 
  1055  041C                     	;# 
  1056  041D                     	;# 
  1057  041E                     	;# 
  1058  0FE4                     	;# 
  1059  0FE5                     	;# 
  1060  0FE6                     	;# 
  1061  0FE7                     	;# 
  1062  0FE8                     	;# 
  1063  0FE9                     	;# 
  1064  0FEA                     	;# 
  1065  0FEB                     	;# 
  1066  0FED                     	;# 
  1067  0FEE                     	;# 
  1068  0FEF                     	;# 
  1069                           
  1070                           	psect	idataBANK1
  1071  0A99                     __pidataBANK1:	
  1072                           
  1073                           ;initializer for ssp2_vLCDTest03@F2641
  1074  0A99  3411               	retlw	17
  1075  0A9A  340A               	retlw	10
  1076  0A9B  3404               	retlw	4
  1077  0A9C  3415               	retlw	21
  1078  0A9D  3415               	retlw	21
  1079  0A9E  3404               	retlw	4
  1080  0A9F  340A               	retlw	10
  1081  0AA0  3411               	retlw	17
  1082                           
  1083                           ;initializer for _pvSSP2Func
  1084  0AA1  3403               	retlw	low _vDmyCallback
  1085  0AA2  3400               	retlw	high _vDmyCallback
  1086                           
  1087                           ;initializer for _pvSSP1Func
  1088  0AA3  3403               	retlw	low _vDmyCallback
  1089  0AA4  3400               	retlw	high _vDmyCallback
  1090                           
  1091                           	psect	stringtext1
  1092  080A                     __pstringtext1:	
  1093  080A                     _KEY_LIST:	
  1094  080A  3431               	retlw	49
  1095  080B  3432               	retlw	50
  1096  080C  3433               	retlw	51
  1097  080D  3441               	retlw	65
  1098  080E  3434               	retlw	52
  1099  080F  3435               	retlw	53
  1100  0810  3436               	retlw	54
  1101  0811  3442               	retlw	66
  1102  0812  3437               	retlw	55
  1103  0813  3438               	retlw	56
  1104  0814  3439               	retlw	57
  1105  0815  3443               	retlw	67
  1106  0816  342A               	retlw	42
  1107  0817  3430               	retlw	48
  1108  0818  3423               	retlw	35
  1109  0819  3444               	retlw	68
  1110  081A  3400               	retlw	0
  1111  081B                     __end_of_KEY_LIST:	
  1112                           
  1113                           	psect	stringtext2
  1114  07E8                     __pstringtext2:	
  1115  07E8                     _HEX_LIST:	
  1116  07E8  3430               	retlw	48
  1117  07E9  3431               	retlw	49
  1118  07EA  3432               	retlw	50
  1119  07EB  3433               	retlw	51
  1120  07EC  3434               	retlw	52
  1121  07ED  3435               	retlw	53
  1122  07EE  3436               	retlw	54
  1123  07EF  3437               	retlw	55
  1124  07F0  3438               	retlw	56
  1125  07F1  3439               	retlw	57
  1126  07F2  3441               	retlw	65
  1127  07F3  3442               	retlw	66
  1128  07F4  3443               	retlw	67
  1129  07F5  3444               	retlw	68
  1130  07F6  3445               	retlw	69
  1131  07F7  3446               	retlw	70
  1132  07F8  3400               	retlw	0
  1133  07F9                     __end_of_HEX_LIST:	
  1134  0015                     _TMR0	set	21
  1135  000D                     _PORTB	set	13
  1136  000C                     _PORTA	set	12
  1137  00A1                     _BCL2IF	set	161
  1138  00A0                     _SSP2IF	set	160
  1139  0093                     _BCL1IF	set	147
  1140  008B                     _SSP1IF	set	139
  1141  006B                     _RB3	set	107
  1142  0068                     _RB0	set	104
  1143  005F                     _GIE	set	95
  1144  005E                     _PEIE	set	94
  1145  005D                     _TMR0IE	set	93
  1146  005A                     _TMR0IF	set	90
  1147  0095                     _OPTION_REG	set	149
  1148  008D                     _TRISB	set	141
  1149  008C                     _TRISA	set	140
  1150  0099                     _OSCCON	set	153
  1151  04A1                     _BCL2IE	set	1185
  1152  04A0                     _SSP2IE	set	1184
  1153  0493                     _BCL1IE	set	1171
  1154  048B                     _SSP1IE	set	1163
  1155  018D                     _ANSELB	set	397
  1156  018C                     _ANSELA	set	396
  1157  021C                     _SSP2STATbits	set	540
  1158  0214                     _SSP1STATbits	set	532
  1159  021D                     _SSP2CON1bits	set	541
  1160  0215                     _SSP1CON1bits	set	533
  1161  0219                     _SSP2BUF	set	537
  1162  021E                     _SSP2CON2bits	set	542
  1163  0216                     _SSP1CON2bits	set	534
  1164  021B                     _SSP2MSK	set	539
  1165  021F                     _SSP2CON3	set	543
  1166  0213                     _SSP1MSK	set	531
  1167  0217                     _SSP1CON3	set	535
  1168  021E                     _SSP2CON2	set	542
  1169  021D                     _SSP2CON1	set	541
  1170  021A                     _SSP2ADD	set	538
  1171  021C                     _SSP2STAT	set	540
  1172  0216                     _SSP1CON2	set	534
  1173  0215                     _SSP1CON1	set	533
  1174  0212                     _SSP1ADD	set	530
  1175  0214                     _SSP1STAT	set	532
  1176  0211                     _SSP1BUF	set	529
  1177  07F9                     STR_25:	
  1178  07F9  344E               	retlw	78	;'N'
  1179  07FA  346F               	retlw	111	;'o'
  1180  07FB  346E               	retlw	110	;'n'
  1181  07FC  3465               	retlw	101	;'e'
  1182  07FD  3420               	retlw	32	;' '
  1183  07FE  3420               	retlw	32	;' '
  1184  07FF  3420               	retlw	32	;' '
  1185  0800  343A               	retlw	58	;':'
  1186  0801  3420               	retlw	32	;' '
  1187  0802  3420               	retlw	32	;' '
  1188  0803  3420               	retlw	32	;' '
  1189  0804  3420               	retlw	32	;' '
  1190  0805  3420               	retlw	32	;' '
  1191  0806  3420               	retlw	32	;' '
  1192  0807  3420               	retlw	32	;' '
  1193  0808  3420               	retlw	32	;' '
  1194  0809  3400               	retlw	0
  1195                           
  1196                           	psect	stringtext3
  1197  081B                     __pstringtext3:	
  1198  081B                     STR_26:	
  1199  081B  344E               	retlw	78	;'N'
  1200  081C  346F               	retlw	111	;'o'
  1201  081D  346E               	retlw	110	;'n'
  1202  081E  3465               	retlw	101	;'e'
  1203  081F  343A               	retlw	58	;':'
  1204  0820  3445               	retlw	69	;'E'
  1205  0821  3472               	retlw	114	;'r'
  1206  0822  3472               	retlw	114	;'r'
  1207  0823  346F               	retlw	111	;'o'
  1208  0824  3472               	retlw	114	;'r'
  1209  0825  3420               	retlw	32	;' '
  1210  0826  3420               	retlw	32	;' '
  1211  0827  3420               	retlw	32	;' '
  1212  0828  3420               	retlw	32	;' '
  1213  0829  3420               	retlw	32	;' '
  1214  082A  3420               	retlw	32	;' '
  1215  082B  3400               	retlw	0
  1216                           
  1217                           	psect	stringtext4
  1218  082C                     __pstringtext4:	
  1219  082C                     STR_1:	
  1220  082C  3454               	retlw	84	;'T'
  1221  082D  3465               	retlw	101	;'e'
  1222  082E  3473               	retlw	115	;'s'
  1223  082F  3474               	retlw	116	;'t'
  1224  0830  343A               	retlw	58	;':'
  1225  0831  3449               	retlw	73	;'I'
  1226  0832  3432               	retlw	50	;'2'
  1227  0833  3443               	retlw	67	;'C'
  1228  0834  3420               	retlw	32	;' '
  1229  0835  3430               	retlw	48	;'0'
  1230  0836  3431               	retlw	49	;'1'
  1231  0837  3420               	retlw	32	;' '
  1232  0838  3420               	retlw	32	;' '
  1233  0839  3420               	retlw	32	;' '
  1234  083A  3420               	retlw	32	;' '
  1235  083B  3420               	retlw	32	;' '
  1236  083C  3400               	retlw	0
  1237                           
  1238                           	psect	stringtext5
  1239  083D                     __pstringtext5:	
  1240  083D                     STR_4:	
  1241  083D  3454               	retlw	84	;'T'
  1242  083E  3465               	retlw	101	;'e'
  1243  083F  3473               	retlw	115	;'s'
  1244  0840  3474               	retlw	116	;'t'
  1245  0841  343A               	retlw	58	;':'
  1246  0842  3449               	retlw	73	;'I'
  1247  0843  3432               	retlw	50	;'2'
  1248  0844  3443               	retlw	67	;'C'
  1249  0845  3420               	retlw	32	;' '
  1250  0846  3430               	retlw	48	;'0'
  1251  0847  3432               	retlw	50	;'2'
  1252  0848  3420               	retlw	32	;' '
  1253  0849  3420               	retlw	32	;' '
  1254  084A  3420               	retlw	32	;' '
  1255  084B  3420               	retlw	32	;' '
  1256  084C  3420               	retlw	32	;' '
  1257  084D  3400               	retlw	0
  1258                           
  1259                           	psect	stringtext6
  1260  084E                     __pstringtext6:	
  1261  084E                     STR_8:	
  1262  084E  3454               	retlw	84	;'T'
  1263  084F  3465               	retlw	101	;'e'
  1264  0850  3473               	retlw	115	;'s'
  1265  0851  3474               	retlw	116	;'t'
  1266  0852  343A               	retlw	58	;':'
  1267  0853  3449               	retlw	73	;'I'
  1268  0854  3432               	retlw	50	;'2'
  1269  0855  3443               	retlw	67	;'C'
  1270  0856  3420               	retlw	32	;' '
  1271  0857  3430               	retlw	48	;'0'
  1272  0858  3433               	retlw	51	;'3'
  1273  0859  3420               	retlw	32	;' '
  1274  085A  3420               	retlw	32	;' '
  1275  085B  3420               	retlw	32	;' '
  1276  085C  3420               	retlw	32	;' '
  1277  085D  3420               	retlw	32	;' '
  1278  085E  3400               	retlw	0
  1279                           
  1280                           	psect	stringtext7
  1281  085F                     __pstringtext7:	
  1282  085F                     STR_21:	
  1283  085F  3454               	retlw	84	;'T'
  1284  0860  3465               	retlw	101	;'e'
  1285  0861  3473               	retlw	115	;'s'
  1286  0862  3474               	retlw	116	;'t'
  1287  0863  343A               	retlw	58	;':'
  1288  0864  344C               	retlw	76	;'L'
  1289  0865  3443               	retlw	67	;'C'
  1290  0866  3444               	retlw	68	;'D'
  1291  0867  3420               	retlw	32	;' '
  1292  0868  3430               	retlw	48	;'0'
  1293  0869  3433               	retlw	51	;'3'
  1294  086A  3420               	retlw	32	;' '
  1295  086B  3420               	retlw	32	;' '
  1296  086C  3420               	retlw	32	;' '
  1297  086D  3420               	retlw	32	;' '
  1298  086E  3420               	retlw	32	;' '
  1299  086F  3400               	retlw	0
  1300                           
  1301                           	psect	stringtext8
  1302  0870                     __pstringtext8:	
  1303  0870                     STR_12:	
  1304  0870  3454               	retlw	84	;'T'
  1305  0871  3465               	retlw	101	;'e'
  1306  0872  3473               	retlw	115	;'s'
  1307  0873  3474               	retlw	116	;'t'
  1308  0874  343A               	retlw	58	;':'
  1309  0875  3449               	retlw	73	;'I'
  1310  0876  3432               	retlw	50	;'2'
  1311  0877  3443               	retlw	67	;'C'
  1312  0878  3420               	retlw	32	;' '
  1313  0879  3430               	retlw	48	;'0'
  1314  087A  3434               	retlw	52	;'4'
  1315  087B  3420               	retlw	32	;' '
  1316  087C  3420               	retlw	32	;' '
  1317  087D  3420               	retlw	32	;' '
  1318  087E  3420               	retlw	32	;' '
  1319  087F  3420               	retlw	32	;' '
  1320  0880  3400               	retlw	0
  1321                           
  1322                           	psect	stringtext9
  1323  0881                     __pstringtext9:	
  1324  0881                     STR_9:	
  1325  0881  3452               	retlw	82	;'R'
  1326  0882  3478               	retlw	120	;'x'
  1327  0883  3420               	retlw	32	;' '
  1328  0884  3430               	retlw	48	;'0'
  1329  0885  3478               	retlw	120	;'x'
  1330  0886  3430               	retlw	48	;'0'
  1331  0887  3430               	retlw	48	;'0'
  1332  0888  342D               	retlw	45	;'-'
  1333  0889  343E               	retlw	62	;'>'
  1334  088A  3430               	retlw	48	;'0'
  1335  088B  3478               	retlw	120	;'x'
  1336  088C  3446               	retlw	70	;'F'
  1337  088D  3446               	retlw	70	;'F'
  1338  088E  3420               	retlw	32	;' '
  1339  088F  3420               	retlw	32	;' '
  1340  0890  3420               	retlw	32	;' '
  1341  0891  3400               	retlw	0
  1342                           
  1343                           	psect	stringtext10
  1344  0892                     __pstringtext10:	
  1345  0892                     STR_5:	
  1346  0892  3454               	retlw	84	;'T'
  1347  0893  3478               	retlw	120	;'x'
  1348  0894  3420               	retlw	32	;' '
  1349  0895  3430               	retlw	48	;'0'
  1350  0896  3478               	retlw	120	;'x'
  1351  0897  3430               	retlw	48	;'0'
  1352  0898  3430               	retlw	48	;'0'
  1353  0899  342D               	retlw	45	;'-'
  1354  089A  343E               	retlw	62	;'>'
  1355  089B  3430               	retlw	48	;'0'
  1356  089C  3478               	retlw	120	;'x'
  1357  089D  3446               	retlw	70	;'F'
  1358  089E  3446               	retlw	70	;'F'
  1359  089F  3420               	retlw	32	;' '
  1360  08A0  3420               	retlw	32	;' '
  1361  08A1  3420               	retlw	32	;' '
  1362  08A2  3400               	retlw	0
  1363                           
  1364                           	psect	stringtext11
  1365  08A3                     __pstringtext11:	
  1366  08A3                     STR_24:	
  1367  08A3  3454               	retlw	84	;'T'
  1368  08A4  3465               	retlw	101	;'e'
  1369  08A5  3473               	retlw	115	;'s'
  1370  08A6  3474               	retlw	116	;'t'
  1371  08A7  343A               	retlw	58	;':'
  1372  08A8  344B               	retlw	75	;'K'
  1373  08A9  3465               	retlw	101	;'e'
  1374  08AA  3479               	retlw	121	;'y'
  1375  08AB  3470               	retlw	112	;'p'
  1376  08AC  3461               	retlw	97	;'a'
  1377  08AD  3464               	retlw	100	;'d'
  1378  08AE  3420               	retlw	32	;' '
  1379  08AF  3430               	retlw	48	;'0'
  1380  08B0  3431               	retlw	49	;'1'
  1381  08B1  3420               	retlw	32	;' '
  1382  08B2  3420               	retlw	32	;' '
  1383  08B3  3400               	retlw	0
  1384                           
  1385                           	psect	stringtext12
  1386  08B4                     __pstringtext12:	
  1387  08B4                     STR_27:	
  1388  08B4  3454               	retlw	84	;'T'
  1389  08B5  3465               	retlw	101	;'e'
  1390  08B6  3473               	retlw	115	;'s'
  1391  08B7  3474               	retlw	116	;'t'
  1392  08B8  343A               	retlw	58	;':'
  1393  08B9  344B               	retlw	75	;'K'
  1394  08BA  3465               	retlw	101	;'e'
  1395  08BB  3479               	retlw	121	;'y'
  1396  08BC  3470               	retlw	112	;'p'
  1397  08BD  3461               	retlw	97	;'a'
  1398  08BE  3464               	retlw	100	;'d'
  1399  08BF  3420               	retlw	32	;' '
  1400  08C0  3430               	retlw	48	;'0'
  1401  08C1  3432               	retlw	50	;'2'
  1402  08C2  3420               	retlw	32	;' '
  1403  08C3  3420               	retlw	32	;' '
  1404  08C4  3400               	retlw	0
  1405                           
  1406                           	psect	stringtext13
  1407  08C5                     __pstringtext13:	
  1408  08C5                     STR_29:	
  1409  08C5  3454               	retlw	84	;'T'
  1410  08C6  3465               	retlw	101	;'e'
  1411  08C7  3473               	retlw	115	;'s'
  1412  08C8  3474               	retlw	116	;'t'
  1413  08C9  343A               	retlw	58	;':'
  1414  08CA  344B               	retlw	75	;'K'
  1415  08CB  3465               	retlw	101	;'e'
  1416  08CC  3479               	retlw	121	;'y'
  1417  08CD  3470               	retlw	112	;'p'
  1418  08CE  3461               	retlw	97	;'a'
  1419  08CF  3464               	retlw	100	;'d'
  1420  08D0  3420               	retlw	32	;' '
  1421  08D1  3430               	retlw	48	;'0'
  1422  08D2  3433               	retlw	51	;'3'
  1423  08D3  3420               	retlw	32	;' '
  1424  08D4  3420               	retlw	32	;' '
  1425  08D5  3400               	retlw	0
  1426                           
  1427                           	psect	stringtext14
  1428  08D6                     __pstringtext14:	
  1429  08D6                     STR_31:	
  1430  08D6  3454               	retlw	84	;'T'
  1431  08D7  3465               	retlw	101	;'e'
  1432  08D8  3473               	retlw	115	;'s'
  1433  08D9  3474               	retlw	116	;'t'
  1434  08DA  343A               	retlw	58	;':'
  1435  08DB  344B               	retlw	75	;'K'
  1436  08DC  3465               	retlw	101	;'e'
  1437  08DD  3479               	retlw	121	;'y'
  1438  08DE  3470               	retlw	112	;'p'
  1439  08DF  3461               	retlw	97	;'a'
  1440  08E0  3464               	retlw	100	;'d'
  1441  08E1  3420               	retlw	32	;' '
  1442  08E2  3430               	retlw	48	;'0'
  1443  08E3  3434               	retlw	52	;'4'
  1444  08E4  3420               	retlw	32	;' '
  1445  08E5  3420               	retlw	32	;' '
  1446  08E6  3400               	retlw	0
  1447                           
  1448                           	psect	stringtext15
  1449  08E7                     __pstringtext15:	
  1450  08E7                     STR_2:	
  1451  08E7  3454               	retlw	84	;'T'
  1452  08E8  3478               	retlw	120	;'x'
  1453  08E9  3420               	retlw	32	;' '
  1454  08EA  3430               	retlw	48	;'0'
  1455  08EB  3478               	retlw	120	;'x'
  1456  08EC  3420               	retlw	32	;' '
  1457  08ED  3420               	retlw	32	;' '
  1458  08EE  342D               	retlw	45	;'-'
  1459  08EF  343E               	retlw	62	;'>'
  1460  08F0  3452               	retlw	82	;'R'
  1461  08F1  3478               	retlw	120	;'x'
  1462  08F2  3420               	retlw	32	;' '
  1463  08F3  3430               	retlw	48	;'0'
  1464  08F4  3478               	retlw	120	;'x'
  1465  08F5  3420               	retlw	32	;' '
  1466  08F6  3420               	retlw	32	;' '
  1467  08F7  3400               	retlw	0
  1468                           
  1469                           	psect	stringtext16
  1470  08F8                     __pstringtext16:	
  1471  08F8                     STR_30:	
  1472  08F8  3446               	retlw	70	;'F'
  1473  08F9  3469               	retlw	105	;'i'
  1474  08FA  346E               	retlw	110	;'n'
  1475  08FB  3461               	retlw	97	;'a'
  1476  08FC  346C               	retlw	108	;'l'
  1477  08FD  3420               	retlw	32	;' '
  1478  08FE  3420               	retlw	32	;' '
  1479  08FF  343A               	retlw	58	;':'
  1480  0900  3449               	retlw	73	;'I'
  1481  0901  346E               	retlw	110	;'n'
  1482  0902  3470               	retlw	112	;'p'
  1483  0903  3475               	retlw	117	;'u'
  1484  0904  3474               	retlw	116	;'t'
  1485  0905  3420               	retlw	32	;' '
  1486  0906  3431               	retlw	49	;'1'
  1487  0907  3420               	retlw	32	;' '
  1488  0908  3400               	retlw	0
  1489                           
  1490                           	psect	stringtext17
  1491  0909                     __pstringtext17:	
  1492  0909                     STR_32:	
  1493  0909  3442               	retlw	66	;'B'
  1494  090A  3475               	retlw	117	;'u'
  1495  090B  3466               	retlw	102	;'f'
  1496  090C  3466               	retlw	102	;'f'
  1497  090D  3465               	retlw	101	;'e'
  1498  090E  3472               	retlw	114	;'r'
  1499  090F  3420               	retlw	32	;' '
  1500  0910  343A               	retlw	58	;':'
  1501  0911  3449               	retlw	73	;'I'
  1502  0912  346E               	retlw	110	;'n'
  1503  0913  3470               	retlw	112	;'p'
  1504  0914  3475               	retlw	117	;'u'
  1505  0915  3474               	retlw	116	;'t'
  1506  0916  3420               	retlw	32	;' '
  1507  0917  3431               	retlw	49	;'1'
  1508  0918  3420               	retlw	32	;' '
  1509  0919  3400               	retlw	0
  1510                           
  1511                           	psect	stringtext18
  1512  091A                     __pstringtext18:	
  1513  091A                     STR_28:	
  1514  091A  3443               	retlw	67	;'C'
  1515  091B  3475               	retlw	117	;'u'
  1516  091C  3472               	retlw	114	;'r'
  1517  091D  3472               	retlw	114	;'r'
  1518  091E  3465               	retlw	101	;'e'
  1519  091F  346E               	retlw	110	;'n'
  1520  0920  3474               	retlw	116	;'t'
  1521  0921  343A               	retlw	58	;':'
  1522  0922  3449               	retlw	73	;'I'
  1523  0923  346E               	retlw	110	;'n'
  1524  0924  3470               	retlw	112	;'p'
  1525  0925  3475               	retlw	117	;'u'
  1526  0926  3474               	retlw	116	;'t'
  1527  0927  3420               	retlw	32	;' '
  1528  0928  3431               	retlw	49	;'1'
  1529  0929  3420               	retlw	32	;' '
  1530  092A  3400               	retlw	0
  1531                           
  1532                           	psect	stringtext19
  1533  092B                     __pstringtext19:	
  1534  092B                     STR_23:	
  1535  092B  3454               	retlw	84	;'T'
  1536  092C  3465               	retlw	101	;'e'
  1537  092D  3473               	retlw	115	;'s'
  1538  092E  3474               	retlw	116	;'t'
  1539  092F  343A               	retlw	58	;':'
  1540  0930  344C               	retlw	76	;'L'
  1541  0931  3443               	retlw	67	;'C'
  1542  0932  3444               	retlw	68	;'D'
  1543  0933  3420               	retlw	32	;' '
  1544  0934  3430               	retlw	48	;'0'
  1545  0935  3434               	retlw	52	;'4'
  1546  0936  3420               	retlw	32	;' '
  1547  0937  3430               	retlw	48	;'0'
  1548  0938  343A               	retlw	58	;':'
  1549  0939  3430               	retlw	48	;'0'
  1550  093A  3430               	retlw	48	;'0'
  1551  093B  3400               	retlw	0
  1552                           
  1553                           	psect	stringtext20
  1554  093C                     __pstringtext20:	
  1555  093C                     STR_7:	
  1556  093C  3454               	retlw	84	;'T'
  1557  093D  3478               	retlw	120	;'x'
  1558  093E  3420               	retlw	32	;' '
  1559  093F  3430               	retlw	48	;'0'
  1560  0940  3478               	retlw	120	;'x'
  1561  0941  3430               	retlw	48	;'0'
  1562  0942  3430               	retlw	48	;'0'
  1563  0943  342D               	retlw	45	;'-'
  1564  0944  343E               	retlw	62	;'>'
  1565  0945  3430               	retlw	48	;'0'
  1566  0946  3478               	retlw	120	;'x'
  1567  0947  3446               	retlw	70	;'F'
  1568  0948  3446               	retlw	70	;'F'
  1569  0949  3420               	retlw	32	;' '
  1570  094A  344E               	retlw	78	;'N'
  1571  094B  3447               	retlw	71	;'G'
  1572  094C  3400               	retlw	0
  1573                           
  1574                           	psect	stringtext21
  1575  094D                     __pstringtext21:	
  1576  094D                     STR_6:	
  1577  094D  3454               	retlw	84	;'T'
  1578  094E  3478               	retlw	120	;'x'
  1579  094F  3420               	retlw	32	;' '
  1580  0950  3430               	retlw	48	;'0'
  1581  0951  3478               	retlw	120	;'x'
  1582  0952  3430               	retlw	48	;'0'
  1583  0953  3430               	retlw	48	;'0'
  1584  0954  342D               	retlw	45	;'-'
  1585  0955  343E               	retlw	62	;'>'
  1586  0956  3430               	retlw	48	;'0'
  1587  0957  3478               	retlw	120	;'x'
  1588  0958  3446               	retlw	70	;'F'
  1589  0959  3446               	retlw	70	;'F'
  1590  095A  3420               	retlw	32	;' '
  1591  095B  344F               	retlw	79	;'O'
  1592  095C  344B               	retlw	75	;'K'
  1593  095D  3400               	retlw	0
  1594                           
  1595                           	psect	stringtext22
  1596  095E                     __pstringtext22:	
  1597  095E                     STR_18:	
  1598  095E  3454               	retlw	84	;'T'
  1599  095F  3465               	retlw	101	;'e'
  1600  0960  3473               	retlw	115	;'s'
  1601  0961  3474               	retlw	116	;'t'
  1602  0962  343A               	retlw	58	;':'
  1603  0963  344C               	retlw	76	;'L'
  1604  0964  3443               	retlw	67	;'C'
  1605  0965  3444               	retlw	68	;'D'
  1606  0966  3420               	retlw	32	;' '
  1607  0967  3430               	retlw	48	;'0'
  1608  0968  3432               	retlw	50	;'2'
  1609  0969  3420               	retlw	32	;' '
  1610  096A  3430               	retlw	48	;'0'
  1611  096B  3478               	retlw	120	;'x'
  1612  096C  3430               	retlw	48	;'0'
  1613  096D  3400               	retlw	0
  1614                           
  1615                           	psect	stringtext23
  1616  096E                     __pstringtext23:	
  1617  096E                     STR_16:	
  1618  096E  3454               	retlw	84	;'T'
  1619  096F  3465               	retlw	101	;'e'
  1620  0970  3473               	retlw	115	;'s'
  1621  0971  3474               	retlw	116	;'t'
  1622  0972  343A               	retlw	58	;':'
  1623  0973  344C               	retlw	76	;'L'
  1624  0974  3443               	retlw	67	;'C'
  1625  0975  3444               	retlw	68	;'D'
  1626  0976  3420               	retlw	32	;' '
  1627  0977  3430               	retlw	48	;'0'
  1628  0978  3431               	retlw	49	;'1'
  1629  0979  3420               	retlw	32	;' '
  1630  097A  3430               	retlw	48	;'0'
  1631  097B  3478               	retlw	120	;'x'
  1632  097C  3400               	retlw	0
  1633                           
  1634                           	psect	stringtext24
  1635  097D                     __pstringtext24:	
  1636  097D                     STR_20:	
  1637  097D  3454               	retlw	84	;'T'
  1638  097E  3465               	retlw	101	;'e'
  1639  097F  3473               	retlw	115	;'s'
  1640  0980  3474               	retlw	116	;'t'
  1641  0981  343A               	retlw	58	;':'
  1642  0982  344C               	retlw	76	;'L'
  1643  0983  3443               	retlw	67	;'C'
  1644  0984  3444               	retlw	68	;'D'
  1645  0985  3420               	retlw	32	;' '
  1646  0986  3430               	retlw	48	;'0'
  1647  0987  3432               	retlw	50	;'2'
  1648  0988  3420               	retlw	32	;' '
  1649  0989  3400               	retlw	0
  1650                           
  1651                           	psect	stringtext25
  1652  098A                     __pstringtext25:	
  1653  098A                     STR_3:	
  1654  098A  3458               	retlw	88	;'X'
  1655  098B  3458               	retlw	88	;'X'
  1656  098C  3400               	retlw	0
  1657                           
  1658                           	psect	stringtext26
  1659  0000                     __pstringtext26:	
  1660  085F                     
  1661                           ; #config settings
  1662  0000                     
  1663                           	psect	cinit
  1664  000F                     start_initialization:	
  1665  000F                     __initialization:	
  1666                           
  1667                           ; Initialize objects allocated to BANK1
  1668  000F  3099               	movlw	low __pidataBANK1
  1669  0010  0084               	movwf	4
  1670  0011  308A               	movlw	(high __pidataBANK1)| (0+128)
  1671  0012  0085               	movwf	5
  1672  0013  30CB               	movlw	low __pdataBANK1
  1673  0014  0086               	movwf	6
  1674  0015  3000               	movlw	high __pdataBANK1
  1675  0016  0087               	movwf	7
  1676  0017  300C               	movlw	12
  1677  0018  318A  2249  3180   	fcall	init_ram
  1678                           
  1679                           ; Clear objects allocated to BANK0
  1680  001B  305E               	movlw	low __pbssBANK0
  1681  001C  0084               	movwf	4
  1682  001D  3000               	movlw	high __pbssBANK0
  1683  001E  0085               	movwf	5
  1684  001F  3009               	movlw	9
  1685  0020  318A  2243  3180   	fcall	clear_ram0
  1686                           
  1687                           ; Clear objects allocated to BANK1
  1688  0023  30D7               	movlw	low __pbssBANK1
  1689  0024  0084               	movwf	4
  1690  0025  3000               	movlw	high __pbssBANK1
  1691  0026  0085               	movwf	5
  1692  0027  300A               	movlw	10
  1693  0028  318A  2243         	fcall	clear_ram0
  1694  002A                     end_of_initialization:	
  1695                           ;End of C runtime variable initialization code
  1696                           
  1697  002A                     __end_of__initialization:	
  1698  002A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1699  002B  0020               	movlb	0
  1700  002C  3187  2F7D         	ljmp	_main	;jump to C main() function
  1701                           
  1702                           	psect	bssBANK0
  1703  005E                     __pbssBANK0:	
  1704  005E                     _stStateSSP2:	
  1705  005E                     	ds	2
  1706  0060                     _stStateSSP1:	
  1707  0060                     	ds	2
  1708  0062                     _u8Depth:	
  1709  0062                     	ds	1
  1710  0063                     _spKEYPAD_status:	
  1711  0063                     	ds	1
  1712  0064                     _u8KeyValue:	
  1713  0064                     	ds	1
  1714  0065                     _eInputMode:	
  1715  0065                     	ds	1
  1716  0066                     _u8RxData:	
  1717  0066                     	ds	1
  1718                           
  1719                           	psect	bssBANK1
  1720  00D7                     __pbssBANK1:	
  1721  00D7                     _bMstStartFlgSSP2:	
  1722  00D7                     	ds	1
  1723  00D8                     _bMstStartFlgSSP1:	
  1724  00D8                     	ds	1
  1725  00D9                     _seed:	
  1726  00D9                     	ds	8
  1727                           
  1728                           	psect	dataBANK1
  1729  00CB                     __pdataBANK1:	
  1730  00CB                     ssp2_vLCDTest03@F2641:	
  1731  00CB                     	ds	8
  1732  00D3                     _pvSSP2Func:	
  1733  00D3                     	ds	2
  1734  00D5                     _pvSSP1Func:	
  1735  00D5                     	ds	2
  1736                           
  1737                           	psect	inittext
  1738  0A49                     init_ram:	
  1739  0A49  00FE               	movwf	126
  1740  0A4A                     initloop:	
  1741  0A4A  0012               	moviw fsr0++
  1742  0A4B  001E               	movwi fsr1++
  1743  0A4C  0BFE               	decfsz	126,f
  1744  0A4D  2A4A               	goto	initloop
  1745  0A4E  3400               	retlw	0
  1746                           
  1747                           	psect	clrtext
  1748  0A43                     clear_ram0:	
  1749                           ;	Called with FSR0 containing the base address, and
  1750                           ;	WREG with the size to clear
  1751                           
  1752  0A43  0064               	clrwdt	;clear the watchdog before getting into this loop
  1753  0A44                     clrloop0:	
  1754  0A44  0180               	clrf	0	;clear RAM location pointed to by FSR
  1755  0A45  3101               	addfsr 0,1
  1756  0A46  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1757  0A47  2A44               	goto	clrloop0	;have we reached the end yet?
  1758  0A48  3400               	retlw	0	;all done for this memory range, return
  1759                           
  1760                           	psect	cstackBANK1
  1761  00A0                     __pcstackBANK1:	
  1762  00A0                     ??_ST7032_bSetCursorSSP2:	
  1763  00A0                     ??_ST7032_vWriteCGRAMSSP2:	
  1764                           ; 1 bytes @ 0x0
  1765                           
  1766  00A0                     ST7032_vClearIconSSP2@u8Addr:	
  1767                           ; 1 bytes @ 0x0
  1768                           
  1769  00A0                     ST7032_vWriteIconSSP2@u8Addr:	
  1770                           ; 1 bytes @ 0x0
  1771                           
  1772                           
  1773                           ; 1 bytes @ 0x0
  1774  00A0                     	ds	1
  1775  00A1                     ST7032_vWriteCGRAMSSP2@u8CharNo:	
  1776                           
  1777                           ; 1 bytes @ 0x1
  1778  00A1                     	ds	1
  1779  00A2                     ST7032_bSetCursorSSP2@u8RowNo:	
  1780  00A2                     ST7032_vWriteCGRAMSSP2@pu8WkMap:	
  1781                           ; 1 bytes @ 0x2
  1782                           
  1783                           
  1784                           ; 1 bytes @ 0x2
  1785  00A2                     	ds	1
  1786  00A3                     ST7032_bSetCursorSSP2@u8Addr:	
  1787  00A3                     ST7032_vWriteCGRAMSSP2@u8Idx:	
  1788                           ; 1 bytes @ 0x3
  1789                           
  1790                           
  1791                           ; 1 bytes @ 0x3
  1792  00A3                     	ds	1
  1793  00A4                     ??_ssp2_vLCDTest01:	
  1794  00A4                     ??_ssp2_vLCDTest02:	
  1795                           ; 1 bytes @ 0x4
  1796                           
  1797  00A4                     ??_ssp2_vLCDTest03:	
  1798                           ; 1 bytes @ 0x4
  1799                           
  1800  00A4                     ??_ssp2_vLCDTest04:	
  1801                           ; 1 bytes @ 0x4
  1802                           
  1803                           
  1804                           ; 1 bytes @ 0x4
  1805  00A4                     	ds	2
  1806  00A6                     ssp2_vLCDTest01@u8Idx:	
  1807  00A6                     ssp2_vLCDTest02@u8Idx:	
  1808                           ; 1 bytes @ 0x6
  1809                           
  1810  00A6                     ssp2_vLCDTest03@u8Idx:	
  1811                           ; 1 bytes @ 0x6
  1812                           
  1813  00A6                     ssp2_vLCDTest04@u8Addr:	
  1814                           ; 1 bytes @ 0x6
  1815                           
  1816                           
  1817                           ; 1 bytes @ 0x6
  1818  00A6                     	ds	1
  1819  00A7                     ssp2_vLCDTest01@val:	
  1820  00A7                     ssp2_vLCDTest04@u8SVal:	
  1821                           ; 1 bytes @ 0x7
  1822                           
  1823  00A7                     ssp2_vLCDTest03@u8BitMap:	
  1824                           ; 1 bytes @ 0x7
  1825                           
  1826                           
  1827                           ; 8 bytes @ 0x7
  1828  00A7                     	ds	8
  1829  00AF                     ??_main:	
  1830                           
  1831                           ; 1 bytes @ 0xF
  1832  00AF                     	ds	1
  1833  00B0                     main@keypadSts:	
  1834                           
  1835                           ; 27 bytes @ 0x10
  1836  00B0                     	ds	27
  1837                           
  1838                           	psect	cstackCOMMON
  1839  0070                     __pcstackCOMMON:	
  1840  0070                     ?_ssp1_vCallback:	
  1841  0070                     ?_KEYPAD_vInit:	
  1842                           ; 1 bytes @ 0x0
  1843                           
  1844  0070                     ?_ST7032_vInitSSP2:	
  1845                           ; 1 bytes @ 0x0
  1846                           
  1847  0070                     ?_ssp2_vLCDTest01:	
  1848                           ; 1 bytes @ 0x0
  1849                           
  1850  0070                     ?_ssp2_vLCDTest02:	
  1851                           ; 1 bytes @ 0x0
  1852                           
  1853  0070                     ?_ssp2_vLCDTest03:	
  1854                           ; 1 bytes @ 0x0
  1855                           
  1856  0070                     ?_ssp2_vLCDTest04:	
  1857                           ; 1 bytes @ 0x0
  1858                           
  1859  0070                     ?_timer_vInterrupt:	
  1860                           ; 1 bytes @ 0x0
  1861                           
  1862  0070                     ?_I2C_vSlaveIsrSSP1:	
  1863                           ; 1 bytes @ 0x0
  1864                           
  1865  0070                     ?_KEYPAD_u8Read:	
  1866                           ; 1 bytes @ 0x0
  1867                           
  1868  0070                     ?_KEYPAD_bUpdateBuffer:	
  1869                           ; 1 bytes @ 0x0
  1870                           
  1871  0070                     ?_ST7032_vWriteCharSSP2:	
  1872                           ; 1 bytes @ 0x0
  1873                           
  1874  0070                     ?_I2C_u8MstTxSSP2:	
  1875                           ; 1 bytes @ 0x0
  1876                           
  1877  0070                     ?_I2C_vMstStopSSP2:	
  1878                           ; 1 bytes @ 0x0
  1879                           
  1880  0070                     ?_ST7032_vClearDispSSP2:	
  1881                           ; 1 bytes @ 0x0
  1882                           
  1883  0070                     ?_ST7032_u8GetCursorRowNoSSP2:	
  1884                           ; 1 bytes @ 0x0
  1885                           
  1886  0070                     ?_ST7032_u8GetCursorColNoSSP2:	
  1887                           ; 1 bytes @ 0x0
  1888                           
  1889  0070                     ?_ST7032_bCursorRightSSP2:	
  1890                           ; 1 bytes @ 0x0
  1891                           
  1892  0070                     ?_ST7032_bCursorLeftSSP2:	
  1893                           ; 1 bytes @ 0x0
  1894                           
  1895  0070                     ?_ST7032_vClearIconSSP2:	
  1896                           ; 1 bytes @ 0x0
  1897                           
  1898  0070                     ?_vDmyCallback:	
  1899                           ; 1 bytes @ 0x0
  1900                           
  1901  0070                     ?_vMasterWaitSSP2:	
  1902                           ; 1 bytes @ 0x0
  1903                           
  1904  0070                     ?_criticalSec_vBegin:	
  1905                           ; 1 bytes @ 0x0
  1906                           
  1907  0070                     ??_criticalSec_vBegin:	
  1908                           ; 1 bytes @ 0x0
  1909                           
  1910  0070                     ?_criticalSec_vEnd:	
  1911                           ; 1 bytes @ 0x0
  1912                           
  1913  0070                     ??_criticalSec_vEnd:	
  1914                           ; 1 bytes @ 0x0
  1915                           
  1916  0070                     ?_readColumn:	
  1917                           ; 1 bytes @ 0x0
  1918                           
  1919  0070                     ??_readColumn:	
  1920                           ; 1 bytes @ 0x0
  1921                           
  1922  0070                     ?_vExecCmdSSP2:	
  1923                           ; 1 bytes @ 0x0
  1924                           
  1925  0070                     ?_vExecCmdEndSSP2:	
  1926                           ; 1 bytes @ 0x0
  1927                           
  1928  0070                     ?_bSetCursorSSP2:	
  1929                           ; 1 bytes @ 0x0
  1930                           
  1931  0070                     ?_main:	
  1932                           ; 1 bytes @ 0x0
  1933                           
  1934  0070                     ?_ISR:	
  1935                           ; 1 bytes @ 0x0
  1936                           
  1937  0070                     ssp1_vCallback@u8BusNo:	
  1938                           ; 1 bytes @ 0x0
  1939                           
  1940  0070                     vDmyCallback@u8BusNo:	
  1941                           ; 1 bytes @ 0x0
  1942                           
  1943                           
  1944                           ; 1 bytes @ 0x0
  1945  0070                     	ds	1
  1946  0071                     ssp1_vCallback@u8EvtType:	
  1947  0071                     vDmyCallback@u8EvtType:	
  1948                           ; 1 bytes @ 0x1
  1949                           
  1950                           
  1951                           ; 1 bytes @ 0x1
  1952  0071                     	ds	1
  1953  0072                     ??_ssp1_vCallback:	
  1954  0072                     ??_vDmyCallback:	
  1955                           ; 1 bytes @ 0x2
  1956                           
  1957  0072                     readColumn@portA:	
  1958                           ; 1 bytes @ 0x2
  1959                           
  1960                           
  1961                           ; 1 bytes @ 0x2
  1962  0072                     	ds	1
  1963  0073                     readColumn@portB:	
  1964                           
  1965                           ; 1 bytes @ 0x3
  1966  0073                     	ds	1
  1967  0074                     readColumn@u8Port:	
  1968                           
  1969                           ; 1 bytes @ 0x4
  1970  0074                     	ds	1
  1971  0075                     ??_I2C_vSlaveIsrSSP1:	
  1972  0075                     readColumn@u16PinMap:	
  1973                           ; 1 bytes @ 0x5
  1974                           
  1975                           
  1976                           ; 2 bytes @ 0x5
  1977  0075                     	ds	2
  1978  0077                     readColumn@u8Col:	
  1979                           
  1980                           ; 1 bytes @ 0x7
  1981  0077                     	ds	1
  1982  0078                     ??_KEYPAD_u8Read:	
  1983                           
  1984                           ; 1 bytes @ 0x8
  1985  0078                     	ds	2
  1986  007A                     ??_KEYPAD_bUpdateBuffer:	
  1987                           
  1988                           ; 1 bytes @ 0xA
  1989  007A                     	ds	2
  1990  007C                     KEYPAD_bUpdateBuffer@u8KeyNo:	
  1991                           
  1992                           ; 1 bytes @ 0xC
  1993  007C                     	ds	1
  1994  007D                     KEYPAD_bUpdateBuffer@u8Idx:	
  1995                           
  1996                           ; 1 bytes @ 0xD
  1997  007D                     	ds	1
  1998  007E                     ??_ISR:	
  1999                           
  2000                           	psect	cstackBANK0
  2001  0020                     __pcstackBANK0:	
  2002                           ; 1 bytes @ 0xE
  2003                           
  2004  0020                     KEYPAD_u8Read@u8PortA:	
  2005                           
  2006                           ; 1 bytes @ 0x0
  2007  0020                     	ds	1
  2008  0021                     KEYPAD_u8Read@u8PortB:	
  2009                           
  2010                           ; 1 bytes @ 0x1
  2011  0021                     	ds	1
  2012  0022                     KEYPAD_u8Read@u16PinMap:	
  2013                           
  2014                           ; 2 bytes @ 0x2
  2015  0022                     	ds	2
  2016  0024                     KEYPAD_u8Read@u8Col:	
  2017                           
  2018                           ; 1 bytes @ 0x4
  2019  0024                     	ds	1
  2020  0025                     KEYPAD_u8Read@u8KeyNo:	
  2021                           
  2022                           ; 1 bytes @ 0x5
  2023  0025                     	ds	1
  2024  0026                     KEYPAD_u8Read@u8Row:	
  2025                           
  2026                           ; 1 bytes @ 0x6
  2027  0026                     	ds	1
  2028  0027                     ??_timer_vInterrupt:	
  2029                           
  2030                           ; 1 bytes @ 0x7
  2031  0027                     	ds	2
  2032  0029                     ?_I2C_vInitSlaveSSP1:	
  2033  0029                     ?_I2C_vInitMasterSSP2:	
  2034                           ; 1 bytes @ 0x9
  2035                           
  2036  0029                     ?_I2C_u8MstStartSSP2:	
  2037                           ; 1 bytes @ 0x9
  2038                           
  2039  0029                     ??_I2C_u8MstTxSSP2:	
  2040                           ; 1 bytes @ 0x9
  2041                           
  2042  0029                     ??_I2C_vMstStopSSP2:	
  2043                           ; 1 bytes @ 0x9
  2044                           
  2045  0029                     ??_vMasterWaitSSP2:	
  2046                           ; 1 bytes @ 0x9
  2047                           
  2048  0029                     ?_memset:	
  2049                           ; 1 bytes @ 0x9
  2050                           
  2051  0029                     ?___bmul:	
  2052                           ; 1 bytes @ 0x9
  2053                           
  2054  0029                     ?___awdiv:	
  2055                           ; 1 bytes @ 0x9
  2056                           
  2057  0029                     ?___omul:	
  2058                           ; 2 bytes @ 0x9
  2059                           
  2060  0029                     I2C_vInitMasterSSP2@u8ClkDiv:	
  2061                           ; 8 bytes @ 0x9
  2062                           
  2063  0029                     I2C_vInitSlaveSSP1@eMode:	
  2064                           ; 1 bytes @ 0x9
  2065                           
  2066  0029                     I2C_u8MstStartSSP2@bReadFlg:	
  2067                           ; 1 bytes @ 0x9
  2068                           
  2069  0029                     I2C_u8MstTxSSP2@u8Data:	
  2070                           ; 1 bytes @ 0x9
  2071                           
  2072  0029                     ___bmul@multiplicand:	
  2073                           ; 1 bytes @ 0x9
  2074                           
  2075  0029                     ___awdiv@divisor:	
  2076                           ; 1 bytes @ 0x9
  2077                           
  2078  0029                     memset@c:	
  2079                           ; 2 bytes @ 0x9
  2080                           
  2081  0029                     ___omul@multiplier:	
  2082                           ; 2 bytes @ 0x9
  2083                           
  2084                           
  2085                           ; 8 bytes @ 0x9
  2086  0029                     	ds	1
  2087  002A                     ??_I2C_vInitMasterSSP2:	
  2088  002A                     ??_I2C_u8MstStartSSP2:	
  2089                           ; 1 bytes @ 0xA
  2090                           
  2091  002A                     ??_vExecCmdSSP2:	
  2092                           ; 1 bytes @ 0xA
  2093                           
  2094  002A                     ??_vExecCmdEndSSP2:	
  2095                           ; 1 bytes @ 0xA
  2096                           
  2097  002A                     ??___bmul:	
  2098                           ; 1 bytes @ 0xA
  2099                           
  2100  002A                     I2C_vInitMasterSSP2@eMode:	
  2101                           ; 1 bytes @ 0xA
  2102                           
  2103  002A                     I2C_u8MstStartSSP2@u8Address:	
  2104                           ; 1 bytes @ 0xA
  2105                           
  2106  002A                     vExecCmdSSP2@u8Cmd:	
  2107                           ; 1 bytes @ 0xA
  2108                           
  2109  002A                     vExecCmdEndSSP2@u8Cmd:	
  2110                           ; 1 bytes @ 0xA
  2111                           
  2112  002A                     I2C_vInitSlaveSSP1@pvCallback:	
  2113                           ; 1 bytes @ 0xA
  2114                           
  2115                           
  2116                           ; 2 bytes @ 0xA
  2117  002A                     	ds	1
  2118  002B                     ??_ST7032_vInitSSP2:	
  2119  002B                     ?_ST7032_vDispSettingSSP2:	
  2120                           ; 1 bytes @ 0xB
  2121                           
  2122  002B                     ??_ST7032_vClearDispSSP2:	
  2123                           ; 1 bytes @ 0xB
  2124                           
  2125  002B                     ST7032_vDispSettingSSP2@bCursor:	
  2126                           ; 1 bytes @ 0xB
  2127                           
  2128  002B                     ___bmul@product:	
  2129                           ; 1 bytes @ 0xB
  2130                           
  2131  002B                     ___awdiv@dividend:	
  2132                           ; 1 bytes @ 0xB
  2133                           
  2134  002B                     memset@n:	
  2135                           ; 2 bytes @ 0xB
  2136                           
  2137                           
  2138                           ; 2 bytes @ 0xB
  2139  002B                     	ds	1
  2140  002C                     ??_I2C_vInitSlaveSSP1:	
  2141  002C                     I2C_vInitSlaveSSP1@u8Address:	
  2142                           ; 1 bytes @ 0xC
  2143                           
  2144  002C                     ST7032_vDispSettingSSP2@bBlink:	
  2145                           ; 1 bytes @ 0xC
  2146                           
  2147  002C                     ___bmul@multiplier:	
  2148                           ; 1 bytes @ 0xC
  2149                           
  2150                           
  2151                           ; 1 bytes @ 0xC
  2152  002C                     	ds	1
  2153  002D                     ??_ST7032_vDispSettingSSP2:	
  2154  002D                     ??_memset:	
  2155                           ; 1 bytes @ 0xD
  2156                           
  2157  002D                     ??___awdiv:	
  2158                           ; 1 bytes @ 0xD
  2159                           
  2160                           
  2161                           ; 1 bytes @ 0xD
  2162  002D                     	ds	1
  2163  002E                     ___awdiv@counter:	
  2164                           
  2165                           ; 1 bytes @ 0xE
  2166  002E                     	ds	1
  2167  002F                     ST7032_vDispSettingSSP2@bDisp:	
  2168  002F                     ___awdiv@sign:	
  2169                           ; 1 bytes @ 0xF
  2170                           
  2171  002F                     memset@k:	
  2172                           ; 1 bytes @ 0xF
  2173                           
  2174                           
  2175                           ; 2 bytes @ 0xF
  2176  002F                     	ds	1
  2177  0030                     ___awdiv@quotient:	
  2178                           
  2179                           ; 2 bytes @ 0x10
  2180  0030                     	ds	1
  2181  0031                     memset@dest:	
  2182  0031                     ___omul@multiplicand:	
  2183                           ; 1 bytes @ 0x11
  2184                           
  2185                           
  2186                           ; 8 bytes @ 0x11
  2187  0031                     	ds	1
  2188  0032                     ??_ST7032_u8GetCursorRowNoSSP2:	
  2189  0032                     memset@s:	
  2190                           ; 1 bytes @ 0x12
  2191                           
  2192                           
  2193                           ; 1 bytes @ 0x12
  2194  0032                     	ds	1
  2195  0033                     ??_KEYPAD_vInit:	
  2196                           
  2197                           ; 1 bytes @ 0x13
  2198  0033                     	ds	1
  2199  0034                     KEYPAD_vInit@spStatus:	
  2200                           
  2201                           ; 1 bytes @ 0x14
  2202  0034                     	ds	5
  2203  0039                     ??___omul:	
  2204                           
  2205                           ; 1 bytes @ 0x19
  2206  0039                     	ds	1
  2207  003A                     ___omul@product:	
  2208                           
  2209                           ; 8 bytes @ 0x1A
  2210  003A                     	ds	8
  2211  0042                     ?_rand:	
  2212                           
  2213                           ; 2 bytes @ 0x22
  2214  0042                     	ds	2
  2215  0044                     ??_rand:	
  2216                           
  2217                           ; 1 bytes @ 0x24
  2218  0044                     	ds	8
  2219  004C                     ?___awmod:	
  2220  004C                     ___awmod@divisor:	
  2221                           ; 2 bytes @ 0x2C
  2222                           
  2223                           
  2224                           ; 2 bytes @ 0x2C
  2225  004C                     	ds	2
  2226  004E                     ___awmod@dividend:	
  2227                           
  2228                           ; 2 bytes @ 0x2E
  2229  004E                     	ds	2
  2230  0050                     ??___awmod:	
  2231                           
  2232                           ; 1 bytes @ 0x30
  2233  0050                     	ds	1
  2234  0051                     ___awmod@counter:	
  2235                           
  2236                           ; 1 bytes @ 0x31
  2237  0051                     	ds	1
  2238  0052                     ___awmod@sign:	
  2239                           
  2240                           ; 1 bytes @ 0x32
  2241  0052                     	ds	1
  2242  0053                     ?_ST7032_vWriteStringSSP2:	
  2243  0053                     ??_ST7032_vWriteCharSSP2:	
  2244                           ; 1 bytes @ 0x33
  2245                           
  2246  0053                     ?_ST7032_vWriteDataSSP2:	
  2247                           ; 1 bytes @ 0x33
  2248                           
  2249  0053                     ??_ST7032_u8GetCursorColNoSSP2:	
  2250                           ; 1 bytes @ 0x33
  2251                           
  2252  0053                     ??_bSetCursorSSP2:	
  2253                           ; 1 bytes @ 0x33
  2254                           
  2255  0053                     ST7032_vWriteDataSSP2@u8Len:	
  2256                           ; 1 bytes @ 0x33
  2257                           
  2258  0053                     ST7032_vWriteStringSSP2@pcStr:	
  2259                           ; 1 bytes @ 0x33
  2260                           
  2261                           
  2262                           ; 2 bytes @ 0x33
  2263  0053                     	ds	1
  2264  0054                     ??_ST7032_vWriteDataSSP2:	
  2265  0054                     ST7032_vWriteCharSSP2@cData:	
  2266                           ; 1 bytes @ 0x34
  2267                           
  2268                           
  2269                           ; 1 bytes @ 0x34
  2270  0054                     	ds	1
  2271  0055                     ??_ST7032_vWriteStringSSP2:	
  2272                           
  2273                           ; 1 bytes @ 0x35
  2274  0055                     	ds	4
  2275  0059                     ST7032_vWriteDataSSP2@u8Idx:	
  2276  0059                     ST7032_vWriteStringSSP2@pcWkData:	
  2277                           ; 1 bytes @ 0x39
  2278                           
  2279                           
  2280                           ; 2 bytes @ 0x39
  2281  0059                     	ds	1
  2282  005A                     ST7032_vWriteDataSSP2@pcData:	
  2283                           
  2284                           ; 1 bytes @ 0x3A
  2285  005A                     	ds	1
  2286  005B                     ST7032_vWriteDataSSP2@pu8WkData:	
  2287  005B                     bSetCursorSSP2@u8Addr:	
  2288                           ; 1 bytes @ 0x3B
  2289                           
  2290                           
  2291                           ; 1 bytes @ 0x3B
  2292  005B                     	ds	1
  2293  005C                     bSetCursorSSP2@u8Pos:	
  2294                           
  2295                           ; 1 bytes @ 0x3C
  2296  005C                     	ds	1
  2297  005D                     ?_ST7032_bSetCursorSSP2:	
  2298  005D                     ??_ST7032_bCursorRightSSP2:	
  2299                           ; 1 bytes @ 0x3D
  2300                           
  2301  005D                     ??_ST7032_bCursorLeftSSP2:	
  2302                           ; 1 bytes @ 0x3D
  2303                           
  2304  005D                     ?_ST7032_vWriteCGRAMSSP2:	
  2305                           ; 1 bytes @ 0x3D
  2306                           
  2307  005D                     ??_ST7032_vClearIconSSP2:	
  2308                           ; 1 bytes @ 0x3D
  2309                           
  2310  005D                     ?_ST7032_vWriteIconSSP2:	
  2311                           ; 1 bytes @ 0x3D
  2312                           
  2313  005D                     ST7032_bSetCursorSSP2@u8ColNo:	
  2314                           ; 1 bytes @ 0x3D
  2315                           
  2316  005D                     ST7032_vWriteCGRAMSSP2@pu8BitMap:	
  2317                           ; 1 bytes @ 0x3D
  2318                           
  2319  005D                     ST7032_vWriteIconSSP2@u8Map:	
  2320                           ; 1 bytes @ 0x3D
  2321                           
  2322                           
  2323                           ; 1 bytes @ 0x3D
  2324  005D                     	ds	1
  2325  005E                     ??_ST7032_vWriteIconSSP2:	
  2326                           
  2327                           	psect	maintext
  2328  077D                     __pmaintext:	
  2329                           ; 1 bytes @ 0x3E
  2330 ;;
  2331 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2332 ;;
  2333 ;; *************** function _main *****************
  2334 ;; Defined at:
  2335 ;;		line 138 in file "TestMain.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;		None
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  keypadSts      27   16[BANK1 ] struct .
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  1    wreg      void 
  2342 ;; Registers used:
  2343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2344 ;; Tracked objects:
  2345 ;;		On entry : B1F/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2349 ;;      Params:         0       0       0       0       0       0
  2350 ;;      Locals:         0       0      27       0       0       0
  2351 ;;      Temps:          0       0       1       0       0       0
  2352 ;;      Totals:         0       0      28       0       0       0
  2353 ;;Total ram usage:       28 bytes
  2354 ;; Hardware stack levels required when called:   11
  2355 ;; This function calls:
  2356 ;;		_I2C_vInitMasterSSP2
  2357 ;;		_I2C_vInitSlaveSSP1
  2358 ;;		_KEYPAD_vInit
  2359 ;;		_ST7032_vInitSSP2
  2360 ;;		_ssp2_vLCDTest01
  2361 ;;		_ssp2_vLCDTest02
  2362 ;;		_ssp2_vLCDTest03
  2363 ;;		_ssp2_vLCDTest04
  2364 ;; This function is called by:
  2365 ;;		Startup code after reset
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           
  2370                           ;psect for function _main
  2371  077D                     _main:	
  2372                           
  2373                           ;TestMain.c: 142:     OSCCON = 0b01111010;
  2374                           
  2375                           ;incstack = 0
  2376                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2377  077D  307A               	movlw	122
  2378  077E  0021               	movlb	1	; select bank1
  2379  077F  0099               	movwf	25	;volatile
  2380                           
  2381                           ;TestMain.c: 143:     ANSELA = 0b00000000;
  2382  0780  0023               	movlb	3	; select bank3
  2383  0781  018C               	clrf	12	;volatile
  2384                           
  2385                           ;TestMain.c: 144:     ANSELB = 0b00000000;
  2386  0782  018D               	clrf	13	;volatile
  2387                           
  2388                           ;TestMain.c: 145:     TRISA = 0b00011100;
  2389  0783  301C               	movlw	28
  2390  0784  0021               	movlb	1	; select bank1
  2391  0785  008C               	movwf	12	;volatile
  2392                           
  2393                           ;TestMain.c: 146:     TRISB = 0b10110110;
  2394  0786  30B6               	movlw	182
  2395  0787  008D               	movwf	13	;volatile
  2396                           
  2397                           ;TestMain.c: 147:     PORTA = 0b00000000;
  2398  0788  0020               	movlb	0	; select bank0
  2399  0789  018C               	clrf	12	;volatile
  2400                           
  2401                           ;TestMain.c: 148:     PORTB = 0b00000000;
  2402  078A  018D               	clrf	13	;volatile
  2403                           
  2404                           ;TestMain.c: 156:     OPTION_REG = 0b00000110;
  2405  078B  3006               	movlw	6
  2406  078C  0021               	movlb	1	; select bank1
  2407  078D  0095               	movwf	21	;volatile
  2408                           
  2409                           ;TestMain.c: 157:     TMR0 = 0;
  2410  078E  0020               	movlb	0	; select bank0
  2411  078F  0195               	clrf	21	;volatile
  2412                           
  2413                           ;TestMain.c: 158:     TMR0IF = 0;
  2414  0790  110B               	bcf	11,2	;volatile
  2415                           
  2416                           ;TestMain.c: 159:     TMR0IE = 1;
  2417  0791  168B               	bsf	11,5	;volatile
  2418                           
  2419                           ;TestMain.c: 165:     I2C_vInitSlaveSSP1((8), I2C_SLAVE_STD, ssp1_vCallback);
  2420  0792  01A9               	clrf	I2C_vInitSlaveSSP1@eMode
  2421  0793  301F               	movlw	low _ssp1_vCallback
  2422  0794  00AA               	movwf	I2C_vInitSlaveSSP1@pvCallback
  2423  0795  300C               	movlw	high _ssp1_vCallback
  2424  0796  00AB               	movwf	I2C_vInitSlaveSSP1@pvCallback+1
  2425  0797  3008               	movlw	8
  2426  0798  318B  239F  3187   	fcall	_I2C_vInitSlaveSSP1
  2427                           
  2428                           ;TestMain.c: 167:     I2C_vInitMasterSSP2(I2C_MASTER_STD, I2C_CLK_DIV_STD_8MHZ);
  2429  079B  3013               	movlw	19
  2430  079C  0021               	movlb	1	; select bank1
  2431  079D  00AF               	movwf	??_main^(0+128)
  2432  079E  082F               	movf	??_main^(0+128),w
  2433  079F  0020               	movlb	0	; select bank0
  2434  07A0  00A9               	movwf	I2C_vInitMasterSSP2@u8ClkDiv
  2435  07A1  3000               	movlw	0
  2436  07A2  318A  22FC  3187   	fcall	_I2C_vInitMasterSSP2
  2437                           
  2438                           ;TestMain.c: 172:     tsKEYPAD_status keypadSts;;TestMain.c: 174:     keypadSts.u16PinCo
      +                          ls[0] = (0x0000) | 0b00000100;
  2439  07A5  3004               	movlw	4
  2440  07A6  0021               	movlb	1	; select bank1
  2441  07A7  00B1               	movwf	(main@keypadSts^(0+128)+1)
  2442  07A8  3000               	movlw	0
  2443  07A9  00B2               	movwf	(main@keypadSts^(0+128)+2)
  2444                           
  2445                           ;TestMain.c: 175:     keypadSts.u16PinCols[1] = (0x0000) | 0b00001000;
  2446  07AA  3008               	movlw	8
  2447  07AB  00B3               	movwf	(main@keypadSts^(0+128)+3)
  2448  07AC  3000               	movlw	0
  2449  07AD  00B4               	movwf	(main@keypadSts^(0+128)+4)
  2450                           
  2451                           ;TestMain.c: 176:     keypadSts.u16PinCols[2] = (0x0000) | 0b00010000;
  2452  07AE  3010               	movlw	16
  2453  07AF  00B5               	movwf	(main@keypadSts^(0+128)+5)
  2454  07B0  3000               	movlw	0
  2455  07B1  00B6               	movwf	(main@keypadSts^(0+128)+6)
  2456                           
  2457                           ;TestMain.c: 177:     keypadSts.u16PinCols[3] = (0x0100) | 0b10000000;
  2458  07B2  3080               	movlw	128
  2459  07B3  00B7               	movwf	(main@keypadSts^(0+128)+7)
  2460  07B4  3001               	movlw	1
  2461  07B5  00B8               	movwf	(main@keypadSts^(0+128)+8)
  2462                           
  2463                           ;TestMain.c: 179:     keypadSts.u16PinRows[0] = (0x0000) | 0b00000010;
  2464  07B6  3002               	movlw	2
  2465  07B7  00B9               	movwf	(main@keypadSts^(0+128)+9)
  2466  07B8  3000               	movlw	0
  2467  07B9  00BA               	movwf	(main@keypadSts^(0+128)+10)
  2468                           
  2469                           ;TestMain.c: 180:     keypadSts.u16PinRows[1] = (0x0000) | 0b00000001;
  2470  07BA  3001               	movlw	1
  2471  07BB  00BB               	movwf	(main@keypadSts^(0+128)+11)
  2472  07BC  3000               	movlw	0
  2473  07BD  00BC               	movwf	(main@keypadSts^(0+128)+12)
  2474                           
  2475                           ;TestMain.c: 181:     keypadSts.u16PinRows[2] = (0x0000) | 0b10000000;
  2476  07BE  3080               	movlw	128
  2477  07BF  00BD               	movwf	(main@keypadSts^(0+128)+13)
  2478  07C0  3000               	movlw	0
  2479  07C1  00BE               	movwf	(main@keypadSts^(0+128)+14)
  2480                           
  2481                           ;TestMain.c: 182:     keypadSts.u16PinRows[3] = (0x0000) | 0b01000000;
  2482  07C2  3040               	movlw	64
  2483  07C3  00BF               	movwf	(main@keypadSts^(0+128)+15)
  2484  07C4  3000               	movlw	0
  2485  07C5  00C0               	movwf	(main@keypadSts^(0+128)+16)
  2486                           
  2487                           ;TestMain.c: 185:     KEYPAD_vInit(&keypadSts);
  2488  07C6  30B0               	movlw	(low (main@keypadSts| 0))& (0+255)
  2489  07C7  318C  2451  3187   	fcall	_KEYPAD_vInit
  2490                           
  2491                           ;TestMain.c: 190:     PEIE = 1;
  2492  07CA  170B               	bsf	11,6	;volatile
  2493                           
  2494                           ;TestMain.c: 191:     GIE = 1;
  2495  07CB  178B               	bsf	11,7	;volatile
  2496                           
  2497                           ;TestMain.c: 197:     RB0 = (1);
  2498  07CC  0020               	movlb	0	; select bank0
  2499  07CD  140D               	bsf	13,0	;volatile
  2500                           
  2501                           ;TestMain.c: 198:     RB3 = (0);
  2502  07CE  118D               	bcf	13,3	;volatile
  2503                           
  2504                           ;TestMain.c: 199:     _delay((unsigned long)((40)*(16000000/4000.0)));
  2505  07CF  30D0               	movlw	208
  2506  07D0  0021               	movlb	1	; select bank1
  2507  07D1  00AF               	movwf	??_main^(0+128)
  2508  07D2  30C9               	movlw	201
  2509  07D3                     u4077:	
  2510  07D3  0B89               	decfsz	9,f
  2511  07D4  2FD3               	goto	u4077
  2512  07D5  0BAF               	decfsz	??_main^(0+128),f
  2513  07D6  2FD3               	goto	u4077
  2514  07D7  3200               	nop2
  2515                           
  2516                           ;TestMain.c: 201:     ST7032_vInitSSP2();
  2517  07D8  318F  2795  3187   	fcall	_ST7032_vInitSSP2
  2518  07DB                     l6224:	
  2519                           
  2520                           ;TestMain.c: 217:         ssp2_vLCDTest01();
  2521  07DB  3184  2404  3187   	fcall	_ssp2_vLCDTest01
  2522                           
  2523                           ;TestMain.c: 219:         ssp2_vLCDTest02();
  2524  07DE  3180  202E  3187   	fcall	_ssp2_vLCDTest02
  2525                           
  2526                           ;TestMain.c: 221:         ssp2_vLCDTest03();
  2527  07E1  3182  225F  3187   	fcall	_ssp2_vLCDTest03
  2528                           
  2529                           ;TestMain.c: 223:         ssp2_vLCDTest04();
  2530  07E4  3186  26F4  3187   	fcall	_ssp2_vLCDTest04
  2531  07E7  2FDB               	goto	l6224
  2532  07E8                     __end_of_main:	
  2533                           
  2534                           	psect	text1
  2535  06F4                     __ptext1:	
  2536 ;; *************** function _ssp2_vLCDTest04 *****************
  2537 ;; Defined at:
  2538 ;;		line 916 in file "TestMain.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;		None
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;  u8SVal          1    7[BANK1 ] unsigned char 
  2543 ;;  u8Addr          1    6[BANK1 ] unsigned char 
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  1    wreg      void 
  2546 ;; Registers used:
  2547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2553 ;;      Params:         0       0       0       0       0       0
  2554 ;;      Locals:         0       0       2       0       0       0
  2555 ;;      Temps:          0       0       2       0       0       0
  2556 ;;      Totals:         0       0       4       0       0       0
  2557 ;;Total ram usage:        4 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; Hardware stack levels required when called:   10
  2560 ;; This function calls:
  2561 ;;		_ST7032_bSetCursorSSP2
  2562 ;;		_ST7032_vClearDispSSP2
  2563 ;;		_ST7032_vClearIconSSP2
  2564 ;;		_ST7032_vDispSettingSSP2
  2565 ;;		_ST7032_vWriteCharSSP2
  2566 ;;		_ST7032_vWriteIconSSP2
  2567 ;;		_ST7032_vWriteStringSSP2
  2568 ;; This function is called by:
  2569 ;;		_main
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           
  2574                           ;psect for function _ssp2_vLCDTest04
  2575  06F4                     _ssp2_vLCDTest04:	
  2576                           
  2577                           ;TestMain.c: 921:     ST7032_vClearDispSSP2();
  2578                           
  2579                           ;incstack = 0
  2580                           ; Regs used in _ssp2_vLCDTest04: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2581  06F4  318A  22E7  3186   	fcall	_ST7032_vClearDispSSP2
  2582                           
  2583                           ;TestMain.c: 923:     ST7032_vClearIconSSP2();
  2584  06F7  318E  26A5  3186   	fcall	_ST7032_vClearIconSSP2
  2585                           
  2586                           ;TestMain.c: 925:     ST7032_vDispSettingSSP2((1), (1), (0));
  2587  06FA  0020               	movlb	0	; select bank0
  2588  06FB  01AB               	clrf	ST7032_vDispSettingSSP2@bCursor
  2589  06FC  0AAB               	incf	ST7032_vDispSettingSSP2@bCursor,f
  2590  06FD  01AC               	clrf	ST7032_vDispSettingSSP2@bBlink
  2591  06FE  3001               	movlw	1
  2592  06FF  318B  2330  3186   	fcall	_ST7032_vDispSettingSSP2
  2593                           
  2594                           ;TestMain.c: 927:     ST7032_bSetCursorSSP2(0, 0);
  2595  0702  0020               	movlb	0	; select bank0
  2596  0703  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  2597  0704  3000               	movlw	0
  2598  0705  318B  23C9  3186   	fcall	_ST7032_bSetCursorSSP2
  2599                           
  2600                           ;TestMain.c: 929:     ST7032_vWriteStringSSP2("Test:LCD 04 0:00");
  2601  0708  302B               	movlw	low (STR_23| (0+32768))
  2602  0709  0020               	movlb	0	; select bank0
  2603  070A  00D3               	movwf	ST7032_vWriteStringSSP2@pcStr
  2604  070B  3089               	movlw	high (STR_23| (0+32768))
  2605  070C  00D4               	movwf	ST7032_vWriteStringSSP2@pcStr+1
  2606  070D  318D  25CD  3186   	fcall	_ST7032_vWriteStringSSP2
  2607                           
  2608                           ;TestMain.c: 931:     unsigned char u8Addr;;TestMain.c: 932:     unsigned char u8SVal;;T
      +                          estMain.c: 933:     for (u8Addr = 0; u8Addr < 16; u8Addr++) {
  2609  0710  0021               	movlb	1	; select bank1
  2610  0711  01A6               	clrf	ssp2_vLCDTest04@u8Addr^(0+128)
  2611  0712                     l6148:	
  2612                           
  2613                           ;TestMain.c: 935:         ST7032_bSetCursorSSP2(0, 12);
  2614  0712  300C               	movlw	12
  2615  0713  00A4               	movwf	??_ssp2_vLCDTest04^(0+128)
  2616  0714  0824               	movf	??_ssp2_vLCDTest04^(0+128),w
  2617  0715  0020               	movlb	0	; select bank0
  2618  0716  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  2619  0717  3000               	movlw	0
  2620  0718  318B  23C9  3186   	fcall	_ST7032_bSetCursorSSP2
  2621                           
  2622                           ;TestMain.c: 936:         ST7032_vWriteCharSSP2(HEX_LIST[u8Addr & 0x0F]);
  2623  071B  0021               	movlb	1	; select bank1
  2624  071C  0826               	movf	ssp2_vLCDTest04@u8Addr^(0+128),w
  2625  071D  390F               	andlw	15
  2626  071E  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  2627  071F  0084               	movwf	4
  2628  0720  3087               	movlw	high (_HEX_LIST| (0+32768))
  2629  0721  1803               	skipnc
  2630  0722  3E01               	addlw	1
  2631  0723  0085               	movwf	5
  2632  0724  0800               	movf	0,w	;code access
  2633  0725  318B  2378  3186   	fcall	_ST7032_vWriteCharSSP2
  2634                           
  2635                           ;TestMain.c: 938:         for (u8SVal = 0; u8SVal < 32; u8SVal++) {
  2636  0728  0021               	movlb	1	; select bank1
  2637  0729  01A7               	clrf	ssp2_vLCDTest04@u8SVal^(0+128)
  2638  072A                     l6158:	
  2639                           
  2640                           ;TestMain.c: 940:             ST7032_bSetCursorSSP2(0, 14);
  2641  072A  300E               	movlw	14
  2642  072B  00A4               	movwf	??_ssp2_vLCDTest04^(0+128)
  2643  072C  0824               	movf	??_ssp2_vLCDTest04^(0+128),w
  2644  072D  0020               	movlb	0	; select bank0
  2645  072E  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  2646  072F  3000               	movlw	0
  2647  0730  318B  23C9  3186   	fcall	_ST7032_bSetCursorSSP2
  2648                           
  2649                           ;TestMain.c: 941:             ST7032_vWriteCharSSP2(HEX_LIST[u8SVal >> 4 & 0x0F]);
  2650  0733  0021               	movlb	1	; select bank1
  2651  0734  0827               	movf	ssp2_vLCDTest04@u8SVal^(0+128),w
  2652  0735  00A4               	movwf	??_ssp2_vLCDTest04^(0+128)
  2653  0736  3004               	movlw	4
  2654  0737                     u3685:	
  2655  0737  36A4               	lsrf	??_ssp2_vLCDTest04^(0+128),f
  2656  0738  0B89               	decfsz	9,f
  2657  0739  2F37               	goto	u3685
  2658  073A  0824               	movf	??_ssp2_vLCDTest04^(0+128),w
  2659  073B  390F               	andlw	15
  2660  073C  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  2661  073D  0084               	movwf	4
  2662  073E  3087               	movlw	high (_HEX_LIST| (0+32768))
  2663  073F  1803               	skipnc
  2664  0740  3E01               	addlw	1
  2665  0741  0085               	movwf	5
  2666  0742  0800               	movf	0,w	;code access
  2667  0743  318B  2378  3186   	fcall	_ST7032_vWriteCharSSP2
  2668                           
  2669                           ;TestMain.c: 942:             ST7032_vWriteCharSSP2(HEX_LIST[u8SVal & 0x0F & 0x0F]);
  2670  0746  0021               	movlb	1	; select bank1
  2671  0747  0827               	movf	ssp2_vLCDTest04@u8SVal^(0+128),w
  2672  0748  390F               	andlw	15
  2673  0749  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  2674  074A  0084               	movwf	4
  2675  074B  3087               	movlw	high (_HEX_LIST| (0+32768))
  2676  074C  1803               	skipnc
  2677  074D  3E01               	addlw	1
  2678  074E  0085               	movwf	5
  2679  074F  0800               	movf	0,w	;code access
  2680  0750  318B  2378  3186   	fcall	_ST7032_vWriteCharSSP2
  2681                           
  2682                           ;TestMain.c: 944:             ST7032_vWriteIconSSP2(u8Addr, u8SVal);
  2683  0753  0021               	movlb	1	; select bank1
  2684  0754  0827               	movf	ssp2_vLCDTest04@u8SVal^(0+128),w
  2685  0755  00A4               	movwf	??_ssp2_vLCDTest04^(0+128)
  2686  0756  0824               	movf	??_ssp2_vLCDTest04^(0+128),w
  2687  0757  0020               	movlb	0	; select bank0
  2688  0758  00DD               	movwf	ST7032_vWriteIconSSP2@u8Map
  2689  0759  0021               	movlb	1	; select bank1
  2690  075A  0826               	movf	ssp2_vLCDTest04@u8Addr^(0+128),w
  2691  075B  318C  2485  3186   	fcall	_ST7032_vWriteIconSSP2
  2692                           
  2693                           ;TestMain.c: 946:             _delay((unsigned long)((50)*(16000000/4000.0)));
  2694  075E  3002               	movlw	2
  2695  075F  0021               	movlb	1	; select bank1
  2696  0760  00A5               	movwf	(??_ssp2_vLCDTest04^(0+128)+1)
  2697  0761  3004               	movlw	4
  2698  0762  00A4               	movwf	??_ssp2_vLCDTest04^(0+128)
  2699  0763  30BA               	movlw	186
  2700  0764                     u4087:	
  2701  0764  0B89               	decfsz	9,f
  2702  0765  2F64               	goto	u4087
  2703  0766  0BA4               	decfsz	??_ssp2_vLCDTest04^(0+128),f
  2704  0767  2F64               	goto	u4087
  2705  0768  0BA5               	decfsz	(??_ssp2_vLCDTest04^(0+128)+1),f
  2706  0769  2F64               	goto	u4087
  2707  076A  0000               	nop
  2708                           
  2709                           ;TestMain.c: 947:         }
  2710  076B  3001               	movlw	1
  2711  076C  0021               	movlb	1	; select bank1
  2712  076D  00A4               	movwf	??_ssp2_vLCDTest04^(0+128)
  2713  076E  0824               	movf	??_ssp2_vLCDTest04^(0+128),w
  2714  076F  07A7               	addwf	ssp2_vLCDTest04@u8SVal^(0+128),f
  2715  0770  3020               	movlw	32
  2716  0771  0227               	subwf	ssp2_vLCDTest04@u8SVal^(0+128),w
  2717  0772  1C03               	skipc
  2718  0773  2F2A               	goto	l6158
  2719                           
  2720                           ;TestMain.c: 948:     }
  2721  0774  3001               	movlw	1
  2722  0775  00A4               	movwf	??_ssp2_vLCDTest04^(0+128)
  2723  0776  0824               	movf	??_ssp2_vLCDTest04^(0+128),w
  2724  0777  07A6               	addwf	ssp2_vLCDTest04@u8Addr^(0+128),f
  2725  0778  3010               	movlw	16
  2726  0779  0226               	subwf	ssp2_vLCDTest04@u8Addr^(0+128),w
  2727  077A  1803               	btfsc	3,0
  2728  077B  0008               	return
  2729  077C  2F12               	goto	l6148
  2730  077D                     __end_of_ssp2_vLCDTest04:	
  2731                           
  2732                           	psect	text2
  2733  0C85                     __ptext2:	
  2734 ;; *************** function _ST7032_vWriteIconSSP2 *****************
  2735 ;; Defined at:
  2736 ;;		line 1150 in file "st7032.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  u8Addr          1    wreg     unsigned char 
  2739 ;;  u8Map           1   61[BANK0 ] unsigned char 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  u8Addr          1    0[BANK1 ] unsigned char 
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  1    wreg      void 
  2744 ;; Registers used:
  2745 ;;		wreg, status,2, status,0, pclath, cstack
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2751 ;;      Params:         0       1       0       0       0       0
  2752 ;;      Locals:         0       0       1       0       0       0
  2753 ;;      Temps:          0       0       0       0       0       0
  2754 ;;      Totals:         0       1       1       0       0       0
  2755 ;;Total ram usage:        2 bytes
  2756 ;; Hardware stack levels used:    1
  2757 ;; Hardware stack levels required when called:    9
  2758 ;; This function calls:
  2759 ;;		_I2C_u8MstStartSSP2
  2760 ;;		_I2C_u8MstTxSSP2
  2761 ;;		_I2C_vMstStopSSP2
  2762 ;;		_bSetCursorSSP2
  2763 ;;		_vExecCmdSSP2
  2764 ;; This function is called by:
  2765 ;;		_ssp2_vLCDTest04
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           
  2770                           ;psect for function _ST7032_vWriteIconSSP2
  2771  0C85                     _ST7032_vWriteIconSSP2:	
  2772                           
  2773                           ;incstack = 0
  2774                           ; Regs used in _ST7032_vWriteIconSSP2: [wreg+status,2+status,0+pclath+cstack]
  2775                           ;ST7032_vWriteIconSSP2@u8Addr stored from wreg
  2776  0C85  0021               	movlb	1	; select bank1
  2777  0C86  00A0               	movwf	ST7032_vWriteIconSSP2@u8Addr^(0+128)
  2778                           
  2779                           ;st7032.c: 1152:     I2C_u8MstStartSSP2((0x3E), (0));
  2780  0C87  0020               	movlb	0	; select bank0
  2781  0C88  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  2782  0C89  303E               	movlw	62
  2783  0C8A  318B  2313  318C   	fcall	_I2C_u8MstStartSSP2
  2784                           
  2785                           ;st7032.c: 1154:     vExecCmdSSP2((0b00111001));
  2786  0C8D  3039               	movlw	57
  2787  0C8E  318A  2277  318C   	fcall	_vExecCmdSSP2
  2788                           
  2789                           ;st7032.c: 1155:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2790  0C91  3022               	movlw	34
  2791  0C92                     u4097:	
  2792  0C92  0B89               	decfsz	9,f
  2793  0C93  2C92               	goto	u4097
  2794  0C94  3200               	nop2
  2795                           
  2796                           ;st7032.c: 1157:     vExecCmdSSP2((0b01000000) | (u8Addr & 0x0F));
  2797  0C95  0021               	movlb	1	; select bank1
  2798  0C96  0820               	movf	ST7032_vWriteIconSSP2@u8Addr^(0+128),w
  2799  0C97  390F               	andlw	15
  2800  0C98  3840               	iorlw	64
  2801  0C99  318A  2277  318C   	fcall	_vExecCmdSSP2
  2802                           
  2803                           ;st7032.c: 1158:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2804  0C9C  3022               	movlw	34
  2805  0C9D                     u4107:	
  2806  0C9D  0B89               	decfsz	9,f
  2807  0C9E  2C9D               	goto	u4107
  2808  0C9F  3200               	nop2
  2809                           
  2810                           ;st7032.c: 1160:     vExecCmdSSP2((0b00111000));
  2811  0CA0  3038               	movlw	56
  2812  0CA1  318A  2277  318C   	fcall	_vExecCmdSSP2
  2813                           
  2814                           ;st7032.c: 1161:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2815  0CA4  3022               	movlw	34
  2816  0CA5                     u4117:	
  2817  0CA5  0B89               	decfsz	9,f
  2818  0CA6  2CA5               	goto	u4117
  2819  0CA7  3200               	nop2
  2820                           
  2821                           ;st7032.c: 1163:     I2C_u8MstTxSSP2((0x40));
  2822  0CA8  3040               	movlw	64
  2823  0CA9  318A  226D  318C   	fcall	_I2C_u8MstTxSSP2
  2824                           
  2825                           ;st7032.c: 1165:     I2C_u8MstTxSSP2(u8Map & 0x1F);
  2826  0CAC  0020               	movlb	0	; select bank0
  2827  0CAD  085D               	movf	ST7032_vWriteIconSSP2@u8Map,w
  2828  0CAE  391F               	andlw	31
  2829  0CAF  318A  226D  318C   	fcall	_I2C_u8MstTxSSP2
  2830                           
  2831                           ;st7032.c: 1167:     I2C_vMstStopSSP2();
  2832  0CB2  318A  2256  318C   	fcall	_I2C_vMstStopSSP2
  2833                           
  2834                           ;st7032.c: 1168:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2835  0CB5  3022               	movlw	34
  2836  0CB6                     u4127:	
  2837  0CB6  0B89               	decfsz	9,f
  2838  0CB7  2CB6               	goto	u4127
  2839  0CB8  3200               	nop2
  2840                           
  2841                           ;st7032.c: 1170:     bSetCursorSSP2(stStateSSP2.u8CursorPos);
  2842  0CB9  0020               	movlb	0	; select bank0
  2843  0CBA  085E               	movf	_stStateSSP2,w
  2844  0CBB  318D  2587         	fcall	_bSetCursorSSP2
  2845  0CBD  0008               	return
  2846  0CBE                     __end_of_ST7032_vWriteIconSSP2:	
  2847                           
  2848                           	psect	text3
  2849  0EA5                     __ptext3:	
  2850 ;; *************** function _ST7032_vClearIconSSP2 *****************
  2851 ;; Defined at:
  2852 ;;		line 408 in file "st7032.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;		None
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;  u8Addr          1    0[BANK1 ] unsigned char 
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  1    wreg      void 
  2859 ;; Registers used:
  2860 ;;		wreg, status,2, status,0, pclath, cstack
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2866 ;;      Params:         0       0       0       0       0       0
  2867 ;;      Locals:         0       0       1       0       0       0
  2868 ;;      Temps:          0       1       0       0       0       0
  2869 ;;      Totals:         0       1       1       0       0       0
  2870 ;;Total ram usage:        2 bytes
  2871 ;; Hardware stack levels used:    1
  2872 ;; Hardware stack levels required when called:    9
  2873 ;; This function calls:
  2874 ;;		_I2C_u8MstStartSSP2
  2875 ;;		_I2C_u8MstTxSSP2
  2876 ;;		_I2C_vMstStopSSP2
  2877 ;;		_bSetCursorSSP2
  2878 ;;		_vExecCmdEndSSP2
  2879 ;;		_vExecCmdSSP2
  2880 ;; This function is called by:
  2881 ;;		_ssp2_vLCDTest04
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           
  2886                           ;psect for function _ST7032_vClearIconSSP2
  2887  0EA5                     _ST7032_vClearIconSSP2:	
  2888                           
  2889                           ;st7032.c: 410:     I2C_u8MstStartSSP2((0x3E), (0));
  2890                           
  2891                           ;incstack = 0
  2892                           ; Regs used in _ST7032_vClearIconSSP2: [wreg+status,2+status,0+pclath+cstack]
  2893  0EA5  0020               	movlb	0	; select bank0
  2894  0EA6  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  2895  0EA7  303E               	movlw	62
  2896  0EA8  318B  2313  318E   	fcall	_I2C_u8MstStartSSP2
  2897                           
  2898                           ;st7032.c: 412:     vExecCmdSSP2((0b00111001));
  2899  0EAB  3039               	movlw	57
  2900  0EAC  318A  2277  318E   	fcall	_vExecCmdSSP2
  2901                           
  2902                           ;st7032.c: 413:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2903  0EAF  3022               	movlw	34
  2904  0EB0                     u4137:	
  2905  0EB0  0B89               	decfsz	9,f
  2906  0EB1  2EB0               	goto	u4137
  2907  0EB2  3200               	nop2
  2908                           
  2909                           ;st7032.c: 415:     vExecCmdSSP2((0b01000000));
  2910  0EB3  3040               	movlw	64
  2911  0EB4  318A  2277  318E   	fcall	_vExecCmdSSP2
  2912                           
  2913                           ;st7032.c: 416:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2914  0EB7  3022               	movlw	34
  2915  0EB8                     u4147:	
  2916  0EB8  0B89               	decfsz	9,f
  2917  0EB9  2EB8               	goto	u4147
  2918  0EBA  3200               	nop2
  2919                           
  2920                           ;st7032.c: 418:     vExecCmdEndSSP2((0b00111000));
  2921  0EBB  3038               	movlw	56
  2922  0EBC  318A  22A5  318E   	fcall	_vExecCmdEndSSP2
  2923                           
  2924                           ;st7032.c: 419:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2925  0EBF  3022               	movlw	34
  2926  0EC0                     u4157:	
  2927  0EC0  0B89               	decfsz	9,f
  2928  0EC1  2EC0               	goto	u4157
  2929  0EC2  3200               	nop2
  2930                           
  2931                           ;st7032.c: 421:     I2C_u8MstStartSSP2((0x3E), (0));
  2932  0EC3  0020               	movlb	0	; select bank0
  2933  0EC4  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  2934  0EC5  303E               	movlw	62
  2935  0EC6  318B  2313  318E   	fcall	_I2C_u8MstStartSSP2
  2936                           
  2937                           ;st7032.c: 423:     I2C_u8MstTxSSP2((0x40));
  2938  0EC9  3040               	movlw	64
  2939  0ECA  318A  226D  318E   	fcall	_I2C_u8MstTxSSP2
  2940                           
  2941                           ;st7032.c: 425:     unsigned char u8Addr;;st7032.c: 426:     for (u8Addr = 0x00; u8Addr 
      +                          < 0x10; u8Addr++) {
  2942  0ECD  0021               	movlb	1	; select bank1
  2943  0ECE  01A0               	clrf	ST7032_vClearIconSSP2@u8Addr^(0+128)
  2944  0ECF                     l5706:	
  2945                           
  2946                           ;st7032.c: 427:         I2C_u8MstTxSSP2(0x00);
  2947  0ECF  3000               	movlw	0
  2948  0ED0  318A  226D  318E   	fcall	_I2C_u8MstTxSSP2
  2949                           
  2950                           ;st7032.c: 428:         _delay((unsigned long)(((26))*(16000000/4000000.0)));
  2951  0ED3  3022               	movlw	34
  2952  0ED4                     u4167:	
  2953  0ED4  0B89               	decfsz	9,f
  2954  0ED5  2ED4               	goto	u4167
  2955  0ED6  3200               	nop2
  2956                           
  2957                           ;st7032.c: 429:     }
  2958  0ED7  3001               	movlw	1
  2959  0ED8  0020               	movlb	0	; select bank0
  2960  0ED9  00DD               	movwf	??_ST7032_vClearIconSSP2
  2961  0EDA  085D               	movf	??_ST7032_vClearIconSSP2,w
  2962  0EDB  0021               	movlb	1	; select bank1
  2963  0EDC  07A0               	addwf	ST7032_vClearIconSSP2@u8Addr^(0+128),f
  2964  0EDD  3010               	movlw	16
  2965  0EDE  0220               	subwf	ST7032_vClearIconSSP2@u8Addr^(0+128),w
  2966  0EDF  1C03               	skipc
  2967  0EE0  2ECF               	goto	l5706
  2968                           
  2969                           ;st7032.c: 431:     I2C_vMstStopSSP2();
  2970  0EE1  318A  2256  318E   	fcall	_I2C_vMstStopSSP2
  2971                           
  2972                           ;st7032.c: 433:     I2C_u8MstStartSSP2((0x3E), (0));
  2973  0EE4  0020               	movlb	0	; select bank0
  2974  0EE5  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  2975  0EE6  303E               	movlw	62
  2976  0EE7  318B  2313  318E   	fcall	_I2C_u8MstStartSSP2
  2977                           
  2978                           ;st7032.c: 435:     bSetCursorSSP2(stStateSSP2.u8CursorPos);
  2979  0EEA  0020               	movlb	0	; select bank0
  2980  0EEB  085E               	movf	_stStateSSP2,w
  2981  0EEC  318D  2587         	fcall	_bSetCursorSSP2
  2982  0EEE  0008               	return
  2983  0EEF                     __end_of_ST7032_vClearIconSSP2:	
  2984                           
  2985                           	psect	text4
  2986  025F                     __ptext4:	
  2987 ;; *************** function _ssp2_vLCDTest03 *****************
  2988 ;; Defined at:
  2989 ;;		line 792 in file "TestMain.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;		None
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  u8BitMap        8    7[BANK1 ] unsigned char [8]
  2994 ;;  u8Idx           1    6[BANK1 ] unsigned char 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      void 
  2997 ;; Registers used:
  2998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3004 ;;      Params:         0       0       0       0       0       0
  3005 ;;      Locals:         0       0       9       0       0       0
  3006 ;;      Temps:          0       0       2       0       0       0
  3007 ;;      Totals:         0       0      11       0       0       0
  3008 ;;Total ram usage:       11 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:   10
  3011 ;; This function calls:
  3012 ;;		_ST7032_bSetCursorSSP2
  3013 ;;		_ST7032_vClearDispSSP2
  3014 ;;		_ST7032_vDispSettingSSP2
  3015 ;;		_ST7032_vWriteCGRAMSSP2
  3016 ;;		_ST7032_vWriteCharSSP2
  3017 ;;		_ST7032_vWriteStringSSP2
  3018 ;; This function is called by:
  3019 ;;		_main
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           
  3024                           ;psect for function _ssp2_vLCDTest03
  3025  025F                     _ssp2_vLCDTest03:	
  3026                           
  3027                           ;TestMain.c: 796:     unsigned char u8BitMap[] = {0x11, 0x0A, 0x04, 0x15, 0x15, 0x04, 0x
      +                          0A, 0x11};
  3028                           
  3029                           ;incstack = 0
  3030                           ; Regs used in _ssp2_vLCDTest03: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3031  025F  30CB               	movlw	low ssp2_vLCDTest03@F2641
  3032  0260  0086               	movwf	6
  3033  0261  3000               	movlw	high ssp2_vLCDTest03@F2641
  3034  0262  0087               	movwf	7
  3035  0263  30A7               	movlw	low ssp2_vLCDTest03@u8BitMap
  3036  0264  0084               	movwf	4
  3037  0265  3000               	movlw	high ssp2_vLCDTest03@u8BitMap
  3038  0266  0085               	movwf	5
  3039  0267  3008               	movlw	8
  3040  0268  0021               	movlb	1	; select bank1
  3041  0269  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3042  026A                     u3650:	
  3043  026A  0016               	moviw fsr1++
  3044  026B  001A               	movwi fsr0++
  3045  026C  0BA4               	decfsz	??_ssp2_vLCDTest03^(0+128),f
  3046  026D  2A6A               	goto	u3650
  3047                           
  3048                           ;TestMain.c: 797:     ST7032_vWriteCGRAMSSP2(0x00, u8BitMap);
  3049  026E  30A7               	movlw	(low (ssp2_vLCDTest03@u8BitMap| 0))& (0+255)
  3050  026F  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3051  0270  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3052  0271  0020               	movlb	0	; select bank0
  3053  0272  00DD               	movwf	ST7032_vWriteCGRAMSSP2@pu8BitMap
  3054  0273  3000               	movlw	0
  3055  0274  318F  2741  3182   	fcall	_ST7032_vWriteCGRAMSSP2
  3056                           
  3057                           ;TestMain.c: 798:     u8BitMap[0] = 0x04;
  3058  0277  3004               	movlw	4
  3059  0278  0021               	movlb	1	; select bank1
  3060  0279  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3061  027A  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3062  027B  00A7               	movwf	ssp2_vLCDTest03@u8BitMap^(0+128)
  3063                           
  3064                           ;TestMain.c: 799:     u8BitMap[1] = 0x0A;
  3065  027C  300A               	movlw	10
  3066  027D  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3067  027E  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3068  027F  00A8               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+1)
  3069                           
  3070                           ;TestMain.c: 800:     u8BitMap[2] = 0x11;
  3071  0280  3011               	movlw	17
  3072  0281  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3073  0282  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3074  0283  00A9               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+2)
  3075                           
  3076                           ;TestMain.c: 801:     u8BitMap[3] = 0x0A;
  3077  0284  300A               	movlw	10
  3078  0285  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3079  0286  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3080  0287  00AA               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+3)
  3081                           
  3082                           ;TestMain.c: 802:     u8BitMap[4] = 0x04;
  3083  0288  3004               	movlw	4
  3084  0289  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3085  028A  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3086  028B  00AB               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+4)
  3087                           
  3088                           ;TestMain.c: 803:     u8BitMap[5] = 0x0A;
  3089  028C  300A               	movlw	10
  3090  028D  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3091  028E  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3092  028F  00AC               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+5)
  3093                           
  3094                           ;TestMain.c: 804:     u8BitMap[6] = 0x11;
  3095  0290  3011               	movlw	17
  3096  0291  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3097  0292  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3098  0293  00AD               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+6)
  3099                           
  3100                           ;TestMain.c: 805:     u8BitMap[7] = 0x0E;
  3101  0294  300E               	movlw	14
  3102  0295  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3103  0296  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3104  0297  00AE               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+7)
  3105                           
  3106                           ;TestMain.c: 806:     ST7032_vWriteCGRAMSSP2(0x01, u8BitMap);
  3107  0298  30A7               	movlw	(low (ssp2_vLCDTest03@u8BitMap| 0))& (0+255)
  3108  0299  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3109  029A  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3110  029B  0020               	movlb	0	; select bank0
  3111  029C  00DD               	movwf	ST7032_vWriteCGRAMSSP2@pu8BitMap
  3112  029D  3001               	movlw	1
  3113  029E  318F  2741  3182   	fcall	_ST7032_vWriteCGRAMSSP2
  3114                           
  3115                           ;TestMain.c: 807:     u8BitMap[0] = 0x11;
  3116  02A1  3011               	movlw	17
  3117  02A2  0021               	movlb	1	; select bank1
  3118  02A3  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3119  02A4  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3120  02A5  00A7               	movwf	ssp2_vLCDTest03@u8BitMap^(0+128)
  3121                           
  3122                           ;TestMain.c: 808:     u8BitMap[1] = 0x15;
  3123  02A6  3015               	movlw	21
  3124  02A7  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3125  02A8  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3126  02A9  00A8               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+1)
  3127                           
  3128                           ;TestMain.c: 809:     u8BitMap[2] = 0x15;
  3129  02AA  3015               	movlw	21
  3130  02AB  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3131  02AC  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3132  02AD  00A9               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+2)
  3133                           
  3134                           ;TestMain.c: 810:     u8BitMap[3] = 0x04;
  3135  02AE  3004               	movlw	4
  3136  02AF  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3137  02B0  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3138  02B1  00AA               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+3)
  3139                           
  3140                           ;TestMain.c: 811:     u8BitMap[4] = 0x0A;
  3141  02B2  300A               	movlw	10
  3142  02B3  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3143  02B4  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3144  02B5  00AB               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+4)
  3145                           
  3146                           ;TestMain.c: 812:     u8BitMap[5] = 0x0A;
  3147  02B6  300A               	movlw	10
  3148  02B7  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3149  02B8  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3150  02B9  00AC               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+5)
  3151                           
  3152                           ;TestMain.c: 813:     u8BitMap[6] = 0x0A;
  3153  02BA  300A               	movlw	10
  3154  02BB  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3155  02BC  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3156  02BD  00AD               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+6)
  3157                           
  3158                           ;TestMain.c: 814:     u8BitMap[7] = 0x04;
  3159  02BE  3004               	movlw	4
  3160  02BF  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3161  02C0  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3162  02C1  00AE               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+7)
  3163                           
  3164                           ;TestMain.c: 815:     ST7032_vWriteCGRAMSSP2(0x02, u8BitMap);
  3165  02C2  30A7               	movlw	(low (ssp2_vLCDTest03@u8BitMap| 0))& (0+255)
  3166  02C3  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3167  02C4  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3168  02C5  0020               	movlb	0	; select bank0
  3169  02C6  00DD               	movwf	ST7032_vWriteCGRAMSSP2@pu8BitMap
  3170  02C7  3002               	movlw	2
  3171  02C8  318F  2741  3182   	fcall	_ST7032_vWriteCGRAMSSP2
  3172                           
  3173                           ;TestMain.c: 816:     u8BitMap[0] = 0x1F;
  3174  02CB  301F               	movlw	31
  3175  02CC  0021               	movlb	1	; select bank1
  3176  02CD  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3177  02CE  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3178  02CF  00A7               	movwf	ssp2_vLCDTest03@u8BitMap^(0+128)
  3179                           
  3180                           ;TestMain.c: 817:     u8BitMap[1] = 0x00;
  3181  02D0  01A8               	clrf	(ssp2_vLCDTest03@u8BitMap^(0+128)+1)
  3182                           
  3183                           ;TestMain.c: 818:     u8BitMap[2] = 0x0E;
  3184  02D1  300E               	movlw	14
  3185  02D2  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3186  02D3  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3187  02D4  00A9               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+2)
  3188                           
  3189                           ;TestMain.c: 819:     u8BitMap[3] = 0x00;
  3190  02D5  01AA               	clrf	(ssp2_vLCDTest03@u8BitMap^(0+128)+3)
  3191                           
  3192                           ;TestMain.c: 820:     u8BitMap[4] = 0x1F;
  3193  02D6  301F               	movlw	31
  3194  02D7  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3195  02D8  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3196  02D9  00AB               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+4)
  3197                           
  3198                           ;TestMain.c: 821:     u8BitMap[5] = 0x00;
  3199  02DA  01AC               	clrf	(ssp2_vLCDTest03@u8BitMap^(0+128)+5)
  3200                           
  3201                           ;TestMain.c: 822:     u8BitMap[6] = 0x15;
  3202  02DB  3015               	movlw	21
  3203  02DC  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3204  02DD  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3205  02DE  00AD               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+6)
  3206                           
  3207                           ;TestMain.c: 823:     u8BitMap[7] = 0x15;
  3208  02DF  3015               	movlw	21
  3209  02E0  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3210  02E1  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3211  02E2  00AE               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+7)
  3212                           
  3213                           ;TestMain.c: 824:     ST7032_vWriteCGRAMSSP2(0x03, u8BitMap);
  3214  02E3  30A7               	movlw	(low (ssp2_vLCDTest03@u8BitMap| 0))& (0+255)
  3215  02E4  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3216  02E5  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3217  02E6  0020               	movlb	0	; select bank0
  3218  02E7  00DD               	movwf	ST7032_vWriteCGRAMSSP2@pu8BitMap
  3219  02E8  3003               	movlw	3
  3220  02E9  318F  2741  3182   	fcall	_ST7032_vWriteCGRAMSSP2
  3221                           
  3222                           ;TestMain.c: 825:     u8BitMap[0] = 0x1F;
  3223  02EC  301F               	movlw	31
  3224  02ED  0021               	movlb	1	; select bank1
  3225  02EE  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3226  02EF  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3227  02F0  00A7               	movwf	ssp2_vLCDTest03@u8BitMap^(0+128)
  3228                           
  3229                           ;TestMain.c: 826:     u8BitMap[1] = 0x11;
  3230  02F1  3011               	movlw	17
  3231  02F2  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3232  02F3  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3233  02F4  00A8               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+1)
  3234                           
  3235                           ;TestMain.c: 827:     u8BitMap[2] = 0x15;
  3236  02F5  3015               	movlw	21
  3237  02F6  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3238  02F7  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3239  02F8  00A9               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+2)
  3240                           
  3241                           ;TestMain.c: 828:     u8BitMap[3] = 0x11;
  3242  02F9  3011               	movlw	17
  3243  02FA  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3244  02FB  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3245  02FC  00AA               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+3)
  3246                           
  3247                           ;TestMain.c: 829:     u8BitMap[4] = 0x1F;
  3248  02FD  301F               	movlw	31
  3249  02FE  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3250  02FF  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3251  0300  00AB               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+4)
  3252                           
  3253                           ;TestMain.c: 830:     u8BitMap[5] = 0x15;
  3254  0301  3015               	movlw	21
  3255  0302  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3256  0303  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3257  0304  00AC               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+5)
  3258                           
  3259                           ;TestMain.c: 831:     u8BitMap[6] = 0x15;
  3260  0305  3015               	movlw	21
  3261  0306  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3262  0307  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3263  0308  00AD               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+6)
  3264                           
  3265                           ;TestMain.c: 832:     u8BitMap[7] = 0x15;
  3266  0309  3015               	movlw	21
  3267  030A  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3268  030B  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3269  030C  00AE               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+7)
  3270                           
  3271                           ;TestMain.c: 833:     ST7032_vWriteCGRAMSSP2(0x04, u8BitMap);
  3272  030D  30A7               	movlw	(low (ssp2_vLCDTest03@u8BitMap| 0))& (0+255)
  3273  030E  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3274  030F  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3275  0310  0020               	movlb	0	; select bank0
  3276  0311  00DD               	movwf	ST7032_vWriteCGRAMSSP2@pu8BitMap
  3277  0312  3004               	movlw	4
  3278  0313  318F  2741  3182   	fcall	_ST7032_vWriteCGRAMSSP2
  3279                           
  3280                           ;TestMain.c: 834:     u8BitMap[0] = 0x15;
  3281  0316  3015               	movlw	21
  3282  0317  0021               	movlb	1	; select bank1
  3283  0318  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3284  0319  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3285  031A  00A7               	movwf	ssp2_vLCDTest03@u8BitMap^(0+128)
  3286                           
  3287                           ;TestMain.c: 835:     u8BitMap[1] = 0x15;
  3288  031B  3015               	movlw	21
  3289  031C  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3290  031D  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3291  031E  00A8               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+1)
  3292                           
  3293                           ;TestMain.c: 836:     u8BitMap[2] = 0x0E;
  3294  031F  300E               	movlw	14
  3295  0320  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3296  0321  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3297  0322  00A9               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+2)
  3298                           
  3299                           ;TestMain.c: 837:     u8BitMap[3] = 0x15;
  3300  0323  3015               	movlw	21
  3301  0324  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3302  0325  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3303  0326  00AA               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+3)
  3304                           
  3305                           ;TestMain.c: 838:     u8BitMap[4] = 0x0A;
  3306  0327  300A               	movlw	10
  3307  0328  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3308  0329  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3309  032A  00AB               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+4)
  3310                           
  3311                           ;TestMain.c: 839:     u8BitMap[5] = 0x15;
  3312  032B  3015               	movlw	21
  3313  032C  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3314  032D  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3315  032E  00AC               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+5)
  3316                           
  3317                           ;TestMain.c: 840:     u8BitMap[6] = 0x0A;
  3318  032F  300A               	movlw	10
  3319  0330  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3320  0331  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3321  0332  00AD               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+6)
  3322                           
  3323                           ;TestMain.c: 841:     u8BitMap[7] = 0x15;
  3324  0333  3015               	movlw	21
  3325  0334  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3326  0335  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3327  0336  00AE               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+7)
  3328                           
  3329                           ;TestMain.c: 842:     ST7032_vWriteCGRAMSSP2(0x05, u8BitMap);
  3330  0337  30A7               	movlw	(low (ssp2_vLCDTest03@u8BitMap| 0))& (0+255)
  3331  0338  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3332  0339  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3333  033A  0020               	movlb	0	; select bank0
  3334  033B  00DD               	movwf	ST7032_vWriteCGRAMSSP2@pu8BitMap
  3335  033C  3005               	movlw	5
  3336  033D  318F  2741  3182   	fcall	_ST7032_vWriteCGRAMSSP2
  3337                           
  3338                           ;TestMain.c: 843:     u8BitMap[0] = 0x1F;
  3339  0340  301F               	movlw	31
  3340  0341  0021               	movlb	1	; select bank1
  3341  0342  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3342  0343  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3343  0344  00A7               	movwf	ssp2_vLCDTest03@u8BitMap^(0+128)
  3344                           
  3345                           ;TestMain.c: 844:     u8BitMap[1] = 0x11;
  3346  0345  3011               	movlw	17
  3347  0346  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3348  0347  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3349  0348  00A8               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+1)
  3350                           
  3351                           ;TestMain.c: 845:     u8BitMap[2] = 0x15;
  3352  0349  3015               	movlw	21
  3353  034A  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3354  034B  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3355  034C  00A9               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+2)
  3356                           
  3357                           ;TestMain.c: 846:     u8BitMap[3] = 0x1D;
  3358  034D  301D               	movlw	29
  3359  034E  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3360  034F  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3361  0350  00AA               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+3)
  3362                           
  3363                           ;TestMain.c: 847:     u8BitMap[4] = 0x01;
  3364  0351  01AB               	clrf	(ssp2_vLCDTest03@u8BitMap^(0+128)+4)
  3365  0352  0AAB               	incf	(ssp2_vLCDTest03@u8BitMap^(0+128)+4),f
  3366                           
  3367                           ;TestMain.c: 848:     u8BitMap[5] = 0x1F;
  3368  0353  301F               	movlw	31
  3369  0354  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3370  0355  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3371  0356  00AC               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+5)
  3372                           
  3373                           ;TestMain.c: 849:     u8BitMap[6] = 0x00;
  3374  0357  01AD               	clrf	(ssp2_vLCDTest03@u8BitMap^(0+128)+6)
  3375                           
  3376                           ;TestMain.c: 850:     u8BitMap[7] = 0x1F;
  3377  0358  301F               	movlw	31
  3378  0359  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3379  035A  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3380  035B  00AE               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+7)
  3381                           
  3382                           ;TestMain.c: 851:     ST7032_vWriteCGRAMSSP2(0x06, u8BitMap);
  3383  035C  30A7               	movlw	(low (ssp2_vLCDTest03@u8BitMap| 0))& (0+255)
  3384  035D  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3385  035E  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3386  035F  0020               	movlb	0	; select bank0
  3387  0360  00DD               	movwf	ST7032_vWriteCGRAMSSP2@pu8BitMap
  3388  0361  3006               	movlw	6
  3389  0362  318F  2741  3182   	fcall	_ST7032_vWriteCGRAMSSP2
  3390                           
  3391                           ;TestMain.c: 852:     u8BitMap[0] = 0x1F;
  3392  0365  301F               	movlw	31
  3393  0366  0021               	movlb	1	; select bank1
  3394  0367  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3395  0368  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3396  0369  00A7               	movwf	ssp2_vLCDTest03@u8BitMap^(0+128)
  3397                           
  3398                           ;TestMain.c: 853:     u8BitMap[1] = 0x11;
  3399  036A  3011               	movlw	17
  3400  036B  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3401  036C  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3402  036D  00A8               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+1)
  3403                           
  3404                           ;TestMain.c: 854:     u8BitMap[2] = 0x10;
  3405  036E  3010               	movlw	16
  3406  036F  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3407  0370  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3408  0371  00A9               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+2)
  3409                           
  3410                           ;TestMain.c: 855:     u8BitMap[3] = 0x1F;
  3411  0372  301F               	movlw	31
  3412  0373  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3413  0374  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3414  0375  00AA               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+3)
  3415                           
  3416                           ;TestMain.c: 856:     u8BitMap[4] = 0x01;
  3417  0376  01AB               	clrf	(ssp2_vLCDTest03@u8BitMap^(0+128)+4)
  3418  0377  0AAB               	incf	(ssp2_vLCDTest03@u8BitMap^(0+128)+4),f
  3419                           
  3420                           ;TestMain.c: 857:     u8BitMap[5] = 0x15;
  3421  0378  3015               	movlw	21
  3422  0379  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3423  037A  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3424  037B  00AC               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+5)
  3425                           
  3426                           ;TestMain.c: 858:     u8BitMap[6] = 0x11;
  3427  037C  3011               	movlw	17
  3428  037D  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3429  037E  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3430  037F  00AD               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+6)
  3431                           
  3432                           ;TestMain.c: 859:     u8BitMap[7] = 0x1F;
  3433  0380  301F               	movlw	31
  3434  0381  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3435  0382  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3436  0383  00AE               	movwf	(ssp2_vLCDTest03@u8BitMap^(0+128)+7)
  3437                           
  3438                           ;TestMain.c: 860:     ST7032_vWriteCGRAMSSP2(0x07, u8BitMap);
  3439  0384  30A7               	movlw	(low (ssp2_vLCDTest03@u8BitMap| 0))& (0+255)
  3440  0385  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3441  0386  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3442  0387  0020               	movlb	0	; select bank0
  3443  0388  00DD               	movwf	ST7032_vWriteCGRAMSSP2@pu8BitMap
  3444  0389  3007               	movlw	7
  3445  038A  318F  2741  3182   	fcall	_ST7032_vWriteCGRAMSSP2
  3446                           
  3447                           ;TestMain.c: 866:     ST7032_vClearDispSSP2();
  3448  038D  318A  22E7  3182   	fcall	_ST7032_vClearDispSSP2
  3449                           
  3450                           ;TestMain.c: 868:     ST7032_bSetCursorSSP2(0, 0);
  3451  0390  0020               	movlb	0	; select bank0
  3452  0391  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  3453  0392  3000               	movlw	0
  3454  0393  318B  23C9  3182   	fcall	_ST7032_bSetCursorSSP2
  3455                           
  3456                           ;TestMain.c: 870:     ST7032_vWriteStringSSP2("Test:LCD 03     ");
  3457  0396  305F               	movlw	low (STR_21| (0+32768))
  3458  0397  0020               	movlb	0	; select bank0
  3459  0398  00D3               	movwf	ST7032_vWriteStringSSP2@pcStr
  3460  0399  3088               	movlw	high (STR_21| (0+32768))
  3461  039A  00D4               	movwf	ST7032_vWriteStringSSP2@pcStr+1
  3462  039B  318D  25CD  3182   	fcall	_ST7032_vWriteStringSSP2
  3463                           
  3464                           ;TestMain.c: 872:     ST7032_vDispSettingSSP2((1), (1), (0));
  3465  039E  0020               	movlb	0	; select bank0
  3466  039F  01AB               	clrf	ST7032_vDispSettingSSP2@bCursor
  3467  03A0  0AAB               	incf	ST7032_vDispSettingSSP2@bCursor,f
  3468  03A1  01AC               	clrf	ST7032_vDispSettingSSP2@bBlink
  3469  03A2  3001               	movlw	1
  3470  03A3  318B  2330  3182   	fcall	_ST7032_vDispSettingSSP2
  3471                           
  3472                           ;TestMain.c: 874:     ST7032_bSetCursorSSP2(1, 0);
  3473  03A6  0020               	movlb	0	; select bank0
  3474  03A7  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  3475  03A8  3001               	movlw	1
  3476  03A9  318B  23C9  3182   	fcall	_ST7032_bSetCursorSSP2
  3477                           
  3478                           ;TestMain.c: 875:     unsigned char u8Idx;;TestMain.c: 876:     for (u8Idx = 0; u8Idx < 
      +                          16; u8Idx++) {
  3479  03AC  0021               	movlb	1	; select bank1
  3480  03AD  01A6               	clrf	ssp2_vLCDTest03@u8Idx^(0+128)
  3481  03AE                     l6108:	
  3482                           
  3483                           ;TestMain.c: 878:         ST7032_vWriteCharSSP2(u8Idx);
  3484  03AE  0826               	movf	ssp2_vLCDTest03@u8Idx^(0+128),w
  3485  03AF  318B  2378  3182   	fcall	_ST7032_vWriteCharSSP2
  3486                           
  3487                           ;TestMain.c: 880:         _delay((unsigned long)((500)*(16000000/4000.0)));
  3488  03B2  300B               	movlw	11
  3489  03B3  0021               	movlb	1	; select bank1
  3490  03B4  00A5               	movwf	(??_ssp2_vLCDTest03^(0+128)+1)
  3491  03B5  3026               	movlw	38
  3492  03B6  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3493  03B7  305D               	movlw	93
  3494  03B8                     u4177:	
  3495  03B8  0B89               	decfsz	9,f
  3496  03B9  2BB8               	goto	u4177
  3497  03BA  0BA4               	decfsz	??_ssp2_vLCDTest03^(0+128),f
  3498  03BB  2BB8               	goto	u4177
  3499  03BC  0BA5               	decfsz	(??_ssp2_vLCDTest03^(0+128)+1),f
  3500  03BD  2BB8               	goto	u4177
  3501  03BE  3200               	nop2
  3502                           
  3503                           ;TestMain.c: 881:     }
  3504  03BF  3001               	movlw	1
  3505  03C0  0021               	movlb	1	; select bank1
  3506  03C1  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3507  03C2  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3508  03C3  07A6               	addwf	ssp2_vLCDTest03@u8Idx^(0+128),f
  3509  03C4  3010               	movlw	16
  3510  03C5  0226               	subwf	ssp2_vLCDTest03@u8Idx^(0+128),w
  3511  03C6  1C03               	skipc
  3512  03C7  2BAE               	goto	l6108
  3513                           
  3514                           ;TestMain.c: 886:     ST7032_vClearDispSSP2();
  3515  03C8  318A  22E7  3182   	fcall	_ST7032_vClearDispSSP2
  3516                           
  3517                           ;TestMain.c: 888:     ST7032_bSetCursorSSP2(1, 0);
  3518  03CB  0020               	movlb	0	; select bank0
  3519  03CC  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  3520  03CD  3001               	movlw	1
  3521  03CE  318B  23C9  3182   	fcall	_ST7032_bSetCursorSSP2
  3522                           
  3523                           ;TestMain.c: 890:     ST7032_vWriteStringSSP2("Test:LCD 03     ");
  3524  03D1  305F               	movlw	low (STR_21| (0+32768))
  3525  03D2  0020               	movlb	0	; select bank0
  3526  03D3  00D3               	movwf	ST7032_vWriteStringSSP2@pcStr
  3527  03D4  3088               	movlw	high (STR_21| (0+32768))
  3528  03D5  00D4               	movwf	ST7032_vWriteStringSSP2@pcStr+1
  3529  03D6  318D  25CD  3182   	fcall	_ST7032_vWriteStringSSP2
  3530                           
  3531                           ;TestMain.c: 892:     ST7032_vDispSettingSSP2((1), (1), (0));
  3532  03D9  0020               	movlb	0	; select bank0
  3533  03DA  01AB               	clrf	ST7032_vDispSettingSSP2@bCursor
  3534  03DB  0AAB               	incf	ST7032_vDispSettingSSP2@bCursor,f
  3535  03DC  01AC               	clrf	ST7032_vDispSettingSSP2@bBlink
  3536  03DD  3001               	movlw	1
  3537  03DE  318B  2330  3182   	fcall	_ST7032_vDispSettingSSP2
  3538                           
  3539                           ;TestMain.c: 894:     ST7032_bSetCursorSSP2(0, 0);
  3540  03E1  0020               	movlb	0	; select bank0
  3541  03E2  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  3542  03E3  3000               	movlw	0
  3543  03E4  318B  23C9  3182   	fcall	_ST7032_bSetCursorSSP2
  3544                           
  3545                           ;TestMain.c: 895:     for (u8Idx = 0; u8Idx < 16; u8Idx++) {
  3546  03E7  0021               	movlb	1	; select bank1
  3547  03E8  01A6               	clrf	ssp2_vLCDTest03@u8Idx^(0+128)
  3548  03E9                     l6130:	
  3549                           
  3550                           ;TestMain.c: 897:         ST7032_vWriteCharSSP2(u8Idx);
  3551  03E9  0826               	movf	ssp2_vLCDTest03@u8Idx^(0+128),w
  3552  03EA  318B  2378  3182   	fcall	_ST7032_vWriteCharSSP2
  3553                           
  3554                           ;TestMain.c: 899:         _delay((unsigned long)((500)*(16000000/4000.0)));
  3555  03ED  300B               	movlw	11
  3556  03EE  0021               	movlb	1	; select bank1
  3557  03EF  00A5               	movwf	(??_ssp2_vLCDTest03^(0+128)+1)
  3558  03F0  3026               	movlw	38
  3559  03F1  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3560  03F2  305D               	movlw	93
  3561  03F3                     u4187:	
  3562  03F3  0B89               	decfsz	9,f
  3563  03F4  2BF3               	goto	u4187
  3564  03F5  0BA4               	decfsz	??_ssp2_vLCDTest03^(0+128),f
  3565  03F6  2BF3               	goto	u4187
  3566  03F7  0BA5               	decfsz	(??_ssp2_vLCDTest03^(0+128)+1),f
  3567  03F8  2BF3               	goto	u4187
  3568  03F9  3200               	nop2
  3569                           
  3570                           ;TestMain.c: 900:     }
  3571  03FA  3001               	movlw	1
  3572  03FB  0021               	movlb	1	; select bank1
  3573  03FC  00A4               	movwf	??_ssp2_vLCDTest03^(0+128)
  3574  03FD  0824               	movf	??_ssp2_vLCDTest03^(0+128),w
  3575  03FE  07A6               	addwf	ssp2_vLCDTest03@u8Idx^(0+128),f
  3576  03FF  3010               	movlw	16
  3577  0400  0226               	subwf	ssp2_vLCDTest03@u8Idx^(0+128),w
  3578  0401  1803               	btfsc	3,0
  3579  0402  0008               	return
  3580  0403  2BE9               	goto	l6130
  3581  0404                     __end_of_ssp2_vLCDTest03:	
  3582                           
  3583                           	psect	text5
  3584  0F41                     __ptext5:	
  3585 ;; *************** function _ST7032_vWriteCGRAMSSP2 *****************
  3586 ;; Defined at:
  3587 ;;		line 864 in file "st7032.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  u8CharNo        1    wreg     unsigned char 
  3590 ;;  pu8BitMap       1   61[BANK0 ] PTR unsigned char 
  3591 ;;		 -> ssp2_vLCDTest03@u8BitMap(8), 
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;  u8CharNo        1    1[BANK1 ] unsigned char 
  3594 ;;  u8Idx           1    3[BANK1 ] unsigned char 
  3595 ;;  pu8WkMap        1    2[BANK1 ] PTR unsigned char 
  3596 ;;		 -> ssp2_vLCDTest03@u8BitMap(8), 
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  1    wreg      void 
  3599 ;; Registers used:
  3600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3606 ;;      Params:         0       1       0       0       0       0
  3607 ;;      Locals:         0       0       3       0       0       0
  3608 ;;      Temps:          0       0       1       0       0       0
  3609 ;;      Totals:         0       1       4       0       0       0
  3610 ;;Total ram usage:        5 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    9
  3613 ;; This function calls:
  3614 ;;		_I2C_u8MstStartSSP2
  3615 ;;		_I2C_u8MstTxSSP2
  3616 ;;		_I2C_vMstStopSSP2
  3617 ;;		_bSetCursorSSP2
  3618 ;;		_vExecCmdSSP2
  3619 ;; This function is called by:
  3620 ;;		_ssp2_vLCDTest03
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           
  3625                           ;psect for function _ST7032_vWriteCGRAMSSP2
  3626  0F41                     _ST7032_vWriteCGRAMSSP2:	
  3627                           
  3628                           ;incstack = 0
  3629                           ; Regs used in _ST7032_vWriteCGRAMSSP2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  3630                           ;ST7032_vWriteCGRAMSSP2@u8CharNo stored from wreg
  3631  0F41  0021               	movlb	1	; select bank1
  3632  0F42  00A1               	movwf	ST7032_vWriteCGRAMSSP2@u8CharNo^(0+128)
  3633                           
  3634                           ;st7032.c: 866:     I2C_u8MstStartSSP2((0x3E), (0));
  3635  0F43  0020               	movlb	0	; select bank0
  3636  0F44  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  3637  0F45  303E               	movlw	62
  3638  0F46  318B  2313  318F   	fcall	_I2C_u8MstStartSSP2
  3639                           
  3640                           ;st7032.c: 868:     vExecCmdSSP2((0b00111000));
  3641  0F49  3038               	movlw	56
  3642  0F4A  318A  2277  318F   	fcall	_vExecCmdSSP2
  3643                           
  3644                           ;st7032.c: 869:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  3645  0F4D  3022               	movlw	34
  3646  0F4E                     u4197:	
  3647  0F4E  0B89               	decfsz	9,f
  3648  0F4F  2F4E               	goto	u4197
  3649  0F50  3200               	nop2
  3650                           
  3651                           ;st7032.c: 871:     vExecCmdSSP2((0b01000000) | ((u8CharNo << 3) & 0x38));
  3652  0F51  0021               	movlb	1	; select bank1
  3653  0F52  0821               	movf	ST7032_vWriteCGRAMSSP2@u8CharNo^(0+128),w
  3654  0F53  00A0               	movwf	??_ST7032_vWriteCGRAMSSP2^(0+128)
  3655  0F54  3002               	movlw	2
  3656  0F55                     u3415:	
  3657  0F55  35A0               	lslf	??_ST7032_vWriteCGRAMSSP2^(0+128),f
  3658  0F56  3EFF               	addlw	-1
  3659  0F57  1D03               	skipz
  3660  0F58  2F55               	goto	u3415
  3661  0F59  3520               	lslf	??_ST7032_vWriteCGRAMSSP2^(0+128),w
  3662  0F5A  3938               	andlw	56
  3663  0F5B  3840               	iorlw	64
  3664  0F5C  318A  2277  318F   	fcall	_vExecCmdSSP2
  3665                           
  3666                           ;st7032.c: 872:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  3667  0F5F  3022               	movlw	34
  3668  0F60                     u4207:	
  3669  0F60  0B89               	decfsz	9,f
  3670  0F61  2F60               	goto	u4207
  3671  0F62  3200               	nop2
  3672                           
  3673                           ;st7032.c: 874:     I2C_u8MstTxSSP2((0x40));
  3674  0F63  3040               	movlw	64
  3675  0F64  318A  226D  318F   	fcall	_I2C_u8MstTxSSP2
  3676                           
  3677                           ;st7032.c: 876:     unsigned char *pu8WkMap = pu8BitMap;
  3678  0F67  0020               	movlb	0	; select bank0
  3679  0F68  085D               	movf	ST7032_vWriteCGRAMSSP2@pu8BitMap,w
  3680  0F69  0021               	movlb	1	; select bank1
  3681  0F6A  00A0               	movwf	??_ST7032_vWriteCGRAMSSP2^(0+128)
  3682  0F6B  0820               	movf	??_ST7032_vWriteCGRAMSSP2^(0+128),w
  3683  0F6C  00A2               	movwf	ST7032_vWriteCGRAMSSP2@pu8WkMap^(0+128)
  3684                           
  3685                           ;st7032.c: 877:     unsigned char u8Idx;;st7032.c: 878:     for (u8Idx = 0; u8Idx < 8; u
      +                          8Idx++) {
  3686  0F6D  01A3               	clrf	ST7032_vWriteCGRAMSSP2@u8Idx^(0+128)
  3687  0F6E                     l5678:	
  3688                           
  3689                           ;st7032.c: 879:         I2C_u8MstTxSSP2(*pu8WkMap & 0x1F);
  3690  0F6E  0822               	movf	ST7032_vWriteCGRAMSSP2@pu8WkMap^(0+128),w
  3691  0F6F  0086               	movwf	6
  3692  0F70  0187               	clrf	7
  3693  0F71  0801               	movf	1,w
  3694  0F72  391F               	andlw	31
  3695  0F73  318A  226D  318F   	fcall	_I2C_u8MstTxSSP2
  3696                           
  3697                           ;st7032.c: 880:         _delay((unsigned long)(((26))*(16000000/4000000.0)));
  3698  0F76  3022               	movlw	34
  3699  0F77                     u4217:	
  3700  0F77  0B89               	decfsz	9,f
  3701  0F78  2F77               	goto	u4217
  3702  0F79  3200               	nop2
  3703                           
  3704                           ;st7032.c: 881:         pu8WkMap++;
  3705  0F7A  3001               	movlw	1
  3706  0F7B  0021               	movlb	1	; select bank1
  3707  0F7C  00A0               	movwf	??_ST7032_vWriteCGRAMSSP2^(0+128)
  3708  0F7D  0820               	movf	??_ST7032_vWriteCGRAMSSP2^(0+128),w
  3709  0F7E  07A2               	addwf	ST7032_vWriteCGRAMSSP2@pu8WkMap^(0+128),f
  3710                           
  3711                           ;st7032.c: 882:     }
  3712  0F7F  3001               	movlw	1
  3713  0F80  00A0               	movwf	??_ST7032_vWriteCGRAMSSP2^(0+128)
  3714  0F81  0820               	movf	??_ST7032_vWriteCGRAMSSP2^(0+128),w
  3715  0F82  07A3               	addwf	ST7032_vWriteCGRAMSSP2@u8Idx^(0+128),f
  3716  0F83  3008               	movlw	8
  3717  0F84  0223               	subwf	ST7032_vWriteCGRAMSSP2@u8Idx^(0+128),w
  3718  0F85  1C03               	skipc
  3719  0F86  2F6E               	goto	l5678
  3720                           
  3721                           ;st7032.c: 884:     I2C_vMstStopSSP2();
  3722  0F87  318A  2256  318F   	fcall	_I2C_vMstStopSSP2
  3723                           
  3724                           ;st7032.c: 886:     I2C_u8MstStartSSP2((0x3E), (0));
  3725  0F8A  0020               	movlb	0	; select bank0
  3726  0F8B  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  3727  0F8C  303E               	movlw	62
  3728  0F8D  318B  2313  318F   	fcall	_I2C_u8MstStartSSP2
  3729                           
  3730                           ;st7032.c: 888:     bSetCursorSSP2(stStateSSP2.u8CursorPos);
  3731  0F90  0020               	movlb	0	; select bank0
  3732  0F91  085E               	movf	_stStateSSP2,w
  3733  0F92  318D  2587         	fcall	_bSetCursorSSP2
  3734  0F94  0008               	return
  3735  0F95                     __end_of_ST7032_vWriteCGRAMSSP2:	
  3736                           
  3737                           	psect	text6
  3738  002E                     __ptext6:	
  3739 ;; *************** function _ssp2_vLCDTest02 *****************
  3740 ;; Defined at:
  3741 ;;		line 651 in file "TestMain.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;		None
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;  u8Idx           1    6[BANK1 ] unsigned char 
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  1    wreg      void 
  3748 ;; Registers used:
  3749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3755 ;;      Params:         0       0       0       0       0       0
  3756 ;;      Locals:         0       0       1       0       0       0
  3757 ;;      Temps:          0       0       2       0       0       0
  3758 ;;      Totals:         0       0       3       0       0       0
  3759 ;;Total ram usage:        3 bytes
  3760 ;; Hardware stack levels used:    1
  3761 ;; Hardware stack levels required when called:   10
  3762 ;; This function calls:
  3763 ;;		_ST7032_bCursorLeftSSP2
  3764 ;;		_ST7032_bCursorRightSSP2
  3765 ;;		_ST7032_bSetCursorSSP2
  3766 ;;		_ST7032_u8GetCursorColNoSSP2
  3767 ;;		_ST7032_u8GetCursorRowNoSSP2
  3768 ;;		_ST7032_vClearDispSSP2
  3769 ;;		_ST7032_vDispSettingSSP2
  3770 ;;		_ST7032_vWriteCharSSP2
  3771 ;;		_ST7032_vWriteStringSSP2
  3772 ;; This function is called by:
  3773 ;;		_main
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           
  3778                           ;psect for function _ssp2_vLCDTest02
  3779  002E                     _ssp2_vLCDTest02:	
  3780                           
  3781                           ;TestMain.c: 656:     ST7032_vClearDispSSP2();
  3782                           
  3783                           ;incstack = 0
  3784                           ; Regs used in _ssp2_vLCDTest02: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3785  002E  318A  22E7  3180   	fcall	_ST7032_vClearDispSSP2
  3786                           
  3787                           ;TestMain.c: 658:     ST7032_bSetCursorSSP2(0, 0);
  3788  0031  0020               	movlb	0	; select bank0
  3789  0032  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  3790  0033  3000               	movlw	0
  3791  0034  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  3792                           
  3793                           ;TestMain.c: 660:     ST7032_vWriteStringSSP2("Test:LCD 02 0x0");
  3794  0037  305E               	movlw	low (STR_18| (0+32768))
  3795  0038  0020               	movlb	0	; select bank0
  3796  0039  00D3               	movwf	ST7032_vWriteStringSSP2@pcStr
  3797  003A  3089               	movlw	high (STR_18| (0+32768))
  3798  003B  00D4               	movwf	ST7032_vWriteStringSSP2@pcStr+1
  3799  003C  318D  25CD  3180   	fcall	_ST7032_vWriteStringSSP2
  3800                           
  3801                           ;TestMain.c: 661:     ST7032_vWriteCharSSP2(HEX_LIST[ST7032_u8GetCursorRowNoSSP2() & 0x0
      +                          F]);
  3802  003F  318A  22C4  3180   	fcall	_ST7032_u8GetCursorRowNoSSP2
  3803  0042  390F               	andlw	15
  3804  0043  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  3805  0044  0084               	movwf	4
  3806  0045  3087               	movlw	high (_HEX_LIST| (0+32768))
  3807  0046  1803               	skipnc
  3808  0047  3E01               	addlw	1
  3809  0048  0085               	movwf	5
  3810  0049  0800               	movf	0,w	;code access
  3811  004A  318B  2378  3180   	fcall	_ST7032_vWriteCharSSP2
  3812                           
  3813                           ;TestMain.c: 663:     ST7032_vDispSettingSSP2((1), (1), (0));
  3814  004D  0020               	movlb	0	; select bank0
  3815  004E  01AB               	clrf	ST7032_vDispSettingSSP2@bCursor
  3816  004F  0AAB               	incf	ST7032_vDispSettingSSP2@bCursor,f
  3817  0050  01AC               	clrf	ST7032_vDispSettingSSP2@bBlink
  3818  0051  3001               	movlw	1
  3819  0052  318B  2330  3180   	fcall	_ST7032_vDispSettingSSP2
  3820                           
  3821                           ;TestMain.c: 665:     unsigned char u8Idx;;TestMain.c: 666:     for (u8Idx = 0; u8Idx < 
      +                          16; u8Idx++) {
  3822  0055  0021               	movlb	1	; select bank1
  3823  0056  01A6               	clrf	ssp2_vLCDTest02@u8Idx^(0+128)
  3824  0057                     l188:	
  3825                           
  3826                           ;TestMain.c: 668:         if ((u8Idx % 2) == 0) {
  3827  0057  1826               	btfsc	ssp2_vLCDTest02@u8Idx^(0+128),0
  3828  0058  2874               	goto	l5844
  3829                           
  3830                           ;TestMain.c: 669:             if (ST7032_bSetCursorSSP2(1, u8Idx) == (1)) {
  3831  0059  0826               	movf	ssp2_vLCDTest02@u8Idx^(0+128),w
  3832  005A  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  3833  005B  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  3834  005C  0020               	movlb	0	; select bank0
  3835  005D  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  3836  005E  3001               	movlw	1
  3837  005F  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  3838  0062  3A01               	xorlw	1
  3839  0063  1D03               	skipz
  3840  0064  2877               	goto	l5846
  3841                           
  3842                           ;TestMain.c: 670:                 ST7032_vWriteCharSSP2(HEX_LIST[ST7032_u8GetCursorColNo
      +                          SSP2() & 0x0F]);
  3843  0065  318A  22B3  3180   	fcall	_ST7032_u8GetCursorColNoSSP2
  3844  0068  390F               	andlw	15
  3845  0069  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  3846  006A  0084               	movwf	4
  3847  006B  3087               	movlw	high (_HEX_LIST| (0+32768))
  3848  006C  1803               	skipnc
  3849  006D  3E01               	addlw	1
  3850  006E  0085               	movwf	5
  3851  006F  0800               	movf	0,w	;code access
  3852  0070  318B  2378  3180   	fcall	_ST7032_vWriteCharSSP2
  3853  0073  2877               	goto	l5846
  3854  0074                     l5844:	
  3855                           
  3856                           ;TestMain.c: 673:             ST7032_bCursorRightSSP2();
  3857  0074  318A  228D  3180   	fcall	_ST7032_bCursorRightSSP2
  3858  0077                     l5846:	
  3859                           
  3860                           ;TestMain.c: 676:         _delay((unsigned long)((500)*(16000000/4000.0)));
  3861  0077  300B               	movlw	11
  3862  0078  0021               	movlb	1	; select bank1
  3863  0079  00A5               	movwf	(??_ssp2_vLCDTest02^(0+128)+1)
  3864  007A  3026               	movlw	38
  3865  007B  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  3866  007C  305D               	movlw	93
  3867  007D                     u4227:	
  3868  007D  0B89               	decfsz	9,f
  3869  007E  287D               	goto	u4227
  3870  007F  0BA4               	decfsz	??_ssp2_vLCDTest02^(0+128),f
  3871  0080  287D               	goto	u4227
  3872  0081  0BA5               	decfsz	(??_ssp2_vLCDTest02^(0+128)+1),f
  3873  0082  287D               	goto	u4227
  3874  0083  3200               	nop2
  3875                           
  3876                           ;TestMain.c: 677:     }
  3877  0084  3001               	movlw	1
  3878  0085  0021               	movlb	1	; select bank1
  3879  0086  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  3880  0087  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  3881  0088  07A6               	addwf	ssp2_vLCDTest02@u8Idx^(0+128),f
  3882  0089  3010               	movlw	16
  3883  008A  0226               	subwf	ssp2_vLCDTest02@u8Idx^(0+128),w
  3884  008B  1C03               	skipc
  3885  008C  2857               	goto	l188
  3886                           
  3887                           ;TestMain.c: 678:     for (u8Idx = 0; u8Idx < 16; u8Idx++) {
  3888  008D  01A6               	clrf	ssp2_vLCDTest02@u8Idx^(0+128)
  3889  008E                     l193:	
  3890                           
  3891                           ;TestMain.c: 680:         if ((u8Idx % 2) == 0) {
  3892  008E  1826               	btfsc	ssp2_vLCDTest02@u8Idx^(0+128),0
  3893  008F  28AC               	goto	l5862
  3894                           
  3895                           ;TestMain.c: 681:             if (ST7032_bSetCursorSSP2(1, 15 - u8Idx) == (1)) {
  3896  0090  0826               	movf	ssp2_vLCDTest02@u8Idx^(0+128),w
  3897  0091  3C0F               	sublw	15
  3898  0092  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  3899  0093  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  3900  0094  0020               	movlb	0	; select bank0
  3901  0095  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  3902  0096  3001               	movlw	1
  3903  0097  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  3904  009A  3A01               	xorlw	1
  3905  009B  1D03               	skipz
  3906  009C  28AF               	goto	l5864
  3907                           
  3908                           ;TestMain.c: 682:                 ST7032_vWriteCharSSP2(HEX_LIST[ST7032_u8GetCursorColNo
      +                          SSP2() & 0x0F]);
  3909  009D  318A  22B3  3180   	fcall	_ST7032_u8GetCursorColNoSSP2
  3910  00A0  390F               	andlw	15
  3911  00A1  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  3912  00A2  0084               	movwf	4
  3913  00A3  3087               	movlw	high (_HEX_LIST| (0+32768))
  3914  00A4  1803               	skipnc
  3915  00A5  3E01               	addlw	1
  3916  00A6  0085               	movwf	5
  3917  00A7  0800               	movf	0,w	;code access
  3918  00A8  318B  2378  3180   	fcall	_ST7032_vWriteCharSSP2
  3919  00AB  28AF               	goto	l5864
  3920  00AC                     l5862:	
  3921                           
  3922                           ;TestMain.c: 685:             ST7032_bCursorLeftSSP2();
  3923  00AC  318A  2282  3180   	fcall	_ST7032_bCursorLeftSSP2
  3924  00AF                     l5864:	
  3925                           
  3926                           ;TestMain.c: 688:         _delay((unsigned long)((500)*(16000000/4000.0)));
  3927  00AF  300B               	movlw	11
  3928  00B0  0021               	movlb	1	; select bank1
  3929  00B1  00A5               	movwf	(??_ssp2_vLCDTest02^(0+128)+1)
  3930  00B2  3026               	movlw	38
  3931  00B3  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  3932  00B4  305D               	movlw	93
  3933  00B5                     u4237:	
  3934  00B5  0B89               	decfsz	9,f
  3935  00B6  28B5               	goto	u4237
  3936  00B7  0BA4               	decfsz	??_ssp2_vLCDTest02^(0+128),f
  3937  00B8  28B5               	goto	u4237
  3938  00B9  0BA5               	decfsz	(??_ssp2_vLCDTest02^(0+128)+1),f
  3939  00BA  28B5               	goto	u4237
  3940  00BB  3200               	nop2
  3941                           
  3942                           ;TestMain.c: 689:     }
  3943  00BC  3001               	movlw	1
  3944  00BD  0021               	movlb	1	; select bank1
  3945  00BE  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  3946  00BF  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  3947  00C0  07A6               	addwf	ssp2_vLCDTest02@u8Idx^(0+128),f
  3948  00C1  3010               	movlw	16
  3949  00C2  0226               	subwf	ssp2_vLCDTest02@u8Idx^(0+128),w
  3950  00C3  1C03               	skipc
  3951  00C4  288E               	goto	l193
  3952                           
  3953                           ;TestMain.c: 694:     ST7032_vClearDispSSP2();
  3954  00C5  318A  22E7  3180   	fcall	_ST7032_vClearDispSSP2
  3955                           
  3956                           ;TestMain.c: 696:     ST7032_bSetCursorSSP2(1, 0);
  3957  00C8  0020               	movlb	0	; select bank0
  3958  00C9  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  3959  00CA  3001               	movlw	1
  3960  00CB  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  3961                           
  3962                           ;TestMain.c: 698:     ST7032_vWriteStringSSP2("Test:LCD 02 0x0");
  3963  00CE  305E               	movlw	low (STR_18| (0+32768))
  3964  00CF  0020               	movlb	0	; select bank0
  3965  00D0  00D3               	movwf	ST7032_vWriteStringSSP2@pcStr
  3966  00D1  3089               	movlw	high (STR_18| (0+32768))
  3967  00D2  00D4               	movwf	ST7032_vWriteStringSSP2@pcStr+1
  3968  00D3  318D  25CD  3180   	fcall	_ST7032_vWriteStringSSP2
  3969                           
  3970                           ;TestMain.c: 699:     ST7032_vWriteCharSSP2(HEX_LIST[ST7032_u8GetCursorRowNoSSP2() & 0x0
      +                          F]);
  3971  00D6  318A  22C4  3180   	fcall	_ST7032_u8GetCursorRowNoSSP2
  3972  00D9  390F               	andlw	15
  3973  00DA  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  3974  00DB  0084               	movwf	4
  3975  00DC  3087               	movlw	high (_HEX_LIST| (0+32768))
  3976  00DD  1803               	skipnc
  3977  00DE  3E01               	addlw	1
  3978  00DF  0085               	movwf	5
  3979  00E0  0800               	movf	0,w	;code access
  3980  00E1  318B  2378  3180   	fcall	_ST7032_vWriteCharSSP2
  3981                           
  3982                           ;TestMain.c: 701:     ST7032_vDispSettingSSP2((1), (1), (1));
  3983  00E4  0020               	movlb	0	; select bank0
  3984  00E5  01AB               	clrf	ST7032_vDispSettingSSP2@bCursor
  3985  00E6  0AAB               	incf	ST7032_vDispSettingSSP2@bCursor,f
  3986  00E7  01AC               	clrf	ST7032_vDispSettingSSP2@bBlink
  3987  00E8  0AAC               	incf	ST7032_vDispSettingSSP2@bBlink,f
  3988  00E9  3001               	movlw	1
  3989  00EA  318B  2330  3180   	fcall	_ST7032_vDispSettingSSP2
  3990                           
  3991                           ;TestMain.c: 703:     for (u8Idx = 0; u8Idx <16; u8Idx++) {
  3992  00ED  0021               	movlb	1	; select bank1
  3993  00EE  01A6               	clrf	ssp2_vLCDTest02@u8Idx^(0+128)
  3994  00EF                     l198:	
  3995                           
  3996                           ;TestMain.c: 705:         if ((u8Idx % 2) == 0) {
  3997  00EF  1826               	btfsc	ssp2_vLCDTest02@u8Idx^(0+128),0
  3998  00F0  2909               	goto	l5886
  3999                           
  4000                           ;TestMain.c: 706:             ST7032_bSetCursorSSP2(0, u8Idx);
  4001  00F1  0826               	movf	ssp2_vLCDTest02@u8Idx^(0+128),w
  4002  00F2  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4003  00F3  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  4004  00F4  0020               	movlb	0	; select bank0
  4005  00F5  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  4006  00F6  3000               	movlw	0
  4007  00F7  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4008                           
  4009                           ;TestMain.c: 707:             ST7032_vWriteCharSSP2(HEX_LIST[ST7032_u8GetCursorColNoSSP2
      +                          () & 0x0F]);
  4010  00FA  318A  22B3  3180   	fcall	_ST7032_u8GetCursorColNoSSP2
  4011  00FD  390F               	andlw	15
  4012  00FE  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  4013  00FF  0084               	movwf	4
  4014  0100  3087               	movlw	high (_HEX_LIST| (0+32768))
  4015  0101  1803               	skipnc
  4016  0102  3E01               	addlw	1
  4017  0103  0085               	movwf	5
  4018  0104  0800               	movf	0,w	;code access
  4019  0105  318B  2378  3180   	fcall	_ST7032_vWriteCharSSP2
  4020                           
  4021                           ;TestMain.c: 708:         } else {
  4022  0108  290C               	goto	l5888
  4023  0109                     l5886:	
  4024                           
  4025                           ;TestMain.c: 709:             ST7032_bCursorRightSSP2();
  4026  0109  318A  228D  3180   	fcall	_ST7032_bCursorRightSSP2
  4027  010C                     l5888:	
  4028                           
  4029                           ;TestMain.c: 712:         _delay((unsigned long)((500)*(16000000/4000.0)));
  4030  010C  300B               	movlw	11
  4031  010D  0021               	movlb	1	; select bank1
  4032  010E  00A5               	movwf	(??_ssp2_vLCDTest02^(0+128)+1)
  4033  010F  3026               	movlw	38
  4034  0110  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4035  0111  305D               	movlw	93
  4036  0112                     u4247:	
  4037  0112  0B89               	decfsz	9,f
  4038  0113  2912               	goto	u4247
  4039  0114  0BA4               	decfsz	??_ssp2_vLCDTest02^(0+128),f
  4040  0115  2912               	goto	u4247
  4041  0116  0BA5               	decfsz	(??_ssp2_vLCDTest02^(0+128)+1),f
  4042  0117  2912               	goto	u4247
  4043  0118  3200               	nop2
  4044                           
  4045                           ;TestMain.c: 713:     }
  4046  0119  3001               	movlw	1
  4047  011A  0021               	movlb	1	; select bank1
  4048  011B  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4049  011C  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  4050  011D  07A6               	addwf	ssp2_vLCDTest02@u8Idx^(0+128),f
  4051  011E  3010               	movlw	16
  4052  011F  0226               	subwf	ssp2_vLCDTest02@u8Idx^(0+128),w
  4053  0120  1C03               	skipc
  4054  0121  28EF               	goto	l198
  4055                           
  4056                           ;TestMain.c: 714:     for (u8Idx = 0; u8Idx <16; u8Idx++) {
  4057  0122  01A6               	clrf	ssp2_vLCDTest02@u8Idx^(0+128)
  4058  0123                     l202:	
  4059                           
  4060                           ;TestMain.c: 716:         if ((u8Idx % 2) == 0) {
  4061  0123  1826               	btfsc	ssp2_vLCDTest02@u8Idx^(0+128),0
  4062  0124  293E               	goto	l5904
  4063                           
  4064                           ;TestMain.c: 717:             ST7032_bSetCursorSSP2(0, 15 - u8Idx);
  4065  0125  0826               	movf	ssp2_vLCDTest02@u8Idx^(0+128),w
  4066  0126  3C0F               	sublw	15
  4067  0127  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4068  0128  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  4069  0129  0020               	movlb	0	; select bank0
  4070  012A  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  4071  012B  3000               	movlw	0
  4072  012C  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4073                           
  4074                           ;TestMain.c: 718:             ST7032_vWriteCharSSP2(HEX_LIST[ST7032_u8GetCursorColNoSSP2
      +                          () & 0x0F]);
  4075  012F  318A  22B3  3180   	fcall	_ST7032_u8GetCursorColNoSSP2
  4076  0132  390F               	andlw	15
  4077  0133  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  4078  0134  0084               	movwf	4
  4079  0135  3087               	movlw	high (_HEX_LIST| (0+32768))
  4080  0136  1803               	skipnc
  4081  0137  3E01               	addlw	1
  4082  0138  0085               	movwf	5
  4083  0139  0800               	movf	0,w	;code access
  4084  013A  318B  2378  3180   	fcall	_ST7032_vWriteCharSSP2
  4085                           
  4086                           ;TestMain.c: 719:         } else {
  4087  013D  2941               	goto	l5906
  4088  013E                     l5904:	
  4089                           
  4090                           ;TestMain.c: 720:             ST7032_bCursorLeftSSP2();
  4091  013E  318A  2282  3180   	fcall	_ST7032_bCursorLeftSSP2
  4092  0141                     l5906:	
  4093                           
  4094                           ;TestMain.c: 723:         _delay((unsigned long)((500)*(16000000/4000.0)));
  4095  0141  300B               	movlw	11
  4096  0142  0021               	movlb	1	; select bank1
  4097  0143  00A5               	movwf	(??_ssp2_vLCDTest02^(0+128)+1)
  4098  0144  3026               	movlw	38
  4099  0145  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4100  0146  305D               	movlw	93
  4101  0147                     u4257:	
  4102  0147  0B89               	decfsz	9,f
  4103  0148  2947               	goto	u4257
  4104  0149  0BA4               	decfsz	??_ssp2_vLCDTest02^(0+128),f
  4105  014A  2947               	goto	u4257
  4106  014B  0BA5               	decfsz	(??_ssp2_vLCDTest02^(0+128)+1),f
  4107  014C  2947               	goto	u4257
  4108  014D  3200               	nop2
  4109                           
  4110                           ;TestMain.c: 724:     }
  4111  014E  3001               	movlw	1
  4112  014F  0021               	movlb	1	; select bank1
  4113  0150  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4114  0151  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  4115  0152  07A6               	addwf	ssp2_vLCDTest02@u8Idx^(0+128),f
  4116  0153  3010               	movlw	16
  4117  0154  0226               	subwf	ssp2_vLCDTest02@u8Idx^(0+128),w
  4118  0155  1C03               	skipc
  4119  0156  2923               	goto	l202
  4120                           
  4121                           ;TestMain.c: 729:     ST7032_vClearDispSSP2();
  4122  0157  318A  22E7  3180   	fcall	_ST7032_vClearDispSSP2
  4123                           
  4124                           ;TestMain.c: 731:     ST7032_bSetCursorSSP2(0, 0);
  4125  015A  0020               	movlb	0	; select bank0
  4126  015B  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  4127  015C  3000               	movlw	0
  4128  015D  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4129                           
  4130                           ;TestMain.c: 733:     ST7032_vWriteStringSSP2("Test:LCD 02 ");
  4131  0160  307D               	movlw	low (STR_20| (0+32768))
  4132  0161  0020               	movlb	0	; select bank0
  4133  0162  00D3               	movwf	ST7032_vWriteStringSSP2@pcStr
  4134  0163  3089               	movlw	high (STR_20| (0+32768))
  4135  0164  00D4               	movwf	ST7032_vWriteStringSSP2@pcStr+1
  4136  0165  318D  25CD  3180   	fcall	_ST7032_vWriteStringSSP2
  4137                           
  4138                           ;TestMain.c: 735:     ST7032_vDispSettingSSP2((1), (1), (0));
  4139  0168  0020               	movlb	0	; select bank0
  4140  0169  01AB               	clrf	ST7032_vDispSettingSSP2@bCursor
  4141  016A  0AAB               	incf	ST7032_vDispSettingSSP2@bCursor,f
  4142  016B  01AC               	clrf	ST7032_vDispSettingSSP2@bBlink
  4143  016C  3001               	movlw	1
  4144  016D  318B  2330  3180   	fcall	_ST7032_vDispSettingSSP2
  4145                           
  4146                           ;TestMain.c: 737:     ST7032_bSetCursorSSP2(1, 38);
  4147  0170  3026               	movlw	38
  4148  0171  0021               	movlb	1	; select bank1
  4149  0172  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4150  0173  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  4151  0174  0020               	movlb	0	; select bank0
  4152  0175  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  4153  0176  3001               	movlw	1
  4154  0177  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4155                           
  4156                           ;TestMain.c: 738:     if (ST7032_bCursorRightSSP2() == (1)) {
  4157  017A  318A  228D  3180   	fcall	_ST7032_bCursorRightSSP2
  4158  017D  3A01               	xorlw	1
  4159  017E  1D03               	skipz
  4160  017F  298E               	goto	l5924
  4161                           
  4162                           ;TestMain.c: 739:         ST7032_bSetCursorSSP2(0, 12);
  4163  0180  300C               	movlw	12
  4164  0181  0021               	movlb	1	; select bank1
  4165  0182  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4166  0183  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  4167  0184  0020               	movlb	0	; select bank0
  4168  0185  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  4169  0186  3000               	movlw	0
  4170  0187  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4171                           
  4172                           ;TestMain.c: 740:         ST7032_vWriteCharSSP2('A');
  4173  018A  3041               	movlw	65
  4174  018B  318B  2378  3180   	fcall	_ST7032_vWriteCharSSP2
  4175  018E                     l5924:	
  4176                           
  4177                           ;TestMain.c: 743:     _delay((unsigned long)((1000)*(16000000/4000.0)));
  4178  018E  3015               	movlw	21
  4179  018F  0021               	movlb	1	; select bank1
  4180  0190  00A5               	movwf	(??_ssp2_vLCDTest02^(0+128)+1)
  4181  0191  304B               	movlw	75
  4182  0192  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4183  0193  30BE               	movlw	190
  4184  0194                     u4267:	
  4185  0194  0B89               	decfsz	9,f
  4186  0195  2994               	goto	u4267
  4187  0196  0BA4               	decfsz	??_ssp2_vLCDTest02^(0+128),f
  4188  0197  2994               	goto	u4267
  4189  0198  0BA5               	decfsz	(??_ssp2_vLCDTest02^(0+128)+1),f
  4190  0199  2994               	goto	u4267
  4191  019A  0000               	nop
  4192                           
  4193                           ;TestMain.c: 744:     ST7032_bSetCursorSSP2(1, 39);
  4194  019B  3027               	movlw	39
  4195  019C  0021               	movlb	1	; select bank1
  4196  019D  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4197  019E  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  4198  019F  0020               	movlb	0	; select bank0
  4199  01A0  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  4200  01A1  3001               	movlw	1
  4201  01A2  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4202                           
  4203                           ;TestMain.c: 745:     if (ST7032_bCursorRightSSP2() == (0)) {
  4204  01A5  318A  228D  3180   	fcall	_ST7032_bCursorRightSSP2
  4205  01A8  3A00               	xorlw	0
  4206  01A9  1D03               	skipz
  4207  01AA  29B9               	goto	l5932
  4208                           
  4209                           ;TestMain.c: 746:         ST7032_bSetCursorSSP2(0, 13);
  4210  01AB  300D               	movlw	13
  4211  01AC  0021               	movlb	1	; select bank1
  4212  01AD  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4213  01AE  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  4214  01AF  0020               	movlb	0	; select bank0
  4215  01B0  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  4216  01B1  3000               	movlw	0
  4217  01B2  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4218                           
  4219                           ;TestMain.c: 747:         ST7032_vWriteCharSSP2('B');
  4220  01B5  3042               	movlw	66
  4221  01B6  318B  2378  3180   	fcall	_ST7032_vWriteCharSSP2
  4222  01B9                     l5932:	
  4223                           
  4224                           ;TestMain.c: 750:     _delay((unsigned long)((1000)*(16000000/4000.0)));
  4225  01B9  3015               	movlw	21
  4226  01BA  0021               	movlb	1	; select bank1
  4227  01BB  00A5               	movwf	(??_ssp2_vLCDTest02^(0+128)+1)
  4228  01BC  304B               	movlw	75
  4229  01BD  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4230  01BE  30BE               	movlw	190
  4231  01BF                     u4277:	
  4232  01BF  0B89               	decfsz	9,f
  4233  01C0  29BF               	goto	u4277
  4234  01C1  0BA4               	decfsz	??_ssp2_vLCDTest02^(0+128),f
  4235  01C2  29BF               	goto	u4277
  4236  01C3  0BA5               	decfsz	(??_ssp2_vLCDTest02^(0+128)+1),f
  4237  01C4  29BF               	goto	u4277
  4238  01C5  0000               	nop
  4239                           
  4240                           ;TestMain.c: 751:     ST7032_bSetCursorSSP2(0, 1);
  4241  01C6  0020               	movlb	0	; select bank0
  4242  01C7  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  4243  01C8  0ADD               	incf	ST7032_bSetCursorSSP2@u8ColNo,f
  4244  01C9  3000               	movlw	0
  4245  01CA  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4246                           
  4247                           ;TestMain.c: 752:     if (ST7032_bCursorLeftSSP2() == (1)) {
  4248  01CD  318A  2282  3180   	fcall	_ST7032_bCursorLeftSSP2
  4249  01D0  3A01               	xorlw	1
  4250  01D1  1D03               	skipz
  4251  01D2  29E1               	goto	l5940
  4252                           
  4253                           ;TestMain.c: 753:         ST7032_bSetCursorSSP2(0, 14);
  4254  01D3  300E               	movlw	14
  4255  01D4  0021               	movlb	1	; select bank1
  4256  01D5  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4257  01D6  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  4258  01D7  0020               	movlb	0	; select bank0
  4259  01D8  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  4260  01D9  3000               	movlw	0
  4261  01DA  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4262                           
  4263                           ;TestMain.c: 754:         ST7032_vWriteCharSSP2('C');
  4264  01DD  3043               	movlw	67
  4265  01DE  318B  2378  3180   	fcall	_ST7032_vWriteCharSSP2
  4266  01E1                     l5940:	
  4267                           
  4268                           ;TestMain.c: 757:     _delay((unsigned long)((1000)*(16000000/4000.0)));
  4269  01E1  3015               	movlw	21
  4270  01E2  0021               	movlb	1	; select bank1
  4271  01E3  00A5               	movwf	(??_ssp2_vLCDTest02^(0+128)+1)
  4272  01E4  304B               	movlw	75
  4273  01E5  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4274  01E6  30BE               	movlw	190
  4275  01E7                     u4287:	
  4276  01E7  0B89               	decfsz	9,f
  4277  01E8  29E7               	goto	u4287
  4278  01E9  0BA4               	decfsz	??_ssp2_vLCDTest02^(0+128),f
  4279  01EA  29E7               	goto	u4287
  4280  01EB  0BA5               	decfsz	(??_ssp2_vLCDTest02^(0+128)+1),f
  4281  01EC  29E7               	goto	u4287
  4282  01ED  0000               	nop
  4283                           
  4284                           ;TestMain.c: 758:     ST7032_bSetCursorSSP2(0, 0);
  4285  01EE  0020               	movlb	0	; select bank0
  4286  01EF  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  4287  01F0  3000               	movlw	0
  4288  01F1  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4289                           
  4290                           ;TestMain.c: 759:     if (ST7032_bCursorLeftSSP2() == (0)) {
  4291  01F4  318A  2282  3180   	fcall	_ST7032_bCursorLeftSSP2
  4292  01F7  3A00               	xorlw	0
  4293  01F8  1D03               	skipz
  4294  01F9  2A08               	goto	l5948
  4295                           
  4296                           ;TestMain.c: 760:         ST7032_bSetCursorSSP2(0, 15);
  4297  01FA  300F               	movlw	15
  4298  01FB  0021               	movlb	1	; select bank1
  4299  01FC  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4300  01FD  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  4301  01FE  0020               	movlb	0	; select bank0
  4302  01FF  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  4303  0200  3000               	movlw	0
  4304  0201  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4305                           
  4306                           ;TestMain.c: 761:         ST7032_vWriteCharSSP2('D');
  4307  0204  3044               	movlw	68
  4308  0205  318B  2378  3180   	fcall	_ST7032_vWriteCharSSP2
  4309  0208                     l5948:	
  4310                           
  4311                           ;TestMain.c: 764:     _delay((unsigned long)((1000)*(16000000/4000.0)));
  4312  0208  3015               	movlw	21
  4313  0209  0021               	movlb	1	; select bank1
  4314  020A  00A5               	movwf	(??_ssp2_vLCDTest02^(0+128)+1)
  4315  020B  304B               	movlw	75
  4316  020C  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4317  020D  30BE               	movlw	190
  4318  020E                     u4297:	
  4319  020E  0B89               	decfsz	9,f
  4320  020F  2A0E               	goto	u4297
  4321  0210  0BA4               	decfsz	??_ssp2_vLCDTest02^(0+128),f
  4322  0211  2A0E               	goto	u4297
  4323  0212  0BA5               	decfsz	(??_ssp2_vLCDTest02^(0+128)+1),f
  4324  0213  2A0E               	goto	u4297
  4325  0214  0000               	nop
  4326                           
  4327                           ;TestMain.c: 765:     if (ST7032_bSetCursorSSP2(1, 39) == (1)) {
  4328  0215  3027               	movlw	39
  4329  0216  0021               	movlb	1	; select bank1
  4330  0217  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4331  0218  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  4332  0219  0020               	movlb	0	; select bank0
  4333  021A  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  4334  021B  3001               	movlw	1
  4335  021C  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4336  021F  3A01               	xorlw	1
  4337  0220  1D03               	skipz
  4338  0221  2A2C               	goto	l5954
  4339                           
  4340                           ;TestMain.c: 766:         ST7032_bSetCursorSSP2(1, 0);
  4341  0222  0020               	movlb	0	; select bank0
  4342  0223  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  4343  0224  3001               	movlw	1
  4344  0225  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4345                           
  4346                           ;TestMain.c: 767:         ST7032_vWriteCharSSP2('E');
  4347  0228  3045               	movlw	69
  4348  0229  318B  2378  3180   	fcall	_ST7032_vWriteCharSSP2
  4349  022C                     l5954:	
  4350                           
  4351                           ;TestMain.c: 770:     _delay((unsigned long)((1000)*(16000000/4000.0)));
  4352  022C  3015               	movlw	21
  4353  022D  0021               	movlb	1	; select bank1
  4354  022E  00A5               	movwf	(??_ssp2_vLCDTest02^(0+128)+1)
  4355  022F  304B               	movlw	75
  4356  0230  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4357  0231  30BE               	movlw	190
  4358  0232                     u4307:	
  4359  0232  0B89               	decfsz	9,f
  4360  0233  2A32               	goto	u4307
  4361  0234  0BA4               	decfsz	??_ssp2_vLCDTest02^(0+128),f
  4362  0235  2A32               	goto	u4307
  4363  0236  0BA5               	decfsz	(??_ssp2_vLCDTest02^(0+128)+1),f
  4364  0237  2A32               	goto	u4307
  4365  0238  0000               	nop
  4366                           
  4367                           ;TestMain.c: 771:     if (ST7032_bSetCursorSSP2(1, 40) == (0)) {
  4368  0239  3028               	movlw	40
  4369  023A  0021               	movlb	1	; select bank1
  4370  023B  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4371  023C  0824               	movf	??_ssp2_vLCDTest02^(0+128),w
  4372  023D  0020               	movlb	0	; select bank0
  4373  023E  00DD               	movwf	ST7032_bSetCursorSSP2@u8ColNo
  4374  023F  3001               	movlw	1
  4375  0240  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4376  0243  3A00               	xorlw	0
  4377  0244  1D03               	skipz
  4378  0245  2A51               	goto	l5960
  4379                           
  4380                           ;TestMain.c: 772:         ST7032_bSetCursorSSP2(1, 1);
  4381  0246  0020               	movlb	0	; select bank0
  4382  0247  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  4383  0248  0ADD               	incf	ST7032_bSetCursorSSP2@u8ColNo,f
  4384  0249  3001               	movlw	1
  4385  024A  318B  23C9  3180   	fcall	_ST7032_bSetCursorSSP2
  4386                           
  4387                           ;TestMain.c: 773:         ST7032_vWriteCharSSP2('F');
  4388  024D  3046               	movlw	70
  4389  024E  318B  2378  3180   	fcall	_ST7032_vWriteCharSSP2
  4390  0251                     l5960:	
  4391                           
  4392                           ;TestMain.c: 776:     _delay((unsigned long)((1000)*(16000000/4000.0)));
  4393  0251  3015               	movlw	21
  4394  0252  0021               	movlb	1	; select bank1
  4395  0253  00A5               	movwf	(??_ssp2_vLCDTest02^(0+128)+1)
  4396  0254  304B               	movlw	75
  4397  0255  00A4               	movwf	??_ssp2_vLCDTest02^(0+128)
  4398  0256  30BE               	movlw	190
  4399  0257                     u4317:	
  4400  0257  0B89               	decfsz	9,f
  4401  0258  2A57               	goto	u4317
  4402  0259  0BA4               	decfsz	??_ssp2_vLCDTest02^(0+128),f
  4403  025A  2A57               	goto	u4317
  4404  025B  0BA5               	decfsz	(??_ssp2_vLCDTest02^(0+128)+1),f
  4405  025C  2A57               	goto	u4317
  4406  025D  0000               	nop
  4407  025E  0008               	return
  4408  025F                     __end_of_ssp2_vLCDTest02:	
  4409                           
  4410                           	psect	text7
  4411  0B30                     __ptext7:	
  4412 ;; *************** function _ST7032_vDispSettingSSP2 *****************
  4413 ;; Defined at:
  4414 ;;		line 554 in file "st7032.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  bDisp           1    wreg     unsigned char 
  4417 ;;  bCursor         1   11[BANK0 ] unsigned char 
  4418 ;;  bBlink          1   12[BANK0 ] unsigned char 
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;  bDisp           1   15[BANK0 ] unsigned char 
  4421 ;; Return value:  Size  Location     Type
  4422 ;;                  1    wreg      void 
  4423 ;; Registers used:
  4424 ;;		wreg, status,2, status,0, pclath, cstack
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4430 ;;      Params:         0       2       0       0       0       0
  4431 ;;      Locals:         0       1       0       0       0       0
  4432 ;;      Temps:          0       2       0       0       0       0
  4433 ;;      Totals:         0       5       0       0       0       0
  4434 ;;Total ram usage:        5 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    8
  4437 ;; This function calls:
  4438 ;;		_I2C_u8MstStartSSP2
  4439 ;;		_vExecCmdEndSSP2
  4440 ;; This function is called by:
  4441 ;;		_ssp2_vLCDTest02
  4442 ;;		_ssp2_vLCDTest03
  4443 ;;		_ssp2_vLCDTest04
  4444 ;;		_ssp2_vI2CTest01
  4445 ;;		_ssp2_vI2CTest02
  4446 ;;		_ssp2_vI2CTest03
  4447 ;;		_ssp2_vI2CTest04
  4448 ;;		_ssp2_vKeypadTest01
  4449 ;;		_ssp2_vKeypadTest02
  4450 ;;		_ssp2_vKeypadTest03
  4451 ;;		_ssp2_vKeypadTest04
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           
  4456                           ;psect for function _ST7032_vDispSettingSSP2
  4457  0B30                     _ST7032_vDispSettingSSP2:	
  4458                           
  4459                           ;incstack = 0
  4460                           ; Regs used in _ST7032_vDispSettingSSP2: [wreg+status,2+status,0+pclath+cstack]
  4461                           ;ST7032_vDispSettingSSP2@bDisp stored from wreg
  4462  0B30  0020               	movlb	0	; select bank0
  4463  0B31  00AF               	movwf	ST7032_vDispSettingSSP2@bDisp
  4464                           
  4465                           ;st7032.c: 556:     I2C_u8MstStartSSP2((0x3E), (0));
  4466  0B32  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  4467  0B33  303E               	movlw	62
  4468  0B34  318B  2313  318B   	fcall	_I2C_u8MstStartSSP2
  4469                           
  4470                           ;st7032.c: 558:     vExecCmdEndSSP2((0b00001000) | (bDisp << 2) | (bCursor << 1) | bBlin
      +                          k);
  4471  0B37  0020               	movlb	0	; select bank0
  4472  0B38  082B               	movf	ST7032_vDispSettingSSP2@bCursor,w
  4473  0B39  00AD               	movwf	??_ST7032_vDispSettingSSP2
  4474  0B3A  3001               	movlw	1
  4475  0B3B                     u3315:	
  4476  0B3B  35AD               	lslf	??_ST7032_vDispSettingSSP2,f
  4477  0B3C  0B89               	decfsz	9,f
  4478  0B3D  2B3B               	goto	u3315
  4479  0B3E  082F               	movf	ST7032_vDispSettingSSP2@bDisp,w
  4480  0B3F  00AE               	movwf	??_ST7032_vDispSettingSSP2+1
  4481  0B40  3001               	movlw	1
  4482  0B41                     u3325:	
  4483  0B41  35AE               	lslf	??_ST7032_vDispSettingSSP2+1,f
  4484  0B42  3EFF               	addlw	-1
  4485  0B43  1D03               	skipz
  4486  0B44  2B41               	goto	u3325
  4487  0B45  352E               	lslf	??_ST7032_vDispSettingSSP2+1,w
  4488  0B46  042D               	iorwf	??_ST7032_vDispSettingSSP2,w
  4489  0B47  042C               	iorwf	ST7032_vDispSettingSSP2@bBlink,w
  4490  0B48  3808               	iorlw	8
  4491  0B49  318A  22A5  318B   	fcall	_vExecCmdEndSSP2
  4492                           
  4493                           ;st7032.c: 559:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  4494  0B4C  3022               	movlw	34
  4495  0B4D                     u4327:	
  4496  0B4D  0B89               	decfsz	9,f
  4497  0B4E  2B4D               	goto	u4327
  4498  0B4F  3200               	nop2
  4499  0B50  0008               	return
  4500  0B51                     __end_of_ST7032_vDispSettingSSP2:	
  4501                           
  4502                           	psect	text8
  4503  0AC4                     __ptext8:	
  4504 ;; *************** function _ST7032_u8GetCursorRowNoSSP2 *****************
  4505 ;; Defined at:
  4506 ;;		line 598 in file "st7032.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;		None
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;		None
  4511 ;; Return value:  Size  Location     Type
  4512 ;;                  1    wreg      unsigned char 
  4513 ;; Registers used:
  4514 ;;		wreg, status,2, status,0, pclath, cstack
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4520 ;;      Params:         0       0       0       0       0       0
  4521 ;;      Locals:         0       0       0       0       0       0
  4522 ;;      Temps:          0       2       0       0       0       0
  4523 ;;      Totals:         0       2       0       0       0       0
  4524 ;;Total ram usage:        2 bytes
  4525 ;; Hardware stack levels used:    1
  4526 ;; Hardware stack levels required when called:    6
  4527 ;; This function calls:
  4528 ;;		___awdiv
  4529 ;; This function is called by:
  4530 ;;		_ssp2_vLCDTest02
  4531 ;; This function uses a non-reentrant model
  4532 ;;
  4533                           
  4534                           
  4535                           ;psect for function _ST7032_u8GetCursorRowNoSSP2
  4536  0AC4                     _ST7032_u8GetCursorRowNoSSP2:	
  4537                           
  4538                           ;st7032.c: 599:     return stStateSSP2.u8CursorPos / 40;
  4539                           
  4540                           ;incstack = 0
  4541                           ; Regs used in _ST7032_u8GetCursorRowNoSSP2: [wreg+status,2+status,0+pclath+cstack]
  4542  0AC4  3028               	movlw	40
  4543  0AC5  0020               	movlb	0	; select bank0
  4544  0AC6  00A9               	movwf	___awdiv@divisor
  4545  0AC7  3000               	movlw	0
  4546  0AC8  00AA               	movwf	___awdiv@divisor+1
  4547  0AC9  085E               	movf	_stStateSSP2,w
  4548  0ACA  00B2               	movwf	??_ST7032_u8GetCursorRowNoSSP2
  4549  0ACB  01B3               	clrf	??_ST7032_u8GetCursorRowNoSSP2+1
  4550  0ACC  0832               	movf	??_ST7032_u8GetCursorRowNoSSP2,w
  4551  0ACD  00AB               	movwf	___awdiv@dividend
  4552  0ACE  0833               	movf	??_ST7032_u8GetCursorRowNoSSP2+1,w
  4553  0ACF  00AC               	movwf	___awdiv@dividend+1
  4554  0AD0  318E  26EF         	fcall	___awdiv
  4555  0AD2  0020               	movlb	0	; select bank0
  4556  0AD3  0829               	movf	?___awdiv,w
  4557  0AD4  0008               	return
  4558  0AD5                     __end_of_ST7032_u8GetCursorRowNoSSP2:	
  4559                           
  4560                           	psect	text9
  4561  0AB3                     __ptext9:	
  4562 ;; *************** function _ST7032_u8GetCursorColNoSSP2 *****************
  4563 ;; Defined at:
  4564 ;;		line 638 in file "st7032.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;		None
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;		None
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      unsigned char 
  4571 ;; Registers used:
  4572 ;;		wreg, status,2, status,0, pclath, cstack
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4578 ;;      Params:         0       0       0       0       0       0
  4579 ;;      Locals:         0       0       0       0       0       0
  4580 ;;      Temps:          0       2       0       0       0       0
  4581 ;;      Totals:         0       2       0       0       0       0
  4582 ;;Total ram usage:        2 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    6
  4585 ;; This function calls:
  4586 ;;		___awmod
  4587 ;; This function is called by:
  4588 ;;		_ssp2_vLCDTest02
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           
  4593                           ;psect for function _ST7032_u8GetCursorColNoSSP2
  4594  0AB3                     _ST7032_u8GetCursorColNoSSP2:	
  4595                           
  4596                           ;st7032.c: 639:     return stStateSSP2.u8CursorPos % 40;
  4597                           
  4598                           ;incstack = 0
  4599                           ; Regs used in _ST7032_u8GetCursorColNoSSP2: [wreg+status,2+status,0+pclath+cstack]
  4600  0AB3  3028               	movlw	40
  4601  0AB4  0020               	movlb	0	; select bank0
  4602  0AB5  00CC               	movwf	___awmod@divisor
  4603  0AB6  3000               	movlw	0
  4604  0AB7  00CD               	movwf	___awmod@divisor+1
  4605  0AB8  085E               	movf	_stStateSSP2,w
  4606  0AB9  00D3               	movwf	??_ST7032_u8GetCursorColNoSSP2
  4607  0ABA  01D4               	clrf	??_ST7032_u8GetCursorColNoSSP2+1
  4608  0ABB  0853               	movf	??_ST7032_u8GetCursorColNoSSP2,w
  4609  0ABC  00CE               	movwf	___awmod@dividend
  4610  0ABD  0854               	movf	??_ST7032_u8GetCursorColNoSSP2+1,w
  4611  0ABE  00CF               	movwf	___awmod@dividend+1
  4612  0ABF  318D  2541         	fcall	___awmod
  4613  0AC1  0020               	movlb	0	; select bank0
  4614  0AC2  084C               	movf	?___awmod,w
  4615  0AC3  0008               	return
  4616  0AC4                     __end_of_ST7032_u8GetCursorColNoSSP2:	
  4617                           
  4618                           	psect	text10
  4619  0A8D                     __ptext10:	
  4620 ;; *************** function _ST7032_bCursorRightSSP2 *****************
  4621 ;; Defined at:
  4622 ;;		line 795 in file "st7032.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;		None
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;		None
  4627 ;; Return value:  Size  Location     Type
  4628 ;;                  1    wreg      unsigned char 
  4629 ;; Registers used:
  4630 ;;		wreg, status,2, status,0, pclath, cstack
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4636 ;;      Params:         0       0       0       0       0       0
  4637 ;;      Locals:         0       0       0       0       0       0
  4638 ;;      Temps:          0       0       0       0       0       0
  4639 ;;      Totals:         0       0       0       0       0       0
  4640 ;;Total ram usage:        0 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    9
  4643 ;; This function calls:
  4644 ;;		_bSetCursorSSP2
  4645 ;; This function is called by:
  4646 ;;		_ssp2_vLCDTest02
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           
  4651                           ;psect for function _ST7032_bCursorRightSSP2
  4652  0A8D                     _ST7032_bCursorRightSSP2:	
  4653                           
  4654                           ;st7032.c: 797:     if (stStateSSP2.u8CursorPos >= 79) {
  4655                           
  4656                           ;incstack = 0
  4657                           ; Regs used in _ST7032_bCursorRightSSP2: [wreg+status,2+status,0+pclath+cstack]
  4658  0A8D  304F               	movlw	79
  4659  0A8E  0020               	movlb	0	; select bank0
  4660  0A8F  025E               	subwf	_stStateSSP2,w
  4661  0A90  1C03               	skipc
  4662  0A91  2A94               	goto	l5648
  4663                           
  4664                           ;st7032.c: 798:         return (0);
  4665  0A92  3000               	movlw	0
  4666  0A93  0008               	return
  4667  0A94                     l5648:	
  4668                           
  4669                           ;st7032.c: 800:     return bSetCursorSSP2(stStateSSP2.u8CursorPos + 1);
  4670  0A94  085E               	movf	_stStateSSP2,w
  4671  0A95  3E01               	addlw	1
  4672  0A96  318D  2587         	fcall	_bSetCursorSSP2
  4673  0A98  0008               	return
  4674  0A99                     __end_of_ST7032_bCursorRightSSP2:	
  4675                           
  4676                           	psect	text11
  4677  0A82                     __ptext11:	
  4678 ;; *************** function _ST7032_bCursorLeftSSP2 *****************
  4679 ;; Defined at:
  4680 ;;		line 747 in file "st7032.c"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;		None
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;		None
  4685 ;; Return value:  Size  Location     Type
  4686 ;;                  1    wreg      unsigned char 
  4687 ;; Registers used:
  4688 ;;		wreg, status,2, status,0, pclath, cstack
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4694 ;;      Params:         0       0       0       0       0       0
  4695 ;;      Locals:         0       0       0       0       0       0
  4696 ;;      Temps:          0       0       0       0       0       0
  4697 ;;      Totals:         0       0       0       0       0       0
  4698 ;;Total ram usage:        0 bytes
  4699 ;; Hardware stack levels used:    1
  4700 ;; Hardware stack levels required when called:    9
  4701 ;; This function calls:
  4702 ;;		_bSetCursorSSP2
  4703 ;; This function is called by:
  4704 ;;		_ssp2_vLCDTest02
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           
  4709                           ;psect for function _ST7032_bCursorLeftSSP2
  4710  0A82                     _ST7032_bCursorLeftSSP2:	
  4711                           
  4712                           ;st7032.c: 749:     if (stStateSSP2.u8CursorPos == 0) {
  4713                           
  4714                           ;incstack = 0
  4715                           ; Regs used in _ST7032_bCursorLeftSSP2: [wreg+status,2+status,0+pclath+cstack]
  4716  0A82  0020               	movlb	0	; select bank0
  4717  0A83  085E               	movf	_stStateSSP2,w
  4718  0A84  1D03               	btfss	3,2
  4719  0A85  2A88               	goto	l5658
  4720                           
  4721                           ;st7032.c: 750:         return (0);
  4722  0A86  3000               	movlw	0
  4723  0A87  0008               	return
  4724  0A88                     l5658:	
  4725                           
  4726                           ;st7032.c: 752:     return bSetCursorSSP2(stStateSSP2.u8CursorPos - 1);
  4727  0A88  085E               	movf	_stStateSSP2,w
  4728  0A89  3EFF               	addlw	255
  4729  0A8A  318D  2587         	fcall	_bSetCursorSSP2
  4730  0A8C  0008               	return
  4731  0A8D                     __end_of_ST7032_bCursorLeftSSP2:	
  4732                           
  4733                           	psect	text12
  4734  0404                     __ptext12:	
  4735 ;; *************** function _ssp2_vLCDTest01 *****************
  4736 ;; Defined at:
  4737 ;;		line 591 in file "TestMain.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;		None
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  val             1    7[BANK1 ] unsigned char 
  4742 ;;  u8Idx           1    6[BANK1 ] unsigned char 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      void 
  4745 ;; Registers used:
  4746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4752 ;;      Params:         0       0       0       0       0       0
  4753 ;;      Locals:         0       0       2       0       0       0
  4754 ;;      Temps:          0       0       2       0       0       0
  4755 ;;      Totals:         0       0       4       0       0       0
  4756 ;;Total ram usage:        4 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:   10
  4759 ;; This function calls:
  4760 ;;		_ST7032_bSetCursorSSP2
  4761 ;;		_ST7032_vClearDispSSP2
  4762 ;;		_ST7032_vWriteCharSSP2
  4763 ;;		_ST7032_vWriteDataSSP2
  4764 ;;		_ST7032_vWriteStringSSP2
  4765 ;;		___awmod
  4766 ;;		_rand
  4767 ;; This function is called by:
  4768 ;;		_main
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           
  4773                           ;psect for function _ssp2_vLCDTest01
  4774  0404                     _ssp2_vLCDTest01:	
  4775                           
  4776                           ;TestMain.c: 596:     ST7032_vClearDispSSP2();
  4777                           
  4778                           ;incstack = 0
  4779                           ; Regs used in _ssp2_vLCDTest01: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4780  0404  318A  22E7  3184   	fcall	_ST7032_vClearDispSSP2
  4781                           
  4782                           ;TestMain.c: 598:     ST7032_bSetCursorSSP2(0, 0);
  4783  0407  0020               	movlb	0	; select bank0
  4784  0408  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  4785  0409  3000               	movlw	0
  4786  040A  318B  23C9  3184   	fcall	_ST7032_bSetCursorSSP2
  4787                           
  4788                           ;TestMain.c: 600:     unsigned char val = (unsigned char)(rand() % 0xFF);
  4789  040D  30FF               	movlw	255
  4790  040E  0020               	movlb	0	; select bank0
  4791  040F  00CC               	movwf	___awmod@divisor
  4792  0410  3000               	movlw	0
  4793  0411  00CD               	movwf	___awmod@divisor+1
  4794  0412  3185  25BF  3184   	fcall	_rand
  4795  0415  0020               	movlb	0	; select bank0
  4796  0416  0843               	movf	?_rand+1,w
  4797  0417  00CF               	movwf	___awmod@dividend+1
  4798  0418  0842               	movf	?_rand,w
  4799  0419  00CE               	movwf	___awmod@dividend
  4800  041A  318D  2541  3184   	fcall	___awmod
  4801  041D  0020               	movlb	0	; select bank0
  4802  041E  084C               	movf	?___awmod,w
  4803  041F  0021               	movlb	1	; select bank1
  4804  0420  00A4               	movwf	??_ssp2_vLCDTest01^(0+128)
  4805  0421  0824               	movf	??_ssp2_vLCDTest01^(0+128),w
  4806  0422  00A7               	movwf	ssp2_vLCDTest01@val^(0+128)
  4807                           
  4808                           ;TestMain.c: 601:     ST7032_vWriteStringSSP2("Test:LCD 01 0x");
  4809  0423  306E               	movlw	low (STR_16| (0+32768))
  4810  0424  0020               	movlb	0	; select bank0
  4811  0425  00D3               	movwf	ST7032_vWriteStringSSP2@pcStr
  4812  0426  3089               	movlw	high (STR_16| (0+32768))
  4813  0427  00D4               	movwf	ST7032_vWriteStringSSP2@pcStr+1
  4814  0428  318D  25CD  3184   	fcall	_ST7032_vWriteStringSSP2
  4815                           
  4816                           ;TestMain.c: 602:     ST7032_vWriteCharSSP2(HEX_LIST[val >> 4 & 0x0F]);
  4817  042B  0021               	movlb	1	; select bank1
  4818  042C  0827               	movf	ssp2_vLCDTest01@val^(0+128),w
  4819  042D  00A4               	movwf	??_ssp2_vLCDTest01^(0+128)
  4820  042E  3004               	movlw	4
  4821  042F                     u3455:	
  4822  042F  36A4               	lsrf	??_ssp2_vLCDTest01^(0+128),f
  4823  0430  0B89               	decfsz	9,f
  4824  0431  2C2F               	goto	u3455
  4825  0432  0824               	movf	??_ssp2_vLCDTest01^(0+128),w
  4826  0433  390F               	andlw	15
  4827  0434  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  4828  0435  0084               	movwf	4
  4829  0436  3087               	movlw	high (_HEX_LIST| (0+32768))
  4830  0437  1803               	skipnc
  4831  0438  3E01               	addlw	1
  4832  0439  0085               	movwf	5
  4833  043A  0800               	movf	0,w	;code access
  4834  043B  318B  2378  3184   	fcall	_ST7032_vWriteCharSSP2
  4835                           
  4836                           ;TestMain.c: 603:     ST7032_vWriteCharSSP2(HEX_LIST[val & 0x0F & 0x0F]);
  4837  043E  0021               	movlb	1	; select bank1
  4838  043F  0827               	movf	ssp2_vLCDTest01@val^(0+128),w
  4839  0440  390F               	andlw	15
  4840  0441  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  4841  0442  0084               	movwf	4
  4842  0443  3087               	movlw	high (_HEX_LIST| (0+32768))
  4843  0444  1803               	skipnc
  4844  0445  3E01               	addlw	1
  4845  0446  0085               	movwf	5
  4846  0447  0800               	movf	0,w	;code access
  4847  0448  318B  2378  3184   	fcall	_ST7032_vWriteCharSSP2
  4848                           
  4849                           ;TestMain.c: 605:     ST7032_bSetCursorSSP2(1, 0);
  4850  044B  0020               	movlb	0	; select bank0
  4851  044C  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  4852  044D  3001               	movlw	1
  4853  044E  318B  23C9  3184   	fcall	_ST7032_bSetCursorSSP2
  4854                           
  4855                           ;TestMain.c: 607:     unsigned char u8Idx;;TestMain.c: 608:     for (u8Idx = 0; u8Idx <1
      +                          6; u8Idx++) {
  4856  0451  0021               	movlb	1	; select bank1
  4857  0452  01A6               	clrf	ssp2_vLCDTest01@u8Idx^(0+128)
  4858  0453                     l5794:	
  4859                           
  4860                           ;TestMain.c: 610:         ST7032_vWriteCharSSP2(val);
  4861  0453  0827               	movf	ssp2_vLCDTest01@val^(0+128),w
  4862  0454  318B  2378  3184   	fcall	_ST7032_vWriteCharSSP2
  4863                           
  4864                           ;TestMain.c: 611:         val = (val + 1) % 0xFF;
  4865  0457  30FF               	movlw	255
  4866  0458  0020               	movlb	0	; select bank0
  4867  0459  00CC               	movwf	___awmod@divisor
  4868  045A  3000               	movlw	0
  4869  045B  00CD               	movwf	___awmod@divisor+1
  4870  045C  0021               	movlb	1	; select bank1
  4871  045D  0827               	movf	ssp2_vLCDTest01@val^(0+128),w
  4872  045E  3E01               	addlw	1
  4873  045F  0020               	movlb	0	; select bank0
  4874  0460  00CE               	movwf	___awmod@dividend
  4875  0461  3000               	movlw	0
  4876  0462  1803               	skipnc
  4877  0463  3001               	movlw	1
  4878  0464  00CF               	movwf	___awmod@dividend+1
  4879  0465  318D  2541  3184   	fcall	___awmod
  4880  0468  0020               	movlb	0	; select bank0
  4881  0469  084C               	movf	?___awmod,w
  4882  046A  0021               	movlb	1	; select bank1
  4883  046B  00A4               	movwf	??_ssp2_vLCDTest01^(0+128)
  4884  046C  0824               	movf	??_ssp2_vLCDTest01^(0+128),w
  4885  046D  00A7               	movwf	ssp2_vLCDTest01@val^(0+128)
  4886                           
  4887                           ;TestMain.c: 613:         _delay((unsigned long)((500)*(16000000/4000.0)));
  4888  046E  300B               	movlw	11
  4889  046F  0021               	movlb	1	; select bank1
  4890  0470  00A5               	movwf	(??_ssp2_vLCDTest01^(0+128)+1)
  4891  0471  3026               	movlw	38
  4892  0472  00A4               	movwf	??_ssp2_vLCDTest01^(0+128)
  4893  0473  305D               	movlw	93
  4894  0474                     u4337:	
  4895  0474  0B89               	decfsz	9,f
  4896  0475  2C74               	goto	u4337
  4897  0476  0BA4               	decfsz	??_ssp2_vLCDTest01^(0+128),f
  4898  0477  2C74               	goto	u4337
  4899  0478  0BA5               	decfsz	(??_ssp2_vLCDTest01^(0+128)+1),f
  4900  0479  2C74               	goto	u4337
  4901  047A  3200               	nop2
  4902                           
  4903                           ;TestMain.c: 614:     }
  4904  047B  3001               	movlw	1
  4905  047C  0021               	movlb	1	; select bank1
  4906  047D  00A4               	movwf	??_ssp2_vLCDTest01^(0+128)
  4907  047E  0824               	movf	??_ssp2_vLCDTest01^(0+128),w
  4908  047F  07A6               	addwf	ssp2_vLCDTest01@u8Idx^(0+128),f
  4909  0480  3010               	movlw	16
  4910  0481  0226               	subwf	ssp2_vLCDTest01@u8Idx^(0+128),w
  4911  0482  1C03               	skipc
  4912  0483  2C53               	goto	l5794
  4913                           
  4914                           ;TestMain.c: 619:     ST7032_vClearDispSSP2();
  4915  0484  318A  22E7  3184   	fcall	_ST7032_vClearDispSSP2
  4916                           
  4917                           ;TestMain.c: 621:     ST7032_bSetCursorSSP2(1, 0);
  4918  0487  0020               	movlb	0	; select bank0
  4919  0488  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  4920  0489  3001               	movlw	1
  4921  048A  318B  23C9  3184   	fcall	_ST7032_bSetCursorSSP2
  4922                           
  4923                           ;TestMain.c: 623:     ST7032_vWriteStringSSP2("Test:LCD 01 0x");
  4924  048D  306E               	movlw	low (STR_16| (0+32768))
  4925  048E  0020               	movlb	0	; select bank0
  4926  048F  00D3               	movwf	ST7032_vWriteStringSSP2@pcStr
  4927  0490  3089               	movlw	high (STR_16| (0+32768))
  4928  0491  00D4               	movwf	ST7032_vWriteStringSSP2@pcStr+1
  4929  0492  318D  25CD  3184   	fcall	_ST7032_vWriteStringSSP2
  4930                           
  4931                           ;TestMain.c: 624:     ST7032_vWriteCharSSP2(HEX_LIST[val >> 4 & 0x0F]);
  4932  0495  0021               	movlb	1	; select bank1
  4933  0496  0827               	movf	ssp2_vLCDTest01@val^(0+128),w
  4934  0497  00A4               	movwf	??_ssp2_vLCDTest01^(0+128)
  4935  0498  3004               	movlw	4
  4936  0499                     u3475:	
  4937  0499  36A4               	lsrf	??_ssp2_vLCDTest01^(0+128),f
  4938  049A  0B89               	decfsz	9,f
  4939  049B  2C99               	goto	u3475
  4940  049C  0824               	movf	??_ssp2_vLCDTest01^(0+128),w
  4941  049D  390F               	andlw	15
  4942  049E  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  4943  049F  0084               	movwf	4
  4944  04A0  3087               	movlw	high (_HEX_LIST| (0+32768))
  4945  04A1  1803               	skipnc
  4946  04A2  3E01               	addlw	1
  4947  04A3  0085               	movwf	5
  4948  04A4  0800               	movf	0,w	;code access
  4949  04A5  318B  2378  3184   	fcall	_ST7032_vWriteCharSSP2
  4950                           
  4951                           ;TestMain.c: 625:     ST7032_vWriteCharSSP2(HEX_LIST[val & 0x0F & 0x0F]);
  4952  04A8  0021               	movlb	1	; select bank1
  4953  04A9  0827               	movf	ssp2_vLCDTest01@val^(0+128),w
  4954  04AA  390F               	andlw	15
  4955  04AB  3EE8               	addlw	low (_HEX_LIST| (0+32768))
  4956  04AC  0084               	movwf	4
  4957  04AD  3087               	movlw	high (_HEX_LIST| (0+32768))
  4958  04AE  1803               	skipnc
  4959  04AF  3E01               	addlw	1
  4960  04B0  0085               	movwf	5
  4961  04B1  0800               	movf	0,w	;code access
  4962  04B2  318B  2378  3184   	fcall	_ST7032_vWriteCharSSP2
  4963                           
  4964                           ;TestMain.c: 627:     ST7032_bSetCursorSSP2(0, 0);
  4965  04B5  0020               	movlb	0	; select bank0
  4966  04B6  01DD               	clrf	ST7032_bSetCursorSSP2@u8ColNo
  4967  04B7  3000               	movlw	0
  4968  04B8  318B  23C9  3184   	fcall	_ST7032_bSetCursorSSP2
  4969                           
  4970                           ;TestMain.c: 629:     for (u8Idx = 0; u8Idx <16; u8Idx++) {
  4971  04BB  0021               	movlb	1	; select bank1
  4972  04BC  01A6               	clrf	ssp2_vLCDTest01@u8Idx^(0+128)
  4973  04BD                     l5818:	
  4974                           
  4975                           ;TestMain.c: 631:         ST7032_vWriteDataSSP2(&val, 1);
  4976  04BD  0020               	movlb	0	; select bank0
  4977  04BE  01D3               	clrf	ST7032_vWriteDataSSP2@u8Len
  4978  04BF  0AD3               	incf	ST7032_vWriteDataSSP2@u8Len,f
  4979  04C0  30A7               	movlw	(low (ssp2_vLCDTest01@val| 0))& (0+255)
  4980  04C1  318E  265C  3184   	fcall	_ST7032_vWriteDataSSP2
  4981                           
  4982                           ;TestMain.c: 632:         val = (val + 1) % 0xFF;
  4983  04C4  30FF               	movlw	255
  4984  04C5  0020               	movlb	0	; select bank0
  4985  04C6  00CC               	movwf	___awmod@divisor
  4986  04C7  3000               	movlw	0
  4987  04C8  00CD               	movwf	___awmod@divisor+1
  4988  04C9  0021               	movlb	1	; select bank1
  4989  04CA  0827               	movf	ssp2_vLCDTest01@val^(0+128),w
  4990  04CB  3E01               	addlw	1
  4991  04CC  0020               	movlb	0	; select bank0
  4992  04CD  00CE               	movwf	___awmod@dividend
  4993  04CE  3000               	movlw	0
  4994  04CF  1803               	skipnc
  4995  04D0  3001               	movlw	1
  4996  04D1  00CF               	movwf	___awmod@dividend+1
  4997  04D2  318D  2541  3184   	fcall	___awmod
  4998  04D5  0020               	movlb	0	; select bank0
  4999  04D6  084C               	movf	?___awmod,w
  5000  04D7  0021               	movlb	1	; select bank1
  5001  04D8  00A4               	movwf	??_ssp2_vLCDTest01^(0+128)
  5002  04D9  0824               	movf	??_ssp2_vLCDTest01^(0+128),w
  5003  04DA  00A7               	movwf	ssp2_vLCDTest01@val^(0+128)
  5004                           
  5005                           ;TestMain.c: 634:         _delay((unsigned long)((500)*(16000000/4000.0)));
  5006  04DB  300B               	movlw	11
  5007  04DC  0021               	movlb	1	; select bank1
  5008  04DD  00A5               	movwf	(??_ssp2_vLCDTest01^(0+128)+1)
  5009  04DE  3026               	movlw	38
  5010  04DF  00A4               	movwf	??_ssp2_vLCDTest01^(0+128)
  5011  04E0  305D               	movlw	93
  5012  04E1                     u4347:	
  5013  04E1  0B89               	decfsz	9,f
  5014  04E2  2CE1               	goto	u4347
  5015  04E3  0BA4               	decfsz	??_ssp2_vLCDTest01^(0+128),f
  5016  04E4  2CE1               	goto	u4347
  5017  04E5  0BA5               	decfsz	(??_ssp2_vLCDTest01^(0+128)+1),f
  5018  04E6  2CE1               	goto	u4347
  5019  04E7  3200               	nop2
  5020                           
  5021                           ;TestMain.c: 635:     }
  5022  04E8  3001               	movlw	1
  5023  04E9  0021               	movlb	1	; select bank1
  5024  04EA  00A4               	movwf	??_ssp2_vLCDTest01^(0+128)
  5025  04EB  0824               	movf	??_ssp2_vLCDTest01^(0+128),w
  5026  04EC  07A6               	addwf	ssp2_vLCDTest01@u8Idx^(0+128),f
  5027  04ED  3010               	movlw	16
  5028  04EE  0226               	subwf	ssp2_vLCDTest01@u8Idx^(0+128),w
  5029  04EF  1803               	btfsc	3,0
  5030  04F0  0008               	return
  5031  04F1  2CBD               	goto	l5818
  5032  04F2                     __end_of_ssp2_vLCDTest01:	
  5033                           
  5034                           	psect	text13
  5035  05BF                     __ptext13:	
  5036 ;; *************** function _rand *****************
  5037 ;; Defined at:
  5038 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\rand.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;		None
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;		None
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  2   34[BANK0 ] int 
  5045 ;; Registers used:
  5046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5052 ;;      Params:         0       2       0       0       0       0
  5053 ;;      Locals:         0       0       0       0       0       0
  5054 ;;      Temps:          0       8       0       0       0       0
  5055 ;;      Totals:         0      10       0       0       0       0
  5056 ;;Total ram usage:       10 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:    6
  5059 ;; This function calls:
  5060 ;;		___omul
  5061 ;; This function is called by:
  5062 ;;		_ssp2_vLCDTest01
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           
  5067                           ;psect for function _rand
  5068  05BF                     _rand:	
  5069                           
  5070                           ;incstack = 0
  5071                           ; Regs used in _rand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5072  05BF  3001               	movlw	1
  5073  05C0  0020               	movlb	0	; select bank0
  5074  05C1  00C4               	movwf	??_rand
  5075  05C2  3000               	movlw	0
  5076  05C3  00C5               	movwf	??_rand+1
  5077  05C4  3000               	movlw	0
  5078  05C5  00C6               	movwf	??_rand+2
  5079  05C6  3000               	movlw	0
  5080  05C7  00C7               	movwf	??_rand+3
  5081  05C8  3000               	movlw	0
  5082  05C9  00C8               	movwf	??_rand+4
  5083  05CA  3000               	movlw	0
  5084  05CB  00C9               	movwf	??_rand+5
  5085  05CC  3000               	movlw	0
  5086  05CD  00CA               	movwf	??_rand+6
  5087  05CE  3000               	movlw	0
  5088  05CF  00CB               	movwf	??_rand+7
  5089  05D0  0021               	movlb	1	; select bank1
  5090  05D1  0859               	movf	_seed^(0+128),w
  5091  05D2  0020               	movlb	0	; select bank0
  5092  05D3  00A9               	movwf	___omul@multiplier
  5093  05D4  0021               	movlb	1	; select bank1
  5094  05D5  085A               	movf	(_seed+1)^(0+128),w
  5095  05D6  0020               	movlb	0	; select bank0
  5096  05D7  00AA               	movwf	___omul@multiplier+1
  5097  05D8  0021               	movlb	1	; select bank1
  5098  05D9  085B               	movf	(_seed+2)^(0+128),w
  5099  05DA  0020               	movlb	0	; select bank0
  5100  05DB  00AB               	movwf	___omul@multiplier+2
  5101  05DC  0021               	movlb	1	; select bank1
  5102  05DD  085C               	movf	(_seed+3)^(0+128),w
  5103  05DE  0020               	movlb	0	; select bank0
  5104  05DF  00AC               	movwf	___omul@multiplier+3
  5105  05E0  0021               	movlb	1	; select bank1
  5106  05E1  085D               	movf	(_seed+4)^(0+128),w
  5107  05E2  0020               	movlb	0	; select bank0
  5108  05E3  00AD               	movwf	___omul@multiplier+4
  5109  05E4  0021               	movlb	1	; select bank1
  5110  05E5  085E               	movf	(_seed+5)^(0+128),w
  5111  05E6  0020               	movlb	0	; select bank0
  5112  05E7  00AE               	movwf	___omul@multiplier+5
  5113  05E8  0021               	movlb	1	; select bank1
  5114  05E9  085F               	movf	(_seed+6)^(0+128),w
  5115  05EA  0020               	movlb	0	; select bank0
  5116  05EB  00AF               	movwf	___omul@multiplier+6
  5117  05EC  0021               	movlb	1	; select bank1
  5118  05ED  0860               	movf	(_seed+7)^(0+128),w
  5119  05EE  0020               	movlb	0	; select bank0
  5120  05EF  00B0               	movwf	___omul@multiplier+7
  5121  05F0  3058               	movlw	88
  5122  05F1  00B8               	movwf	___omul@multiplicand+7
  5123  05F2  3051               	movlw	81
  5124  05F3  00B7               	movwf	___omul@multiplicand+6
  5125  05F4  30F4               	movlw	244
  5126  05F5  00B6               	movwf	___omul@multiplicand+5
  5127  05F6  302D               	movlw	45
  5128  05F7  00B5               	movwf	___omul@multiplicand+4
  5129  05F8  304C               	movlw	76
  5130  05F9  00B4               	movwf	___omul@multiplicand+3
  5131  05FA  3095               	movlw	149
  5132  05FB  00B3               	movwf	___omul@multiplicand+2
  5133  05FC  307F               	movlw	127
  5134  05FD  00B2               	movwf	___omul@multiplicand+1
  5135  05FE  302D               	movlw	45
  5136  05FF  00B1               	movwf	___omul@multiplicand
  5137  0600  318E  2614  3185   	fcall	___omul
  5138  0603  0020               	movlb	0	; select bank0
  5139  0604  3029               	movlw	low ?___omul
  5140  0605  0086               	movwf	6
  5141  0606  3000               	movlw	high ?___omul
  5142  0607  0087               	movwf	7
  5143  0608  3F40               	moviw [0]fsr1
  5144  0609  07C4               	addwf	??_rand,f
  5145  060A  3F41               	moviw [1]fsr1
  5146  060B  3DC5               	addwfc	??_rand+1,f
  5147  060C  3F42               	moviw [2]fsr1
  5148  060D  3DC6               	addwfc	??_rand+2,f
  5149  060E  3F43               	moviw [3]fsr1
  5150  060F  3DC7               	addwfc	??_rand+3,f
  5151  0610  3F44               	moviw [4]fsr1
  5152  0611  3DC8               	addwfc	??_rand+4,f
  5153  0612  3F45               	moviw [5]fsr1
  5154  0613  3DC9               	addwfc	??_rand+5,f
  5155  0614  3F46               	moviw [6]fsr1
  5156  0615  3DCA               	addwfc	??_rand+6,f
  5157  0616  3F47               	moviw [7]fsr1
  5158  0617  3DCB               	addwfc	??_rand+7,f
  5159  0618  084B               	movf	??_rand+7,w
  5160  0619  0021               	movlb	1	; select bank1
  5161  061A  00E0               	movwf	(_seed+7)^(0+128)
  5162  061B  0020               	movlb	0	; select bank0
  5163  061C  084A               	movf	??_rand+6,w
  5164  061D  0021               	movlb	1	; select bank1
  5165  061E  00DF               	movwf	(_seed+6)^(0+128)
  5166  061F  0020               	movlb	0	; select bank0
  5167  0620  0849               	movf	??_rand+5,w
  5168  0621  0021               	movlb	1	; select bank1
  5169  0622  00DE               	movwf	(_seed+5)^(0+128)
  5170  0623  0020               	movlb	0	; select bank0
  5171  0624  0848               	movf	??_rand+4,w
  5172  0625  0021               	movlb	1	; select bank1
  5173  0626  00DD               	movwf	(_seed+4)^(0+128)
  5174  0627  0020               	movlb	0	; select bank0
  5175  0628  0847               	movf	??_rand+3,w
  5176  0629  0021               	movlb	1	; select bank1
  5177  062A  00DC               	movwf	(_seed+3)^(0+128)
  5178  062B  0020               	movlb	0	; select bank0
  5179  062C  0846               	movf	??_rand+2,w
  5180  062D  0021               	movlb	1	; select bank1
  5181  062E  00DB               	movwf	(_seed+2)^(0+128)
  5182  062F  0020               	movlb	0	; select bank0
  5183  0630  0845               	movf	??_rand+1,w
  5184  0631  0021               	movlb	1	; select bank1
  5185  0632  00DA               	movwf	(_seed+1)^(0+128)
  5186  0633  0020               	movlb	0	; select bank0
  5187  0634  0844               	movf	??_rand,w
  5188  0635  0021               	movlb	1	; select bank1
  5189  0636  00D9               	movwf	_seed^(0+128)
  5190  0637  30D9               	movlw	low _seed
  5191  0638  0086               	movwf	6
  5192  0639  3000               	movlw	high _seed
  5193  063A  0087               	movwf	7
  5194  063B  3F40               	moviw [0]fsr1
  5195  063C  0020               	movlb	0	; select bank0
  5196  063D  00C4               	movwf	??_rand
  5197  063E  3F41               	moviw [1]fsr1
  5198  063F  00C5               	movwf	??_rand+1
  5199  0640  3F42               	moviw [2]fsr1
  5200  0641  00C6               	movwf	??_rand+2
  5201  0642  3F43               	moviw [3]fsr1
  5202  0643  00C7               	movwf	??_rand+3
  5203  0644  3F44               	moviw [4]fsr1
  5204  0645  00C8               	movwf	??_rand+4
  5205  0646  3F45               	moviw [5]fsr1
  5206  0647  00C9               	movwf	??_rand+5
  5207  0648  3F46               	moviw [6]fsr1
  5208  0649  00CA               	movwf	??_rand+6
  5209  064A  3F47               	moviw [7]fsr1
  5210  064B  00CB               	movwf	??_rand+7
  5211  064C  3007               	movlw	7
  5212  064D                     u3375:	
  5213  064D  0020               	movlb	0	; select bank0
  5214  064E  36CB               	lsrf	??_rand+7,f
  5215  064F  0CCA               	rrf	??_rand+6,f
  5216  0650  0CC9               	rrf	??_rand+5,f
  5217  0651  0CC8               	rrf	??_rand+4,f
  5218  0652  0CC7               	rrf	??_rand+3,f
  5219  0653  0CC6               	rrf	??_rand+2,f
  5220  0654  0CC5               	rrf	??_rand+1,f
  5221  0655  0CC4               	rrf	??_rand,f
  5222  0656  0B89               	decfsz	9,f
  5223  0657  2E4D               	goto	u3375
  5224  0658  0020               	movlb	0	; select bank0
  5225  0659  0845               	movf	??_rand+1,w
  5226  065A  00C3               	movwf	?_rand+1
  5227  065B  0844               	movf	??_rand,w
  5228  065C  00C2               	movwf	?_rand
  5229  065D  0008               	return
  5230  065E                     __end_of_rand:	
  5231                           
  5232                           	psect	text14
  5233  0E14                     __ptext14:	
  5234 ;; *************** function ___omul *****************
  5235 ;; Defined at:
  5236 ;;		line 91 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul64.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;  multiplier      8    9[BANK0 ] unsigned long long 
  5239 ;;  multiplicand    8   17[BANK0 ] unsigned long long 
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;  product         8   26[BANK0 ] unsigned long long 
  5242 ;; Return value:  Size  Location     Type
  5243 ;;                  8    9[BANK0 ] unsigned long long 
  5244 ;; Registers used:
  5245 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5251 ;;      Params:         0      16       0       0       0       0
  5252 ;;      Locals:         0       8       0       0       0       0
  5253 ;;      Temps:          0       1       0       0       0       0
  5254 ;;      Totals:         0      25       0       0       0       0
  5255 ;;Total ram usage:       25 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; Hardware stack levels required when called:    5
  5258 ;; This function calls:
  5259 ;;		Nothing
  5260 ;; This function is called by:
  5261 ;;		_rand
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           
  5266                           ;psect for function ___omul
  5267  0E14                     ___omul:	
  5268                           
  5269                           ;incstack = 0
  5270                           ; Regs used in ___omul: [wreg+fsr1l+fsr1h+status,2+status,0]
  5271  0E14  303A               	movlw	low ___omul@product
  5272  0E15  0086               	movwf	6
  5273  0E16  3000               	movlw	high ___omul@product
  5274  0E17  0087               	movwf	7
  5275  0E18  3008               	movlw	8
  5276  0E19  0020               	movlb	0	; select bank0
  5277  0E1A  00B9               	movwf	??___omul
  5278  0E1B  3000               	movlw	0
  5279  0E1C                     u3260:	
  5280  0E1C  001E               	movwi fsr1++
  5281  0E1D  0BB9               	decfsz	??___omul,f
  5282  0E1E  2E1C               	goto	u3260
  5283  0E1F                     l5542:	
  5284  0E1F  1C29               	btfss	___omul@multiplier,0
  5285  0E20  2E31               	goto	l5546
  5286  0E21  0831               	movf	___omul@multiplicand,w
  5287  0E22  07BA               	addwf	___omul@product,f
  5288  0E23  0832               	movf	___omul@multiplicand+1,w
  5289  0E24  3DBB               	addwfc	___omul@product+1,f
  5290  0E25  0833               	movf	___omul@multiplicand+2,w
  5291  0E26  3DBC               	addwfc	___omul@product+2,f
  5292  0E27  0834               	movf	___omul@multiplicand+3,w
  5293  0E28  3DBD               	addwfc	___omul@product+3,f
  5294  0E29  0835               	movf	___omul@multiplicand+4,w
  5295  0E2A  3DBE               	addwfc	___omul@product+4,f
  5296  0E2B  0836               	movf	___omul@multiplicand+5,w
  5297  0E2C  3DBF               	addwfc	___omul@product+5,f
  5298  0E2D  0837               	movf	___omul@multiplicand+6,w
  5299  0E2E  3DC0               	addwfc	___omul@product+6,f
  5300  0E2F  0838               	movf	___omul@multiplicand+7,w
  5301  0E30  3DC1               	addwfc	___omul@product+7,f
  5302  0E31                     l5546:	
  5303  0E31  35B1               	lslf	___omul@multiplicand,f
  5304  0E32  0DB2               	rlf	___omul@multiplicand+1,f
  5305  0E33  0DB3               	rlf	___omul@multiplicand+2,f
  5306  0E34  0DB4               	rlf	___omul@multiplicand+3,f
  5307  0E35  0DB5               	rlf	___omul@multiplicand+4,f
  5308  0E36  0DB6               	rlf	___omul@multiplicand+5,f
  5309  0E37  0DB7               	rlf	___omul@multiplicand+6,f
  5310  0E38  0DB8               	rlf	___omul@multiplicand+7,f
  5311  0E39  36B0               	lsrf	___omul@multiplier+7,f
  5312  0E3A  0CAF               	rrf	___omul@multiplier+6,f
  5313  0E3B  0CAE               	rrf	___omul@multiplier+5,f
  5314  0E3C  0CAD               	rrf	___omul@multiplier+4,f
  5315  0E3D  0CAC               	rrf	___omul@multiplier+3,f
  5316  0E3E  0CAB               	rrf	___omul@multiplier+2,f
  5317  0E3F  0CAA               	rrf	___omul@multiplier+1,f
  5318  0E40  0CA9               	rrf	___omul@multiplier,f
  5319  0E41  0829               	movf	___omul@multiplier,w
  5320  0E42  042A               	iorwf	___omul@multiplier+1,w
  5321  0E43  042B               	iorwf	___omul@multiplier+2,w
  5322  0E44  042C               	iorwf	___omul@multiplier+3,w
  5323  0E45  042D               	iorwf	___omul@multiplier+4,w
  5324  0E46  042E               	iorwf	___omul@multiplier+5,w
  5325  0E47  042F               	iorwf	___omul@multiplier+6,w
  5326  0E48  0430               	iorwf	___omul@multiplier+7,w
  5327  0E49  1D03               	skipz
  5328  0E4A  2E1F               	goto	l5542
  5329  0E4B  083A               	movf	___omul@product,w
  5330  0E4C  00A9               	movwf	?___omul
  5331  0E4D  083B               	movf	___omul@product+1,w
  5332  0E4E  00AA               	movwf	?___omul+1
  5333  0E4F  083C               	movf	___omul@product+2,w
  5334  0E50  00AB               	movwf	?___omul+2
  5335  0E51  083D               	movf	___omul@product+3,w
  5336  0E52  00AC               	movwf	?___omul+3
  5337  0E53  083E               	movf	___omul@product+4,w
  5338  0E54  00AD               	movwf	?___omul+4
  5339  0E55  083F               	movf	___omul@product+5,w
  5340  0E56  00AE               	movwf	?___omul+5
  5341  0E57  0840               	movf	___omul@product+6,w
  5342  0E58  00AF               	movwf	?___omul+6
  5343  0E59  0841               	movf	___omul@product+7,w
  5344  0E5A  00B0               	movwf	?___omul+7
  5345  0E5B  0008               	return
  5346  0E5C                     __end_of___omul:	
  5347                           
  5348                           	psect	text15
  5349  0DCD                     __ptext15:	
  5350 ;; *************** function _ST7032_vWriteStringSSP2 *****************
  5351 ;; Defined at:
  5352 ;;		line 1000 in file "st7032.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  pcStr           2   51[BANK0 ] PTR unsigned char 
  5355 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(17), 
  5356 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
  5357 ;;		 -> STR_24(17), STR_23(17), STR_22(17), STR_21(17), 
  5358 ;;		 -> STR_20(13), STR_19(16), STR_18(16), STR_17(15), 
  5359 ;;		 -> STR_16(15), STR_15(3), STR_14(3), STR_13(17), 
  5360 ;;		 -> STR_12(17), STR_11(3), STR_10(3), STR_9(17), 
  5361 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(17), 
  5362 ;;		 -> STR_4(17), STR_3(3), STR_2(17), STR_1(17), 
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;  pcWkData        2   57[BANK0 ] PTR unsigned char 
  5365 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(17), 
  5366 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
  5367 ;;		 -> STR_24(17), STR_23(17), STR_22(17), STR_21(17), 
  5368 ;;		 -> STR_20(13), STR_19(16), STR_18(16), STR_17(15), 
  5369 ;;		 -> STR_16(15), STR_15(3), STR_14(3), STR_13(17), 
  5370 ;;		 -> STR_12(17), STR_11(3), STR_10(3), STR_9(17), 
  5371 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(17), 
  5372 ;;		 -> STR_4(17), STR_3(3), STR_2(17), STR_1(17), 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      void 
  5375 ;; Registers used:
  5376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5382 ;;      Params:         0       2       0       0       0       0
  5383 ;;      Locals:         0       2       0       0       0       0
  5384 ;;      Temps:          0       4       0       0       0       0
  5385 ;;      Totals:         0       8       0       0       0       0
  5386 ;;Total ram usage:        8 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    7
  5389 ;; This function calls:
  5390 ;;		_I2C_u8MstStartSSP2
  5391 ;;		_I2C_u8MstTxSSP2
  5392 ;;		_I2C_vMstStopSSP2
  5393 ;;		___awmod
  5394 ;; This function is called by:
  5395 ;;		_ssp2_vLCDTest01
  5396 ;;		_ssp2_vLCDTest02
  5397 ;;		_ssp2_vLCDTest03
  5398 ;;		_ssp2_vLCDTest04
  5399 ;;		_ssp2_vI2CTest01
  5400 ;;		_ssp2_vI2CTest02
  5401 ;;		_ssp2_vI2CTest03
  5402 ;;		_ssp2_vI2CTest04
  5403 ;;		_ssp2_vKeypadTest01
  5404 ;;		_ssp2_vKeypadTest02
  5405 ;;		_ssp2_vKeypadTest03
  5406 ;;		_ssp2_vKeypadTest04
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           
  5411                           ;psect for function _ST7032_vWriteStringSSP2
  5412  0DCD                     _ST7032_vWriteStringSSP2:	
  5413                           
  5414                           ;st7032.c: 1002:     I2C_u8MstStartSSP2((0x3E), (0));
  5415                           
  5416                           ;incstack = 0
  5417                           ; Regs used in _ST7032_vWriteStringSSP2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5418  0DCD  0020               	movlb	0	; select bank0
  5419  0DCE  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  5420  0DCF  303E               	movlw	62
  5421  0DD0  318B  2313  318D   	fcall	_I2C_u8MstStartSSP2
  5422                           
  5423                           ;st7032.c: 1004:     I2C_u8MstTxSSP2((0x40));
  5424  0DD3  3040               	movlw	64
  5425  0DD4  318A  226D  318D   	fcall	_I2C_u8MstTxSSP2
  5426                           
  5427                           ;st7032.c: 1006:     char* pcWkData = pcStr;
  5428  0DD7  0020               	movlb	0	; select bank0
  5429  0DD8  0854               	movf	ST7032_vWriteStringSSP2@pcStr+1,w
  5430  0DD9  00DA               	movwf	ST7032_vWriteStringSSP2@pcWkData+1
  5431  0DDA  0853               	movf	ST7032_vWriteStringSSP2@pcStr,w
  5432  0DDB  00D9               	movwf	ST7032_vWriteStringSSP2@pcWkData
  5433  0DDC                     l5598:	
  5434                           ;st7032.c: 1007:     while (*pcWkData != '\0') {
  5435                           
  5436                           
  5437                           ;st7032.c: 1007:     while (*pcWkData != '\0') {
  5438  0DDC  0859               	movf	ST7032_vWriteStringSSP2@pcWkData,w
  5439  0DDD  0084               	movwf	4
  5440  0DDE  085A               	movf	ST7032_vWriteStringSSP2@pcWkData+1,w
  5441  0DDF  0085               	movwf	5
  5442  0DE0  0012               	moviw fsr0++
  5443  0DE1  1903               	btfsc	3,2
  5444  0DE2  2DF5               	goto	l5600
  5445                           
  5446                           ;st7032.c: 1008:         I2C_u8MstTxSSP2(*pcWkData);
  5447  0DE3  0859               	movf	ST7032_vWriteStringSSP2@pcWkData,w
  5448  0DE4  0084               	movwf	4
  5449  0DE5  085A               	movf	ST7032_vWriteStringSSP2@pcWkData+1,w
  5450  0DE6  0085               	movwf	5
  5451  0DE7  0800               	movf	0,w	;code access
  5452  0DE8  318A  226D  318D   	fcall	_I2C_u8MstTxSSP2
  5453                           
  5454                           ;st7032.c: 1009:         _delay((unsigned long)(((26))*(16000000/4000000.0)));
  5455  0DEB  3022               	movlw	34
  5456  0DEC                     u4357:	
  5457  0DEC  0B89               	decfsz	9,f
  5458  0DED  2DEC               	goto	u4357
  5459  0DEE  3200               	nop2
  5460                           
  5461                           ;st7032.c: 1010:         pcWkData++;
  5462  0DEF  3001               	movlw	1
  5463  0DF0  0020               	movlb	0	; select bank0
  5464  0DF1  07D9               	addwf	ST7032_vWriteStringSSP2@pcWkData,f
  5465  0DF2  3000               	movlw	0
  5466  0DF3  3DDA               	addwfc	ST7032_vWriteStringSSP2@pcWkData+1,f
  5467  0DF4  2DDC               	goto	l5598
  5468  0DF5                     l5600:	
  5469                           
  5470                           ;st7032.c: 1013:     I2C_vMstStopSSP2();
  5471  0DF5  318A  2256  318D   	fcall	_I2C_vMstStopSSP2
  5472                           
  5473                           ;st7032.c: 1015:     stStateSSP2.u8CursorPos =
  5474  0DF8  3050               	movlw	80
  5475  0DF9  0020               	movlb	0	; select bank0
  5476  0DFA  00CC               	movwf	___awmod@divisor
  5477  0DFB  3000               	movlw	0
  5478  0DFC  00CD               	movwf	___awmod@divisor+1
  5479  0DFD  085E               	movf	_stStateSSP2,w
  5480  0DFE  00D5               	movwf	??_ST7032_vWriteStringSSP2
  5481  0DFF  0853               	movf	ST7032_vWriteStringSSP2@pcStr,w
  5482  0E00  0255               	subwf	??_ST7032_vWriteStringSSP2,w
  5483  0E01  00D6               	movwf	??_ST7032_vWriteStringSSP2+1
  5484  0E02  0954               	comf	ST7032_vWriteStringSSP2@pcStr+1,w
  5485  0E03  1803               	skipnc
  5486  0E04  0A89               	incf	9,f
  5487  0E05  00D7               	movwf	??_ST7032_vWriteStringSSP2+2
  5488  0E06  0859               	movf	ST7032_vWriteStringSSP2@pcWkData,w
  5489  0E07  0756               	addwf	??_ST7032_vWriteStringSSP2+1,w
  5490  0E08  00CE               	movwf	___awmod@dividend
  5491  0E09  085A               	movf	ST7032_vWriteStringSSP2@pcWkData+1,w
  5492  0E0A  3D57               	addwfc	??_ST7032_vWriteStringSSP2+2,w
  5493  0E0B  00CF               	movwf	___awmod@dividend+1
  5494  0E0C  318D  2541         	fcall	___awmod
  5495  0E0E  0020               	movlb	0	; select bank0
  5496  0E0F  084C               	movf	?___awmod,w
  5497  0E10  00D8               	movwf	??_ST7032_vWriteStringSSP2+3
  5498  0E11  0858               	movf	??_ST7032_vWriteStringSSP2+3,w
  5499  0E12  00DE               	movwf	_stStateSSP2
  5500  0E13  0008               	return
  5501  0E14                     __end_of_ST7032_vWriteStringSSP2:	
  5502                           
  5503                           	psect	text16
  5504  0E5C                     __ptext16:	
  5505 ;; *************** function _ST7032_vWriteDataSSP2 *****************
  5506 ;; Defined at:
  5507 ;;		line 1073 in file "st7032.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;  pcData          1    wreg     PTR unsigned char 
  5510 ;;		 -> ssp2_vLCDTest01@val(1), 
  5511 ;;  u8Len           1   51[BANK0 ] unsigned char 
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;  pcData          1   58[BANK0 ] PTR unsigned char 
  5514 ;;		 -> ssp2_vLCDTest01@val(1), 
  5515 ;;  pu8WkData       1   59[BANK0 ] PTR unsigned char 
  5516 ;;		 -> ssp2_vLCDTest01@val(1), 
  5517 ;;  u8Idx           1   57[BANK0 ] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  1    wreg      void 
  5520 ;; Registers used:
  5521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5527 ;;      Params:         0       1       0       0       0       0
  5528 ;;      Locals:         0       3       0       0       0       0
  5529 ;;      Temps:          0       5       0       0       0       0
  5530 ;;      Totals:         0       9       0       0       0       0
  5531 ;;Total ram usage:        9 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    7
  5534 ;; This function calls:
  5535 ;;		_I2C_u8MstStartSSP2
  5536 ;;		_I2C_u8MstTxSSP2
  5537 ;;		_I2C_vMstStopSSP2
  5538 ;;		___awmod
  5539 ;; This function is called by:
  5540 ;;		_ssp2_vLCDTest01
  5541 ;; This function uses a non-reentrant model
  5542 ;;
  5543                           
  5544                           
  5545                           ;psect for function _ST7032_vWriteDataSSP2
  5546  0E5C                     _ST7032_vWriteDataSSP2:	
  5547                           
  5548                           ;incstack = 0
  5549                           ; Regs used in _ST7032_vWriteDataSSP2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5550                           ;ST7032_vWriteDataSSP2@pcData stored from wreg
  5551  0E5C  0020               	movlb	0	; select bank0
  5552  0E5D  00DA               	movwf	ST7032_vWriteDataSSP2@pcData
  5553                           
  5554                           ;st7032.c: 1075:     I2C_u8MstStartSSP2((0x3E), (0));
  5555  0E5E  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  5556  0E5F  303E               	movlw	62
  5557  0E60  318B  2313  318E   	fcall	_I2C_u8MstStartSSP2
  5558                           
  5559                           ;st7032.c: 1077:     I2C_u8MstTxSSP2((0x40));
  5560  0E63  3040               	movlw	64
  5561  0E64  318A  226D  318E   	fcall	_I2C_u8MstTxSSP2
  5562                           
  5563                           ;st7032.c: 1079:     unsigned char* pu8WkData = pcData;
  5564  0E67  0020               	movlb	0	; select bank0
  5565  0E68  085A               	movf	ST7032_vWriteDataSSP2@pcData,w
  5566  0E69  00D4               	movwf	??_ST7032_vWriteDataSSP2
  5567  0E6A  0854               	movf	??_ST7032_vWriteDataSSP2,w
  5568  0E6B  00DB               	movwf	ST7032_vWriteDataSSP2@pu8WkData
  5569                           
  5570                           ;st7032.c: 1080:     unsigned char u8Idx;;st7032.c: 1081:     for (u8Idx = 0; u8Idx < u8
      +                          Len; u8Idx++) {
  5571  0E6C  01D9               	clrf	ST7032_vWriteDataSSP2@u8Idx
  5572  0E6D                     l5630:	
  5573  0E6D  0853               	movf	ST7032_vWriteDataSSP2@u8Len,w
  5574  0E6E  0259               	subwf	ST7032_vWriteDataSSP2@u8Idx,w
  5575  0E6F  1803               	btfsc	3,0
  5576  0E70  2E86               	goto	l5632
  5577                           
  5578                           ;st7032.c: 1082:         I2C_u8MstTxSSP2(*pu8WkData);
  5579  0E71  085B               	movf	ST7032_vWriteDataSSP2@pu8WkData,w
  5580  0E72  0086               	movwf	6
  5581  0E73  0187               	clrf	7
  5582  0E74  0801               	movf	1,w
  5583  0E75  318A  226D  318E   	fcall	_I2C_u8MstTxSSP2
  5584                           
  5585                           ;st7032.c: 1083:         _delay((unsigned long)(((26))*(16000000/4000000.0)));
  5586  0E78  3022               	movlw	34
  5587  0E79                     u4367:	
  5588  0E79  0B89               	decfsz	9,f
  5589  0E7A  2E79               	goto	u4367
  5590  0E7B  3200               	nop2
  5591                           
  5592                           ;st7032.c: 1084:         pu8WkData++;
  5593  0E7C  3001               	movlw	1
  5594  0E7D  0020               	movlb	0	; select bank0
  5595  0E7E  00D4               	movwf	??_ST7032_vWriteDataSSP2
  5596  0E7F  0854               	movf	??_ST7032_vWriteDataSSP2,w
  5597  0E80  07DB               	addwf	ST7032_vWriteDataSSP2@pu8WkData,f
  5598                           
  5599                           ;st7032.c: 1085:     }
  5600  0E81  3001               	movlw	1
  5601  0E82  00D4               	movwf	??_ST7032_vWriteDataSSP2
  5602  0E83  0854               	movf	??_ST7032_vWriteDataSSP2,w
  5603  0E84  07D9               	addwf	ST7032_vWriteDataSSP2@u8Idx,f
  5604  0E85  2E6D               	goto	l5630
  5605  0E86                     l5632:	
  5606                           
  5607                           ;st7032.c: 1087:     I2C_vMstStopSSP2();
  5608  0E86  318A  2256  318E   	fcall	_I2C_vMstStopSSP2
  5609                           
  5610                           ;st7032.c: 1089:     stStateSSP2.u8CursorPos =
  5611  0E89  3050               	movlw	80
  5612  0E8A  0020               	movlb	0	; select bank0
  5613  0E8B  00CC               	movwf	___awmod@divisor
  5614  0E8C  3000               	movlw	0
  5615  0E8D  00CD               	movwf	___awmod@divisor+1
  5616  0E8E  085A               	movf	ST7032_vWriteDataSSP2@pcData,w
  5617  0E8F  00D4               	movwf	??_ST7032_vWriteDataSSP2
  5618  0E90  3000               	movlw	0
  5619  0E91  00D5               	movwf	??_ST7032_vWriteDataSSP2+1
  5620  0E92  085E               	movf	_stStateSSP2,w
  5621  0E93  075B               	addwf	ST7032_vWriteDataSSP2@pu8WkData,w
  5622  0E94  00D6               	movwf	??_ST7032_vWriteDataSSP2+2
  5623  0E95  01D7               	clrf	??_ST7032_vWriteDataSSP2+3
  5624  0E96  0DD7               	rlf	??_ST7032_vWriteDataSSP2+3,f
  5625  0E97  0854               	movf	??_ST7032_vWriteDataSSP2,w
  5626  0E98  0256               	subwf	??_ST7032_vWriteDataSSP2+2,w
  5627  0E99  00CE               	movwf	___awmod@dividend
  5628  0E9A  0855               	movf	??_ST7032_vWriteDataSSP2+1,w
  5629  0E9B  3B57               	subwfb	??_ST7032_vWriteDataSSP2+3,w
  5630  0E9C  00CF               	movwf	___awmod@dividend+1
  5631  0E9D  318D  2541         	fcall	___awmod
  5632  0E9F  0020               	movlb	0	; select bank0
  5633  0EA0  084C               	movf	?___awmod,w
  5634  0EA1  00D8               	movwf	??_ST7032_vWriteDataSSP2+4
  5635  0EA2  0858               	movf	??_ST7032_vWriteDataSSP2+4,w
  5636  0EA3  00DE               	movwf	_stStateSSP2
  5637  0EA4  0008               	return
  5638  0EA5                     __end_of_ST7032_vWriteDataSSP2:	
  5639                           
  5640                           	psect	text17
  5641  0B78                     __ptext17:	
  5642 ;; *************** function _ST7032_vWriteCharSSP2 *****************
  5643 ;; Defined at:
  5644 ;;		line 936 in file "st7032.c"
  5645 ;; Parameters:    Size  Location     Type
  5646 ;;  cData           1    wreg     unsigned char 
  5647 ;; Auto vars:     Size  Location     Type
  5648 ;;  cData           1   52[BANK0 ] unsigned char 
  5649 ;; Return value:  Size  Location     Type
  5650 ;;                  1    wreg      void 
  5651 ;; Registers used:
  5652 ;;		wreg, status,2, status,0, pclath, cstack
  5653 ;; Tracked objects:
  5654 ;;		On entry : 0/0
  5655 ;;		On exit  : 0/0
  5656 ;;		Unchanged: 0/0
  5657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5658 ;;      Params:         0       0       0       0       0       0
  5659 ;;      Locals:         0       1       0       0       0       0
  5660 ;;      Temps:          0       1       0       0       0       0
  5661 ;;      Totals:         0       2       0       0       0       0
  5662 ;;Total ram usage:        2 bytes
  5663 ;; Hardware stack levels used:    1
  5664 ;; Hardware stack levels required when called:    7
  5665 ;; This function calls:
  5666 ;;		_I2C_u8MstStartSSP2
  5667 ;;		_I2C_u8MstTxSSP2
  5668 ;;		_I2C_vMstStopSSP2
  5669 ;;		___awmod
  5670 ;; This function is called by:
  5671 ;;		_ssp2_vLCDTest01
  5672 ;;		_ssp2_vLCDTest02
  5673 ;;		_ssp2_vLCDTest03
  5674 ;;		_ssp2_vLCDTest04
  5675 ;;		_ssp2_vI2CTest01
  5676 ;;		_ssp2_vKeypadTest01
  5677 ;;		_ssp2_vKeypadTest02
  5678 ;;		_ssp2_vKeypadTest03
  5679 ;;		_ssp2_vKeypadTest04
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           
  5684                           ;psect for function _ST7032_vWriteCharSSP2
  5685  0B78                     _ST7032_vWriteCharSSP2:	
  5686                           
  5687                           ;incstack = 0
  5688                           ; Regs used in _ST7032_vWriteCharSSP2: [wreg+status,2+status,0+pclath+cstack]
  5689                           ;ST7032_vWriteCharSSP2@cData stored from wreg
  5690  0B78  0020               	movlb	0	; select bank0
  5691  0B79  00D4               	movwf	ST7032_vWriteCharSSP2@cData
  5692                           
  5693                           ;st7032.c: 938:     I2C_u8MstStartSSP2((0x3E), (0));
  5694  0B7A  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  5695  0B7B  303E               	movlw	62
  5696  0B7C  318B  2313  318B   	fcall	_I2C_u8MstStartSSP2
  5697                           
  5698                           ;st7032.c: 940:     I2C_u8MstTxSSP2((0x40));
  5699  0B7F  3040               	movlw	64
  5700  0B80  318A  226D  318B   	fcall	_I2C_u8MstTxSSP2
  5701                           
  5702                           ;st7032.c: 942:     I2C_u8MstTxSSP2(cData);
  5703  0B83  0020               	movlb	0	; select bank0
  5704  0B84  0854               	movf	ST7032_vWriteCharSSP2@cData,w
  5705  0B85  318A  226D  318B   	fcall	_I2C_u8MstTxSSP2
  5706                           
  5707                           ;st7032.c: 944:     I2C_vMstStopSSP2();
  5708  0B88  318A  2256  318B   	fcall	_I2C_vMstStopSSP2
  5709                           
  5710                           ;st7032.c: 946:     stStateSSP2.u8CursorPos = (stStateSSP2.u8CursorPos + 1) % 80;
  5711  0B8B  3050               	movlw	80
  5712  0B8C  0020               	movlb	0	; select bank0
  5713  0B8D  00CC               	movwf	___awmod@divisor
  5714  0B8E  3000               	movlw	0
  5715  0B8F  00CD               	movwf	___awmod@divisor+1
  5716  0B90  085E               	movf	_stStateSSP2,w
  5717  0B91  3E01               	addlw	1
  5718  0B92  00CE               	movwf	___awmod@dividend
  5719  0B93  3000               	movlw	0
  5720  0B94  1803               	skipnc
  5721  0B95  3001               	movlw	1
  5722  0B96  00CF               	movwf	___awmod@dividend+1
  5723  0B97  318D  2541         	fcall	___awmod
  5724  0B99  0020               	movlb	0	; select bank0
  5725  0B9A  084C               	movf	?___awmod,w
  5726  0B9B  00D3               	movwf	??_ST7032_vWriteCharSSP2
  5727  0B9C  0853               	movf	??_ST7032_vWriteCharSSP2,w
  5728  0B9D  00DE               	movwf	_stStateSSP2
  5729  0B9E  0008               	return
  5730  0B9F                     __end_of_ST7032_vWriteCharSSP2:	
  5731                           
  5732                           	psect	text18
  5733  0AE7                     __ptext18:	
  5734 ;; *************** function _ST7032_vClearDispSSP2 *****************
  5735 ;; Defined at:
  5736 ;;		line 337 in file "st7032.c"
  5737 ;; Parameters:    Size  Location     Type
  5738 ;;		None
  5739 ;; Auto vars:     Size  Location     Type
  5740 ;;		None
  5741 ;; Return value:  Size  Location     Type
  5742 ;;                  1    wreg      void 
  5743 ;; Registers used:
  5744 ;;		wreg, status,2, status,0, pclath, cstack
  5745 ;; Tracked objects:
  5746 ;;		On entry : 0/0
  5747 ;;		On exit  : 0/0
  5748 ;;		Unchanged: 0/0
  5749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5750 ;;      Params:         0       0       0       0       0       0
  5751 ;;      Locals:         0       0       0       0       0       0
  5752 ;;      Temps:          0       1       0       0       0       0
  5753 ;;      Totals:         0       1       0       0       0       0
  5754 ;;Total ram usage:        1 bytes
  5755 ;; Hardware stack levels used:    1
  5756 ;; Hardware stack levels required when called:    8
  5757 ;; This function calls:
  5758 ;;		_I2C_u8MstStartSSP2
  5759 ;;		_vExecCmdEndSSP2
  5760 ;; This function is called by:
  5761 ;;		_ssp2_vLCDTest01
  5762 ;;		_ssp2_vLCDTest02
  5763 ;;		_ssp2_vLCDTest03
  5764 ;;		_ssp2_vLCDTest04
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           
  5769                           ;psect for function _ST7032_vClearDispSSP2
  5770  0AE7                     _ST7032_vClearDispSSP2:	
  5771                           
  5772                           ;st7032.c: 339:     I2C_u8MstStartSSP2((0x3E), (0));
  5773                           
  5774                           ;incstack = 0
  5775                           ; Regs used in _ST7032_vClearDispSSP2: [wreg+status,2+status,0+pclath+cstack]
  5776  0AE7  0020               	movlb	0	; select bank0
  5777  0AE8  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  5778  0AE9  303E               	movlw	62
  5779  0AEA  318B  2313  318A   	fcall	_I2C_u8MstStartSSP2
  5780                           
  5781                           ;st7032.c: 341:     vExecCmdEndSSP2((0b00000001));
  5782  0AED  3001               	movlw	1
  5783  0AEE  318A  22A5  318A   	fcall	_vExecCmdEndSSP2
  5784                           
  5785                           ;st7032.c: 343:     stStateSSP2.u8CursorPos = 0;
  5786  0AF1  0020               	movlb	0	; select bank0
  5787  0AF2  01DE               	clrf	_stStateSSP2
  5788                           
  5789                           ;st7032.c: 344:     _delay((unsigned long)(((1080))*(16000000/4000000.0)));
  5790  0AF3  3006               	movlw	6
  5791  0AF4  0020               	movlb	0	; select bank0
  5792  0AF5  00AB               	movwf	??_ST7032_vClearDispSSP2
  5793  0AF6  309B               	movlw	155
  5794  0AF7                     u4377:	
  5795  0AF7  0B89               	decfsz	9,f
  5796  0AF8  2AF7               	goto	u4377
  5797  0AF9  0BAB               	decfsz	??_ST7032_vClearDispSSP2,f
  5798  0AFA  2AF7               	goto	u4377
  5799  0AFB  0008               	return
  5800  0AFC                     __end_of_ST7032_vClearDispSSP2:	
  5801                           
  5802                           	psect	text19
  5803  0BC9                     __ptext19:	
  5804 ;; *************** function _ST7032_bSetCursorSSP2 *****************
  5805 ;; Defined at:
  5806 ;;		line 693 in file "st7032.c"
  5807 ;; Parameters:    Size  Location     Type
  5808 ;;  u8RowNo         1    wreg     unsigned char 
  5809 ;;  u8ColNo         1   61[BANK0 ] unsigned char 
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;  u8RowNo         1    2[BANK1 ] unsigned char 
  5812 ;;  u8Addr          1    3[BANK1 ] unsigned char 
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  1    wreg      unsigned char 
  5815 ;; Registers used:
  5816 ;;		wreg, status,2, status,0, pclath, cstack
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5822 ;;      Params:         0       1       0       0       0       0
  5823 ;;      Locals:         0       0       2       0       0       0
  5824 ;;      Temps:          0       0       2       0       0       0
  5825 ;;      Totals:         0       1       4       0       0       0
  5826 ;;Total ram usage:        5 bytes
  5827 ;; Hardware stack levels used:    1
  5828 ;; Hardware stack levels required when called:    9
  5829 ;; This function calls:
  5830 ;;		___bmul
  5831 ;;		_bSetCursorSSP2
  5832 ;; This function is called by:
  5833 ;;		_ssp2_vLCDTest01
  5834 ;;		_ssp2_vLCDTest02
  5835 ;;		_ssp2_vLCDTest03
  5836 ;;		_ssp2_vLCDTest04
  5837 ;;		_ssp2_vI2CTest01
  5838 ;;		_ssp2_vI2CTest02
  5839 ;;		_ssp2_vI2CTest03
  5840 ;;		_ssp2_vI2CTest04
  5841 ;;		_ssp2_vKeypadTest01
  5842 ;;		_ssp2_vKeypadTest02
  5843 ;;		_ssp2_vKeypadTest03
  5844 ;;		_ssp2_vKeypadTest04
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           
  5849                           ;psect for function _ST7032_bSetCursorSSP2
  5850  0BC9                     _ST7032_bSetCursorSSP2:	
  5851                           
  5852                           ;incstack = 0
  5853                           ; Regs used in _ST7032_bSetCursorSSP2: [wreg+status,2+status,0+pclath+cstack]
  5854                           ;ST7032_bSetCursorSSP2@u8RowNo stored from wreg
  5855  0BC9  0021               	movlb	1	; select bank1
  5856  0BCA  00A2               	movwf	ST7032_bSetCursorSSP2@u8RowNo^(0+128)
  5857                           
  5858                           ;st7032.c: 695:     if (u8RowNo > (1) || u8ColNo > (39)) {
  5859  0BCB  3002               	movlw	2
  5860  0BCC  0222               	subwf	ST7032_bSetCursorSSP2@u8RowNo^(0+128),w
  5861  0BCD  1803               	skipnc
  5862  0BCE  2BD4               	goto	l5572
  5863  0BCF  3028               	movlw	40
  5864  0BD0  0020               	movlb	0	; select bank0
  5865  0BD1  025D               	subwf	ST7032_bSetCursorSSP2@u8ColNo,w
  5866  0BD2  1C03               	skipc
  5867  0BD3  2BD6               	goto	l5576
  5868  0BD4                     l5572:	
  5869                           
  5870                           ;st7032.c: 696:         return (0);
  5871  0BD4  3000               	movlw	0
  5872  0BD5  0008               	return
  5873  0BD6                     l5576:	
  5874                           
  5875                           ;st7032.c: 699:     unsigned char u8Addr = (u8RowNo * 40) + u8ColNo;
  5876  0BD6  3028               	movlw	40
  5877  0BD7  0021               	movlb	1	; select bank1
  5878  0BD8  00A0               	movwf	??_ST7032_bSetCursorSSP2^(0+128)
  5879  0BD9  0820               	movf	??_ST7032_bSetCursorSSP2^(0+128),w
  5880  0BDA  0020               	movlb	0	; select bank0
  5881  0BDB  00A9               	movwf	___bmul@multiplicand
  5882  0BDC  0021               	movlb	1	; select bank1
  5883  0BDD  0822               	movf	ST7032_bSetCursorSSP2@u8RowNo^(0+128),w
  5884  0BDE  318A  22D5  318B   	fcall	___bmul
  5885  0BE1  0020               	movlb	0	; select bank0
  5886  0BE2  075D               	addwf	ST7032_bSetCursorSSP2@u8ColNo,w
  5887  0BE3  0021               	movlb	1	; select bank1
  5888  0BE4  00A1               	movwf	(??_ST7032_bSetCursorSSP2+1)^(0+128)
  5889  0BE5  0821               	movf	(??_ST7032_bSetCursorSSP2+1)^(0+128),w
  5890  0BE6  00A3               	movwf	ST7032_bSetCursorSSP2@u8Addr^(0+128)
  5891                           
  5892                           ;st7032.c: 700:     if (u8Addr == stStateSSP2.u8CursorPos) {
  5893  0BE7  0020               	movlb	0	; select bank0
  5894  0BE8  085E               	movf	_stStateSSP2,w
  5895  0BE9  0021               	movlb	1	; select bank1
  5896  0BEA  0623               	xorwf	ST7032_bSetCursorSSP2@u8Addr^(0+128),w
  5897  0BEB  1D03               	skipz
  5898  0BEC  2BEF               	goto	l5584
  5899                           
  5900                           ;st7032.c: 701:         return (1);
  5901  0BED  3001               	movlw	1
  5902  0BEE  0008               	return
  5903  0BEF                     l5584:	
  5904                           
  5905                           ;st7032.c: 704:     return bSetCursorSSP2(u8Addr);
  5906  0BEF  0823               	movf	ST7032_bSetCursorSSP2@u8Addr^(0+128),w
  5907  0BF0  318D  2587         	fcall	_bSetCursorSSP2
  5908  0BF2  0008               	return
  5909  0BF3                     __end_of_ST7032_bSetCursorSSP2:	
  5910                           
  5911                           	psect	text20
  5912  0D87                     __ptext20:	
  5913 ;; *************** function _bSetCursorSSP2 *****************
  5914 ;; Defined at:
  5915 ;;		line 1321 in file "st7032.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;  u8Pos           1    wreg     unsigned char 
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;  u8Pos           1   60[BANK0 ] unsigned char 
  5920 ;;  u8Addr          1   59[BANK0 ] unsigned char 
  5921 ;; Return value:  Size  Location     Type
  5922 ;;                  1    wreg      unsigned char 
  5923 ;; Registers used:
  5924 ;;		wreg, status,2, status,0, pclath, cstack
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : 0/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5930 ;;      Params:         0       0       0       0       0       0
  5931 ;;      Locals:         0       2       0       0       0       0
  5932 ;;      Temps:          0       8       0       0       0       0
  5933 ;;      Totals:         0      10       0       0       0       0
  5934 ;;Total ram usage:       10 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; Hardware stack levels required when called:    8
  5937 ;; This function calls:
  5938 ;;		_I2C_u8MstStartSSP2
  5939 ;;		___awdiv
  5940 ;;		___awmod
  5941 ;;		_vExecCmdEndSSP2
  5942 ;; This function is called by:
  5943 ;;		_ST7032_vClearIconSSP2
  5944 ;;		_ST7032_bSetCursorSSP2
  5945 ;;		_ST7032_bCursorLeftSSP2
  5946 ;;		_ST7032_bCursorRightSSP2
  5947 ;;		_ST7032_vWriteCGRAMSSP2
  5948 ;;		_ST7032_vWriteIconSSP2
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           
  5953                           ;psect for function _bSetCursorSSP2
  5954  0D87                     _bSetCursorSSP2:	
  5955                           
  5956                           ;incstack = 0
  5957                           ; Regs used in _bSetCursorSSP2: [wreg+status,2+status,0+pclath+cstack]
  5958                           ;bSetCursorSSP2@u8Pos stored from wreg
  5959  0D87  0020               	movlb	0	; select bank0
  5960  0D88  00DC               	movwf	bSetCursorSSP2@u8Pos
  5961                           
  5962                           ;st7032.c: 1323:     stStateSSP2.u8CursorPos = u8Pos;
  5963  0D89  085C               	movf	bSetCursorSSP2@u8Pos,w
  5964  0D8A  00D3               	movwf	??_bSetCursorSSP2
  5965  0D8B  0853               	movf	??_bSetCursorSSP2,w
  5966  0D8C  00DE               	movwf	_stStateSSP2
  5967                           
  5968                           ;st7032.c: 1325:     unsigned char u8Addr = (u8Pos / 40) * 0x40 + (u8Pos % 40);
  5969  0D8D  3028               	movlw	40
  5970  0D8E  00CC               	movwf	___awmod@divisor
  5971  0D8F  3000               	movlw	0
  5972  0D90  00CD               	movwf	___awmod@divisor+1
  5973  0D91  085C               	movf	bSetCursorSSP2@u8Pos,w
  5974  0D92  00D3               	movwf	??_bSetCursorSSP2
  5975  0D93  01D4               	clrf	??_bSetCursorSSP2+1
  5976  0D94  0853               	movf	??_bSetCursorSSP2,w
  5977  0D95  00CE               	movwf	___awmod@dividend
  5978  0D96  0854               	movf	??_bSetCursorSSP2+1,w
  5979  0D97  00CF               	movwf	___awmod@dividend+1
  5980  0D98  318D  2541  318D   	fcall	___awmod
  5981  0D9B  0020               	movlb	0	; select bank0
  5982  0D9C  084C               	movf	?___awmod,w
  5983  0D9D  00D5               	movwf	??_bSetCursorSSP2+2
  5984  0D9E  084D               	movf	?___awmod+1,w
  5985  0D9F  00D6               	movwf	??_bSetCursorSSP2+3
  5986  0DA0  3028               	movlw	40
  5987  0DA1  00A9               	movwf	___awdiv@divisor
  5988  0DA2  3000               	movlw	0
  5989  0DA3  00AA               	movwf	___awdiv@divisor+1
  5990  0DA4  085C               	movf	bSetCursorSSP2@u8Pos,w
  5991  0DA5  00D7               	movwf	??_bSetCursorSSP2+4
  5992  0DA6  01D8               	clrf	??_bSetCursorSSP2+5
  5993  0DA7  0857               	movf	??_bSetCursorSSP2+4,w
  5994  0DA8  00AB               	movwf	___awdiv@dividend
  5995  0DA9  0858               	movf	??_bSetCursorSSP2+5,w
  5996  0DAA  00AC               	movwf	___awdiv@dividend+1
  5997  0DAB  318E  26EF  318D   	fcall	___awdiv
  5998  0DAE  0020               	movlb	0	; select bank0
  5999  0DAF  0829               	movf	?___awdiv,w
  6000  0DB0  00D9               	movwf	??_bSetCursorSSP2+6
  6001  0DB1  3005               	movlw	5
  6002  0DB2                     u3255:	
  6003  0DB2  35D9               	lslf	??_bSetCursorSSP2+6,f
  6004  0DB3  3EFF               	addlw	-1
  6005  0DB4  1D03               	skipz
  6006  0DB5  2DB2               	goto	u3255
  6007  0DB6  3559               	lslf	??_bSetCursorSSP2+6,w
  6008  0DB7  0755               	addwf	??_bSetCursorSSP2+2,w
  6009  0DB8  00DA               	movwf	??_bSetCursorSSP2+7
  6010  0DB9  085A               	movf	??_bSetCursorSSP2+7,w
  6011  0DBA  00DB               	movwf	bSetCursorSSP2@u8Addr
  6012                           
  6013                           ;st7032.c: 1327:     I2C_u8MstStartSSP2((0x3E), (0));
  6014  0DBB  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  6015  0DBC  303E               	movlw	62
  6016  0DBD  318B  2313  318D   	fcall	_I2C_u8MstStartSSP2
  6017                           
  6018                           ;st7032.c: 1329:     vExecCmdEndSSP2((0b10000000) | (u8Addr & 0x7F));
  6019  0DC0  0020               	movlb	0	; select bank0
  6020  0DC1  085B               	movf	bSetCursorSSP2@u8Addr,w
  6021  0DC2  397F               	andlw	127
  6022  0DC3  3880               	iorlw	128
  6023  0DC4  318A  22A5  318D   	fcall	_vExecCmdEndSSP2
  6024                           
  6025                           ;st7032.c: 1330:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  6026  0DC7  3022               	movlw	34
  6027  0DC8                     u4387:	
  6028  0DC8  0B89               	decfsz	9,f
  6029  0DC9  2DC8               	goto	u4387
  6030  0DCA  3200               	nop2
  6031                           
  6032                           ;st7032.c: 1332:     return (1);
  6033  0DCB  3001               	movlw	1
  6034  0DCC  0008               	return
  6035  0DCD                     __end_of_bSetCursorSSP2:	
  6036                           
  6037                           	psect	text21
  6038  0D41                     __ptext21:	
  6039 ;; *************** function ___awmod *****************
  6040 ;; Defined at:
  6041 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;  divisor         2   44[BANK0 ] int 
  6044 ;;  dividend        2   46[BANK0 ] int 
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;  sign            1   50[BANK0 ] unsigned char 
  6047 ;;  counter         1   49[BANK0 ] unsigned char 
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  2   44[BANK0 ] int 
  6050 ;; Registers used:
  6051 ;;		wreg, status,2, status,0
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6057 ;;      Params:         0       4       0       0       0       0
  6058 ;;      Locals:         0       2       0       0       0       0
  6059 ;;      Temps:          0       1       0       0       0       0
  6060 ;;      Totals:         0       7       0       0       0       0
  6061 ;;Total ram usage:        7 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    5
  6064 ;; This function calls:
  6065 ;;		Nothing
  6066 ;; This function is called by:
  6067 ;;		_ssp2_vLCDTest01
  6068 ;;		_ST7032_u8GetCursorColNoSSP2
  6069 ;;		_ST7032_vWriteCharSSP2
  6070 ;;		_ST7032_vWriteStringSSP2
  6071 ;;		_ST7032_vWriteDataSSP2
  6072 ;;		_bSetCursorSSP2
  6073 ;;		_ST7032_u8GetCursorColNoSSP1
  6074 ;;		_ST7032_vWriteCharSSP1
  6075 ;;		_ST7032_vWriteStringSSP1
  6076 ;;		_ST7032_vWriteDataSSP1
  6077 ;;		_bSetCursorSSP1
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           
  6082                           ;psect for function ___awmod
  6083  0D41                     ___awmod:	
  6084                           
  6085                           ;incstack = 0
  6086                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6087  0D41  0020               	movlb	0	; select bank0
  6088  0D42  01D2               	clrf	___awmod@sign
  6089  0D43  1FCF               	btfss	___awmod@dividend+1,7
  6090  0D44  2D4C               	goto	l5494
  6091  0D45  09CE               	comf	___awmod@dividend,f
  6092  0D46  09CF               	comf	___awmod@dividend+1,f
  6093  0D47  0ACE               	incf	___awmod@dividend,f
  6094  0D48  1903               	skipnz
  6095  0D49  0ACF               	incf	___awmod@dividend+1,f
  6096  0D4A  01D2               	clrf	___awmod@sign
  6097  0D4B  0AD2               	incf	___awmod@sign,f
  6098  0D4C                     l5494:	
  6099  0D4C  1FCD               	btfss	___awmod@divisor+1,7
  6100  0D4D  2D53               	goto	l5498
  6101  0D4E  09CC               	comf	___awmod@divisor,f
  6102  0D4F  09CD               	comf	___awmod@divisor+1,f
  6103  0D50  0ACC               	incf	___awmod@divisor,f
  6104  0D51  1903               	skipnz
  6105  0D52  0ACD               	incf	___awmod@divisor+1,f
  6106  0D53                     l5498:	
  6107  0D53  084C               	movf	___awmod@divisor,w
  6108  0D54  044D               	iorwf	___awmod@divisor+1,w
  6109  0D55  1903               	btfsc	3,2
  6110  0D56  2D7A               	goto	l5516
  6111  0D57  01D1               	clrf	___awmod@counter
  6112  0D58  0AD1               	incf	___awmod@counter,f
  6113  0D59                     l5506:	
  6114  0D59  1BCD               	btfsc	___awmod@divisor+1,7
  6115  0D5A  2D65               	goto	l5508
  6116  0D5B  3001               	movlw	1
  6117  0D5C                     u3195:	
  6118  0D5C  35CC               	lslf	___awmod@divisor,f
  6119  0D5D  0DCD               	rlf	___awmod@divisor+1,f
  6120  0D5E  0B89               	decfsz	9,f
  6121  0D5F  2D5C               	goto	u3195
  6122  0D60  3001               	movlw	1
  6123  0D61  00D0               	movwf	??___awmod
  6124  0D62  0850               	movf	??___awmod,w
  6125  0D63  07D1               	addwf	___awmod@counter,f
  6126  0D64  2D59               	goto	l5506
  6127  0D65                     l5508:	
  6128  0D65  084D               	movf	___awmod@divisor+1,w
  6129  0D66  024F               	subwf	___awmod@dividend+1,w
  6130  0D67  1D03               	skipz
  6131  0D68  2D6B               	goto	u3215
  6132  0D69  084C               	movf	___awmod@divisor,w
  6133  0D6A  024E               	subwf	___awmod@dividend,w
  6134  0D6B                     u3215:	
  6135  0D6B  1C03               	skipc
  6136  0D6C  2D71               	goto	l5512
  6137  0D6D  084C               	movf	___awmod@divisor,w
  6138  0D6E  02CE               	subwf	___awmod@dividend,f
  6139  0D6F  084D               	movf	___awmod@divisor+1,w
  6140  0D70  3BCF               	subwfb	___awmod@dividend+1,f
  6141  0D71                     l5512:	
  6142  0D71  3001               	movlw	1
  6143  0D72                     u3225:	
  6144  0D72  36CD               	lsrf	___awmod@divisor+1,f
  6145  0D73  0CCC               	rrf	___awmod@divisor,f
  6146  0D74  0B89               	decfsz	9,f
  6147  0D75  2D72               	goto	u3225
  6148  0D76  3001               	movlw	1
  6149  0D77  02D1               	subwf	___awmod@counter,f
  6150  0D78  1D03               	btfss	3,2
  6151  0D79  2D65               	goto	l5508
  6152  0D7A                     l5516:	
  6153  0D7A  0852               	movf	___awmod@sign,w
  6154  0D7B  1903               	btfsc	3,2
  6155  0D7C  2D82               	goto	l5520
  6156  0D7D  09CE               	comf	___awmod@dividend,f
  6157  0D7E  09CF               	comf	___awmod@dividend+1,f
  6158  0D7F  0ACE               	incf	___awmod@dividend,f
  6159  0D80  1903               	skipnz
  6160  0D81  0ACF               	incf	___awmod@dividend+1,f
  6161  0D82                     l5520:	
  6162  0D82  084F               	movf	___awmod@dividend+1,w
  6163  0D83  00CD               	movwf	?___awmod+1
  6164  0D84  084E               	movf	___awmod@dividend,w
  6165  0D85  00CC               	movwf	?___awmod
  6166  0D86  0008               	return
  6167  0D87                     __end_of___awmod:	
  6168                           
  6169                           	psect	text22
  6170  0EEF                     __ptext22:	
  6171 ;; *************** function ___awdiv *****************
  6172 ;; Defined at:
  6173 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;  divisor         2    9[BANK0 ] int 
  6176 ;;  dividend        2   11[BANK0 ] int 
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;  quotient        2   16[BANK0 ] int 
  6179 ;;  sign            1   15[BANK0 ] unsigned char 
  6180 ;;  counter         1   14[BANK0 ] unsigned char 
  6181 ;; Return value:  Size  Location     Type
  6182 ;;                  2    9[BANK0 ] int 
  6183 ;; Registers used:
  6184 ;;		wreg, status,2, status,0
  6185 ;; Tracked objects:
  6186 ;;		On entry : 0/0
  6187 ;;		On exit  : 0/0
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6190 ;;      Params:         0       4       0       0       0       0
  6191 ;;      Locals:         0       4       0       0       0       0
  6192 ;;      Temps:          0       1       0       0       0       0
  6193 ;;      Totals:         0       9       0       0       0       0
  6194 ;;Total ram usage:        9 bytes
  6195 ;; Hardware stack levels used:    1
  6196 ;; Hardware stack levels required when called:    5
  6197 ;; This function calls:
  6198 ;;		Nothing
  6199 ;; This function is called by:
  6200 ;;		_ST7032_u8GetCursorRowNoSSP2
  6201 ;;		_bSetCursorSSP2
  6202 ;;		_ssp2_vI2CTest01
  6203 ;;		_ssp2_vKeypadTest01
  6204 ;;		_ST7032_u8GetCursorRowNoSSP1
  6205 ;;		_bSetCursorSSP1
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           
  6210                           ;psect for function ___awdiv
  6211  0EEF                     ___awdiv:	
  6212                           
  6213                           ;incstack = 0
  6214                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6215  0EEF  0020               	movlb	0	; select bank0
  6216  0EF0  01AF               	clrf	___awdiv@sign
  6217  0EF1  1FAA               	btfss	___awdiv@divisor+1,7
  6218  0EF2  2EFA               	goto	l5450
  6219  0EF3  09A9               	comf	___awdiv@divisor,f
  6220  0EF4  09AA               	comf	___awdiv@divisor+1,f
  6221  0EF5  0AA9               	incf	___awdiv@divisor,f
  6222  0EF6  1903               	skipnz
  6223  0EF7  0AAA               	incf	___awdiv@divisor+1,f
  6224  0EF8  01AF               	clrf	___awdiv@sign
  6225  0EF9  0AAF               	incf	___awdiv@sign,f
  6226  0EFA                     l5450:	
  6227  0EFA  1FAC               	btfss	___awdiv@dividend+1,7
  6228  0EFB  2F05               	goto	l5456
  6229  0EFC  09AB               	comf	___awdiv@dividend,f
  6230  0EFD  09AC               	comf	___awdiv@dividend+1,f
  6231  0EFE  0AAB               	incf	___awdiv@dividend,f
  6232  0EFF  1903               	skipnz
  6233  0F00  0AAC               	incf	___awdiv@dividend+1,f
  6234  0F01  3001               	movlw	1
  6235  0F02  00AD               	movwf	??___awdiv
  6236  0F03  082D               	movf	??___awdiv,w
  6237  0F04  06AF               	xorwf	___awdiv@sign,f
  6238  0F05                     l5456:	
  6239  0F05  01B0               	clrf	___awdiv@quotient
  6240  0F06  01B1               	clrf	___awdiv@quotient+1
  6241  0F07  0829               	movf	___awdiv@divisor,w
  6242  0F08  042A               	iorwf	___awdiv@divisor+1,w
  6243  0F09  1903               	btfsc	3,2
  6244  0F0A  2F34               	goto	l5478
  6245  0F0B  01AE               	clrf	___awdiv@counter
  6246  0F0C  0AAE               	incf	___awdiv@counter,f
  6247  0F0D                     l5466:	
  6248  0F0D  1BAA               	btfsc	___awdiv@divisor+1,7
  6249  0F0E  2F19               	goto	l5468
  6250  0F0F  3001               	movlw	1
  6251  0F10                     u3095:	
  6252  0F10  35A9               	lslf	___awdiv@divisor,f
  6253  0F11  0DAA               	rlf	___awdiv@divisor+1,f
  6254  0F12  0B89               	decfsz	9,f
  6255  0F13  2F10               	goto	u3095
  6256  0F14  3001               	movlw	1
  6257  0F15  00AD               	movwf	??___awdiv
  6258  0F16  082D               	movf	??___awdiv,w
  6259  0F17  07AE               	addwf	___awdiv@counter,f
  6260  0F18  2F0D               	goto	l5466
  6261  0F19                     l5468:	
  6262  0F19  3001               	movlw	1
  6263  0F1A                     u3115:	
  6264  0F1A  35B0               	lslf	___awdiv@quotient,f
  6265  0F1B  0DB1               	rlf	___awdiv@quotient+1,f
  6266  0F1C  0B89               	decfsz	9,f
  6267  0F1D  2F1A               	goto	u3115
  6268  0F1E  082A               	movf	___awdiv@divisor+1,w
  6269  0F1F  022C               	subwf	___awdiv@dividend+1,w
  6270  0F20  1D03               	skipz
  6271  0F21  2F24               	goto	u3125
  6272  0F22  0829               	movf	___awdiv@divisor,w
  6273  0F23  022B               	subwf	___awdiv@dividend,w
  6274  0F24                     u3125:	
  6275  0F24  1C03               	skipc
  6276  0F25  2F2B               	goto	l5474
  6277  0F26  0829               	movf	___awdiv@divisor,w
  6278  0F27  02AB               	subwf	___awdiv@dividend,f
  6279  0F28  082A               	movf	___awdiv@divisor+1,w
  6280  0F29  3BAC               	subwfb	___awdiv@dividend+1,f
  6281  0F2A  1430               	bsf	___awdiv@quotient,0
  6282  0F2B                     l5474:	
  6283  0F2B  3001               	movlw	1
  6284  0F2C                     u3135:	
  6285  0F2C  36AA               	lsrf	___awdiv@divisor+1,f
  6286  0F2D  0CA9               	rrf	___awdiv@divisor,f
  6287  0F2E  0B89               	decfsz	9,f
  6288  0F2F  2F2C               	goto	u3135
  6289  0F30  3001               	movlw	1
  6290  0F31  02AE               	subwf	___awdiv@counter,f
  6291  0F32  1D03               	btfss	3,2
  6292  0F33  2F19               	goto	l5468
  6293  0F34                     l5478:	
  6294  0F34  082F               	movf	___awdiv@sign,w
  6295  0F35  1903               	btfsc	3,2
  6296  0F36  2F3C               	goto	l5482
  6297  0F37  09B0               	comf	___awdiv@quotient,f
  6298  0F38  09B1               	comf	___awdiv@quotient+1,f
  6299  0F39  0AB0               	incf	___awdiv@quotient,f
  6300  0F3A  1903               	skipnz
  6301  0F3B  0AB1               	incf	___awdiv@quotient+1,f
  6302  0F3C                     l5482:	
  6303  0F3C  0831               	movf	___awdiv@quotient+1,w
  6304  0F3D  00AA               	movwf	?___awdiv+1
  6305  0F3E  0830               	movf	___awdiv@quotient,w
  6306  0F3F  00A9               	movwf	?___awdiv
  6307  0F40  0008               	return
  6308  0F41                     __end_of___awdiv:	
  6309                           
  6310                           	psect	text23
  6311  0AD5                     __ptext23:	
  6312 ;; *************** function ___bmul *****************
  6313 ;; Defined at:
  6314 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
  6315 ;; Parameters:    Size  Location     Type
  6316 ;;  multiplier      1    wreg     unsigned char 
  6317 ;;  multiplicand    1    9[BANK0 ] unsigned char 
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;  multiplier      1   12[BANK0 ] unsigned char 
  6320 ;;  product         1   11[BANK0 ] unsigned char 
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      unsigned char 
  6323 ;; Registers used:
  6324 ;;		wreg, status,2, status,0
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6330 ;;      Params:         0       1       0       0       0       0
  6331 ;;      Locals:         0       2       0       0       0       0
  6332 ;;      Temps:          0       1       0       0       0       0
  6333 ;;      Totals:         0       4       0       0       0       0
  6334 ;;Total ram usage:        4 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    5
  6337 ;; This function calls:
  6338 ;;		Nothing
  6339 ;; This function is called by:
  6340 ;;		_ST7032_bSetCursorSSP2
  6341 ;;		_ST7032_bSetCursorSSP1
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           
  6346                           ;psect for function ___bmul
  6347  0AD5                     ___bmul:	
  6348                           
  6349                           ;incstack = 0
  6350                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6351                           ;___bmul@multiplier stored from wreg
  6352  0AD5  0020               	movlb	0	; select bank0
  6353  0AD6  00AC               	movwf	___bmul@multiplier
  6354  0AD7  01AB               	clrf	___bmul@product
  6355  0AD8                     l5552:	
  6356  0AD8  1C2C               	btfss	___bmul@multiplier,0
  6357  0AD9  2ADE               	goto	l5556
  6358  0ADA  0829               	movf	___bmul@multiplicand,w
  6359  0ADB  00AA               	movwf	??___bmul
  6360  0ADC  082A               	movf	??___bmul,w
  6361  0ADD  07AB               	addwf	___bmul@product,f
  6362  0ADE                     l5556:	
  6363  0ADE  1003               	clrc
  6364  0ADF  0DA9               	rlf	___bmul@multiplicand,f
  6365  0AE0  1003               	clrc
  6366  0AE1  0CAC               	rrf	___bmul@multiplier,f
  6367  0AE2  082C               	movf	___bmul@multiplier,w
  6368  0AE3  1D03               	btfss	3,2
  6369  0AE4  2AD8               	goto	l5552
  6370  0AE5  082B               	movf	___bmul@product,w
  6371  0AE6  0008               	return
  6372  0AE7                     __end_of___bmul:	
  6373                           
  6374                           	psect	text24
  6375  0F95                     __ptext24:	
  6376 ;; *************** function _ST7032_vInitSSP2 *****************
  6377 ;; Defined at:
  6378 ;;		line 179 in file "st7032.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;		None
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;		None
  6383 ;; Return value:  Size  Location     Type
  6384 ;;                  1    wreg      void 
  6385 ;; Registers used:
  6386 ;;		wreg, status,2, status,0, pclath, cstack
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6392 ;;      Params:         0       0       0       0       0       0
  6393 ;;      Locals:         0       0       0       0       0       0
  6394 ;;      Temps:          0       1       0       0       0       0
  6395 ;;      Totals:         0       1       0       0       0       0
  6396 ;;Total ram usage:        1 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; Hardware stack levels required when called:    8
  6399 ;; This function calls:
  6400 ;;		_I2C_u8MstStartSSP2
  6401 ;;		_vExecCmdEndSSP2
  6402 ;;		_vExecCmdSSP2
  6403 ;; This function is called by:
  6404 ;;		_main
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           
  6409                           ;psect for function _ST7032_vInitSSP2
  6410  0F95                     _ST7032_vInitSSP2:	
  6411                           
  6412                           ;st7032.c: 181:     stStateSSP2.u8CursorPos = 0x00;
  6413                           
  6414                           ;incstack = 0
  6415                           ; Regs used in _ST7032_vInitSSP2: [wreg+status,2+status,0+pclath+cstack]
  6416  0F95  0020               	movlb	0	; select bank0
  6417  0F96  01DE               	clrf	_stStateSSP2
  6418                           
  6419                           ;st7032.c: 183:     stStateSSP2.u8Settings = 0xE8;
  6420  0F97  30E8               	movlw	232
  6421  0F98  00AB               	movwf	??_ST7032_vInitSSP2
  6422  0F99  082B               	movf	??_ST7032_vInitSSP2,w
  6423  0F9A  00DF               	movwf	_stStateSSP2+1
  6424                           
  6425                           ;st7032.c: 185:     I2C_u8MstStartSSP2((0x3E), (0));
  6426  0F9B  01A9               	clrf	I2C_u8MstStartSSP2@bReadFlg
  6427  0F9C  303E               	movlw	62
  6428  0F9D  318B  2313  318F   	fcall	_I2C_u8MstStartSSP2
  6429                           
  6430                           ;st7032.c: 187:     vExecCmdSSP2((0b00111001));
  6431  0FA0  3039               	movlw	57
  6432  0FA1  318A  2277  318F   	fcall	_vExecCmdSSP2
  6433                           
  6434                           ;st7032.c: 188:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  6435  0FA4  3022               	movlw	34
  6436  0FA5                     u4397:	
  6437  0FA5  0B89               	decfsz	9,f
  6438  0FA6  2FA5               	goto	u4397
  6439  0FA7  3200               	nop2
  6440                           
  6441                           ;st7032.c: 190:     vExecCmdSSP2((0b00010100));
  6442  0FA8  3014               	movlw	20
  6443  0FA9  318A  2277  318F   	fcall	_vExecCmdSSP2
  6444                           
  6445                           ;st7032.c: 191:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  6446  0FAC  3022               	movlw	34
  6447  0FAD                     u4407:	
  6448  0FAD  0B89               	decfsz	9,f
  6449  0FAE  2FAD               	goto	u4407
  6450  0FAF  3200               	nop2
  6451                           
  6452                           ;st7032.c: 193:     vExecCmdSSP2((0b01110000) | (stStateSSP2.u8Settings & 0x0F));
  6453  0FB0  0020               	movlb	0	; select bank0
  6454  0FB1  085F               	movf	_stStateSSP2+1,w
  6455  0FB2  390F               	andlw	15
  6456  0FB3  3870               	iorlw	112
  6457  0FB4  318A  2277  318F   	fcall	_vExecCmdSSP2
  6458                           
  6459                           ;st7032.c: 194:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  6460  0FB7  3022               	movlw	34
  6461  0FB8                     u4417:	
  6462  0FB8  0B89               	decfsz	9,f
  6463  0FB9  2FB8               	goto	u4417
  6464  0FBA  3200               	nop2
  6465                           
  6466                           ;st7032.c: 196:     vExecCmdSSP2((0b01011000) | (stStateSSP2.u8Settings >> 4));
  6467  0FBB  0020               	movlb	0	; select bank0
  6468  0FBC  085F               	movf	_stStateSSP2+1,w
  6469  0FBD  00AB               	movwf	??_ST7032_vInitSSP2
  6470  0FBE  3004               	movlw	4
  6471  0FBF                     u3445:	
  6472  0FBF  36AB               	lsrf	??_ST7032_vInitSSP2,f
  6473  0FC0  0B89               	decfsz	9,f
  6474  0FC1  2FBF               	goto	u3445
  6475  0FC2  082B               	movf	??_ST7032_vInitSSP2,w
  6476  0FC3  3858               	iorlw	88
  6477  0FC4  318A  2277  318F   	fcall	_vExecCmdSSP2
  6478                           
  6479                           ;st7032.c: 197:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  6480  0FC7  3022               	movlw	34
  6481  0FC8                     u4427:	
  6482  0FC8  0B89               	decfsz	9,f
  6483  0FC9  2FC8               	goto	u4427
  6484  0FCA  3200               	nop2
  6485                           
  6486                           ;st7032.c: 199:     vExecCmdSSP2((0b01101100));
  6487  0FCB  306C               	movlw	108
  6488  0FCC  318A  2277  318F   	fcall	_vExecCmdSSP2
  6489                           
  6490                           ;st7032.c: 200:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  6491  0FCF  3022               	movlw	34
  6492  0FD0                     u4437:	
  6493  0FD0  0B89               	decfsz	9,f
  6494  0FD1  2FD0               	goto	u4437
  6495  0FD2  3200               	nop2
  6496                           
  6497                           ;st7032.c: 202:     vExecCmdSSP2((0b00111000));
  6498  0FD3  3038               	movlw	56
  6499  0FD4  318A  2277  318F   	fcall	_vExecCmdSSP2
  6500                           
  6501                           ;st7032.c: 203:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  6502  0FD7  3022               	movlw	34
  6503  0FD8                     u4447:	
  6504  0FD8  0B89               	decfsz	9,f
  6505  0FD9  2FD8               	goto	u4447
  6506  0FDA  3200               	nop2
  6507                           
  6508                           ;st7032.c: 205:     vExecCmdSSP2((0b00001000) | 0x04);
  6509  0FDB  300C               	movlw	12
  6510  0FDC  318A  2277  318F   	fcall	_vExecCmdSSP2
  6511                           
  6512                           ;st7032.c: 206:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  6513  0FDF  3022               	movlw	34
  6514  0FE0                     u4457:	
  6515  0FE0  0B89               	decfsz	9,f
  6516  0FE1  2FE0               	goto	u4457
  6517  0FE2  3200               	nop2
  6518                           
  6519                           ;st7032.c: 207:     vExecCmdSSP2((0b00000100) | 0x02);
  6520  0FE3  3006               	movlw	6
  6521  0FE4  318A  2277  318F   	fcall	_vExecCmdSSP2
  6522                           
  6523                           ;st7032.c: 208:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  6524  0FE7  3022               	movlw	34
  6525  0FE8                     u4467:	
  6526  0FE8  0B89               	decfsz	9,f
  6527  0FE9  2FE8               	goto	u4467
  6528  0FEA  3200               	nop2
  6529                           
  6530                           ;st7032.c: 210:     vExecCmdSSP2((0b10000000));
  6531  0FEB  3080               	movlw	128
  6532  0FEC  318A  2277  318F   	fcall	_vExecCmdSSP2
  6533                           
  6534                           ;st7032.c: 211:     _delay((unsigned long)(((26))*(16000000/4000000.0)));
  6535  0FEF  3022               	movlw	34
  6536  0FF0                     u4477:	
  6537  0FF0  0B89               	decfsz	9,f
  6538  0FF1  2FF0               	goto	u4477
  6539  0FF2  3200               	nop2
  6540                           
  6541                           ;st7032.c: 213:     vExecCmdEndSSP2((0b00000001));
  6542  0FF3  3001               	movlw	1
  6543  0FF4  318A  22A5  318F   	fcall	_vExecCmdEndSSP2
  6544                           
  6545                           ;st7032.c: 214:     _delay((unsigned long)(((1080))*(16000000/4000000.0)));
  6546  0FF7  3006               	movlw	6
  6547  0FF8  0020               	movlb	0	; select bank0
  6548  0FF9  00AB               	movwf	??_ST7032_vInitSSP2
  6549  0FFA  309B               	movlw	155
  6550  0FFB                     u4487:	
  6551  0FFB  0B89               	decfsz	9,f
  6552  0FFC  2FFB               	goto	u4487
  6553  0FFD  0BAB               	decfsz	??_ST7032_vInitSSP2,f
  6554  0FFE  2FFB               	goto	u4487
  6555  0FFF  0008               	return
  6556  1000                     __end_of_ST7032_vInitSSP2:	
  6557                           
  6558                           	psect	text25
  6559  0A77                     __ptext25:	
  6560 ;; *************** function _vExecCmdSSP2 *****************
  6561 ;; Defined at:
  6562 ;;		line 1216 in file "st7032.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;  u8Cmd           1    wreg     unsigned char 
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;  u8Cmd           1   10[BANK0 ] unsigned char 
  6567 ;; Return value:  Size  Location     Type
  6568 ;;                  1    wreg      void 
  6569 ;; Registers used:
  6570 ;;		wreg, status,2, status,0, pclath, cstack
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6576 ;;      Params:         0       0       0       0       0       0
  6577 ;;      Locals:         0       1       0       0       0       0
  6578 ;;      Temps:          0       0       0       0       0       0
  6579 ;;      Totals:         0       1       0       0       0       0
  6580 ;;Total ram usage:        1 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    7
  6583 ;; This function calls:
  6584 ;;		_I2C_u8MstTxSSP2
  6585 ;; This function is called by:
  6586 ;;		_ST7032_vInitSSP2
  6587 ;;		_ST7032_vClearIconSSP2
  6588 ;;		_ST7032_vWriteCGRAMSSP2
  6589 ;;		_ST7032_vWriteIconSSP2
  6590 ;;		_ST7032_vSetContrastSSP2
  6591 ;;		_ST7032_vDispIconSSP2
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           
  6596                           ;psect for function _vExecCmdSSP2
  6597  0A77                     _vExecCmdSSP2:	
  6598                           
  6599                           ;incstack = 0
  6600                           ; Regs used in _vExecCmdSSP2: [wreg+status,2+status,0+pclath+cstack]
  6601                           ;vExecCmdSSP2@u8Cmd stored from wreg
  6602  0A77  0020               	movlb	0	; select bank0
  6603  0A78  00AA               	movwf	vExecCmdSSP2@u8Cmd
  6604                           
  6605                           ;st7032.c: 1218:     I2C_u8MstTxSSP2((0x00) | 0x80);
  6606  0A79  3080               	movlw	128
  6607  0A7A  318A  226D  318A   	fcall	_I2C_u8MstTxSSP2
  6608                           
  6609                           ;st7032.c: 1220:     I2C_u8MstTxSSP2(u8Cmd);
  6610  0A7D  0020               	movlb	0	; select bank0
  6611  0A7E  082A               	movf	vExecCmdSSP2@u8Cmd,w
  6612  0A7F  318A  226D         	fcall	_I2C_u8MstTxSSP2
  6613  0A81  0008               	return
  6614  0A82                     __end_of_vExecCmdSSP2:	
  6615                           
  6616                           	psect	text26
  6617  0AA5                     __ptext26:	
  6618 ;; *************** function _vExecCmdEndSSP2 *****************
  6619 ;; Defined at:
  6620 ;;		line 1264 in file "st7032.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;  u8Cmd           1    wreg     unsigned char 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;  u8Cmd           1   10[BANK0 ] unsigned char 
  6625 ;; Return value:  Size  Location     Type
  6626 ;;                  1    wreg      void 
  6627 ;; Registers used:
  6628 ;;		wreg, status,2, status,0, pclath, cstack
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6634 ;;      Params:         0       0       0       0       0       0
  6635 ;;      Locals:         0       1       0       0       0       0
  6636 ;;      Temps:          0       0       0       0       0       0
  6637 ;;      Totals:         0       1       0       0       0       0
  6638 ;;Total ram usage:        1 bytes
  6639 ;; Hardware stack levels used:    1
  6640 ;; Hardware stack levels required when called:    7
  6641 ;; This function calls:
  6642 ;;		_I2C_u8MstTxSSP2
  6643 ;;		_I2C_vMstStopSSP2
  6644 ;; This function is called by:
  6645 ;;		_ST7032_vInitSSP2
  6646 ;;		_ST7032_vClearDispSSP2
  6647 ;;		_ST7032_vClearIconSSP2
  6648 ;;		_ST7032_vDispSettingSSP2
  6649 ;;		_bSetCursorSSP2
  6650 ;;		_ST7032_vSetContrastSSP2
  6651 ;; This function uses a non-reentrant model
  6652 ;;
  6653                           
  6654                           
  6655                           ;psect for function _vExecCmdEndSSP2
  6656  0AA5                     _vExecCmdEndSSP2:	
  6657                           
  6658                           ;incstack = 0
  6659                           ; Regs used in _vExecCmdEndSSP2: [wreg+status,2+status,0+pclath+cstack]
  6660                           ;vExecCmdEndSSP2@u8Cmd stored from wreg
  6661  0AA5  0020               	movlb	0	; select bank0
  6662  0AA6  00AA               	movwf	vExecCmdEndSSP2@u8Cmd
  6663                           
  6664                           ;st7032.c: 1266:     I2C_u8MstTxSSP2((0x00));
  6665  0AA7  3000               	movlw	0
  6666  0AA8  318A  226D  318A   	fcall	_I2C_u8MstTxSSP2
  6667                           
  6668                           ;st7032.c: 1268:     I2C_u8MstTxSSP2(u8Cmd);
  6669  0AAB  0020               	movlb	0	; select bank0
  6670  0AAC  082A               	movf	vExecCmdEndSSP2@u8Cmd,w
  6671  0AAD  318A  226D  318A   	fcall	_I2C_u8MstTxSSP2
  6672                           
  6673                           ;st7032.c: 1270:     I2C_vMstStopSSP2();
  6674  0AB0  318A  2256         	fcall	_I2C_vMstStopSSP2
  6675  0AB2  0008               	return
  6676  0AB3                     __end_of_vExecCmdEndSSP2:	
  6677                           
  6678                           	psect	text27
  6679  0A56                     __ptext27:	
  6680 ;; *************** function _I2C_vMstStopSSP2 *****************
  6681 ;; Defined at:
  6682 ;;		line 366 in file "i2cUtil.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;		None
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;		None
  6687 ;; Return value:  Size  Location     Type
  6688 ;;                  1    wreg      void 
  6689 ;; Registers used:
  6690 ;;		wreg, status,2, status,0, pclath, cstack
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6696 ;;      Params:         0       0       0       0       0       0
  6697 ;;      Locals:         0       0       0       0       0       0
  6698 ;;      Temps:          0       0       0       0       0       0
  6699 ;;      Totals:         0       0       0       0       0       0
  6700 ;;Total ram usage:        0 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; Hardware stack levels required when called:    6
  6703 ;; This function calls:
  6704 ;;		_vMasterWaitSSP2
  6705 ;; This function is called by:
  6706 ;;		_ST7032_vClearIconSSP2
  6707 ;;		_ST7032_vWriteCGRAMSSP2
  6708 ;;		_ST7032_vWriteCharSSP2
  6709 ;;		_ST7032_vWriteStringSSP2
  6710 ;;		_ST7032_vWriteDataSSP2
  6711 ;;		_ST7032_vWriteIconSSP2
  6712 ;;		_vExecCmdEndSSP2
  6713 ;;		_ssp2_vI2CTest01
  6714 ;;		_ssp2_vI2CTest02
  6715 ;;		_ssp2_vI2CTest03
  6716 ;;		_ssp2_vI2CTest04
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           
  6721                           ;psect for function _I2C_vMstStopSSP2
  6722  0A56                     _I2C_vMstStopSSP2:	
  6723                           
  6724                           ;i2cUtil.c: 367:     vMasterWaitSSP2();
  6725                           
  6726                           ;incstack = 0
  6727                           ; Regs used in _I2C_vMstStopSSP2: [wreg+status,2+status,0+pclath+cstack]
  6728  0A56  318A  2265         	fcall	_vMasterWaitSSP2
  6729                           
  6730                           ;i2cUtil.c: 368:     bMstStartFlgSSP2 = (0);
  6731  0A58  0021               	movlb	1	; select bank1
  6732  0A59  01D7               	clrf	_bMstStartFlgSSP2^(0+128)
  6733                           
  6734                           ;i2cUtil.c: 369:     SSP2CON2bits.PEN = 0x01;
  6735  0A5A  0024               	movlb	4	; select bank4
  6736  0A5B  151E               	bsf	30,2	;volatile
  6737  0A5C  0008               	return
  6738  0A5D                     __end_of_I2C_vMstStopSSP2:	
  6739                           
  6740                           	psect	text28
  6741  0A6D                     __ptext28:	
  6742 ;; *************** function _I2C_u8MstTxSSP2 *****************
  6743 ;; Defined at:
  6744 ;;		line 411 in file "i2cUtil.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  u8Data          1    wreg     unsigned char 
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;  u8Data          1    9[BANK0 ] unsigned char 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      unsigned char 
  6751 ;; Registers used:
  6752 ;;		wreg, status,2, status,0, pclath, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6758 ;;      Params:         0       0       0       0       0       0
  6759 ;;      Locals:         0       1       0       0       0       0
  6760 ;;      Temps:          0       0       0       0       0       0
  6761 ;;      Totals:         0       1       0       0       0       0
  6762 ;;Total ram usage:        1 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    6
  6765 ;; This function calls:
  6766 ;;		_vMasterWaitSSP2
  6767 ;; This function is called by:
  6768 ;;		_ST7032_vClearIconSSP2
  6769 ;;		_ST7032_vWriteCGRAMSSP2
  6770 ;;		_ST7032_vWriteCharSSP2
  6771 ;;		_ST7032_vWriteStringSSP2
  6772 ;;		_ST7032_vWriteDataSSP2
  6773 ;;		_ST7032_vWriteIconSSP2
  6774 ;;		_vExecCmdSSP2
  6775 ;;		_vExecCmdEndSSP2
  6776 ;;		_ssp2_vI2CTest01
  6777 ;;		_ssp2_vI2CTest02
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           
  6782                           ;psect for function _I2C_u8MstTxSSP2
  6783  0A6D                     _I2C_u8MstTxSSP2:	
  6784                           
  6785                           ;incstack = 0
  6786                           ; Regs used in _I2C_u8MstTxSSP2: [wreg+status,2+status,0+pclath+cstack]
  6787                           ;I2C_u8MstTxSSP2@u8Data stored from wreg
  6788  0A6D  0020               	movlb	0	; select bank0
  6789  0A6E  00A9               	movwf	I2C_u8MstTxSSP2@u8Data
  6790                           
  6791                           ;i2cUtil.c: 412:     SSP2BUF = u8Data;
  6792  0A6F  0829               	movf	I2C_u8MstTxSSP2@u8Data,w
  6793  0A70  0024               	movlb	4	; select bank4
  6794  0A71  0099               	movwf	25	;volatile
  6795                           
  6796                           ;i2cUtil.c: 413:     vMasterWaitSSP2();
  6797  0A72  318A  2265         	fcall	_vMasterWaitSSP2
  6798                           
  6799                           ;i2cUtil.c: 414:     return SSP2CON2bits.ACKSTAT;;	Return value of _I2C_u8MstTxSSP2 is n
      +                          ever used
  6800  0A74  0024               	movlb	4	; select bank4
  6801  0A75  081E               	movf	30,w	;volatile
  6802  0A76  0008               	return
  6803  0A77                     __end_of_I2C_u8MstTxSSP2:	
  6804                           
  6805                           	psect	text29
  6806  0B13                     __ptext29:	
  6807 ;; *************** function _I2C_u8MstStartSSP2 *****************
  6808 ;; Defined at:
  6809 ;;		line 316 in file "i2cUtil.c"
  6810 ;; Parameters:    Size  Location     Type
  6811 ;;  u8Address       1    wreg     unsigned char 
  6812 ;;  bReadFlg        1    9[BANK0 ] unsigned char 
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;  u8Address       1   10[BANK0 ] unsigned char 
  6815 ;; Return value:  Size  Location     Type
  6816 ;;                  1    wreg      unsigned char 
  6817 ;; Registers used:
  6818 ;;		wreg, status,2, status,0, pclath, cstack
  6819 ;; Tracked objects:
  6820 ;;		On entry : 0/0
  6821 ;;		On exit  : 0/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6824 ;;      Params:         0       1       0       0       0       0
  6825 ;;      Locals:         0       1       0       0       0       0
  6826 ;;      Temps:          0       0       0       0       0       0
  6827 ;;      Totals:         0       2       0       0       0       0
  6828 ;;Total ram usage:        2 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    6
  6831 ;; This function calls:
  6832 ;;		_vMasterWaitSSP2
  6833 ;; This function is called by:
  6834 ;;		_ST7032_vInitSSP2
  6835 ;;		_ST7032_vClearDispSSP2
  6836 ;;		_ST7032_vClearIconSSP2
  6837 ;;		_ST7032_vDispSettingSSP2
  6838 ;;		_ST7032_vWriteCGRAMSSP2
  6839 ;;		_ST7032_vWriteCharSSP2
  6840 ;;		_ST7032_vWriteStringSSP2
  6841 ;;		_ST7032_vWriteDataSSP2
  6842 ;;		_ST7032_vWriteIconSSP2
  6843 ;;		_bSetCursorSSP2
  6844 ;;		_ssp2_vI2CTest01
  6845 ;;		_ssp2_vI2CTest02
  6846 ;;		_ssp2_vI2CTest03
  6847 ;;		_ssp2_vI2CTest04
  6848 ;;		_ST7032_vSetContrastSSP2
  6849 ;;		_ST7032_vDispIconSSP2
  6850 ;; This function uses a non-reentrant model
  6851 ;;
  6852                           
  6853                           
  6854                           ;psect for function _I2C_u8MstStartSSP2
  6855  0B13                     _I2C_u8MstStartSSP2:	
  6856                           
  6857                           ;incstack = 0
  6858                           ; Regs used in _I2C_u8MstStartSSP2: [wreg+status,2+status,0+pclath+cstack]
  6859                           ;I2C_u8MstStartSSP2@u8Address stored from wreg
  6860  0B13  0020               	movlb	0	; select bank0
  6861  0B14  00AA               	movwf	I2C_u8MstStartSSP2@u8Address
  6862                           
  6863                           ;i2cUtil.c: 318:     vMasterWaitSSP2();
  6864  0B15  318A  2265  318B   	fcall	_vMasterWaitSSP2
  6865                           
  6866                           ;i2cUtil.c: 319:     if (bMstStartFlgSSP2 == (1)) {
  6867  0B18  0021               	movlb	1	; select bank1
  6868  0B19  0357               	decf	_bMstStartFlgSSP2^(0+128),w
  6869  0B1A  1D03               	btfss	3,2
  6870  0B1B  2B1F               	goto	l359
  6871                           
  6872                           ;i2cUtil.c: 320:         SSP2CON2bits.RSEN = 1;
  6873  0B1C  0024               	movlb	4	; select bank4
  6874  0B1D  149E               	bsf	30,1	;volatile
  6875                           
  6876                           ;i2cUtil.c: 321:     } else {
  6877  0B1E  2B23               	goto	l5432
  6878  0B1F                     l359:	
  6879                           
  6880                           ;i2cUtil.c: 322:         bMstStartFlgSSP2 = (1);
  6881  0B1F  01D7               	clrf	_bMstStartFlgSSP2^(0+128)
  6882  0B20  0AD7               	incf	_bMstStartFlgSSP2^(0+128),f
  6883                           
  6884                           ;i2cUtil.c: 323:         SSP2CON2bits.SEN = 1;
  6885  0B21  0024               	movlb	4	; select bank4
  6886  0B22  141E               	bsf	30,0	;volatile
  6887  0B23                     l5432:	
  6888                           
  6889                           ;i2cUtil.c: 325:     vMasterWaitSSP2();
  6890  0B23  318A  2265  318B   	fcall	_vMasterWaitSSP2
  6891                           
  6892                           ;i2cUtil.c: 326:     SSP2BUF = (u8Address << 1) | (bReadFlg & 0x01);
  6893  0B26  0020               	movlb	0	; select bank0
  6894  0B27  0C29               	rrf	I2C_u8MstStartSSP2@bReadFlg,w
  6895  0B28  0D2A               	rlf	I2C_u8MstStartSSP2@u8Address,w
  6896  0B29  0024               	movlb	4	; select bank4
  6897  0B2A  0099               	movwf	25	;volatile
  6898                           
  6899                           ;i2cUtil.c: 327:     vMasterWaitSSP2();
  6900  0B2B  318A  2265         	fcall	_vMasterWaitSSP2
  6901                           
  6902                           ;i2cUtil.c: 328:     return SSP2CON2bits.ACKSTAT;;	Return value of _I2C_u8MstStartSSP2 i
      +                          s never used
  6903  0B2D  0024               	movlb	4	; select bank4
  6904  0B2E  081E               	movf	30,w	;volatile
  6905  0B2F  0008               	return
  6906  0B30                     __end_of_I2C_u8MstStartSSP2:	
  6907                           
  6908                           	psect	text30
  6909  0A65                     __ptext30:	
  6910 ;; *************** function _vMasterWaitSSP2 *****************
  6911 ;; Defined at:
  6912 ;;		line 580 in file "i2cUtil.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;		None
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;		None
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      void 
  6919 ;; Registers used:
  6920 ;;		wreg, status,2
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6926 ;;      Params:         0       0       0       0       0       0
  6927 ;;      Locals:         0       0       0       0       0       0
  6928 ;;      Temps:          0       0       0       0       0       0
  6929 ;;      Totals:         0       0       0       0       0       0
  6930 ;;Total ram usage:        0 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    5
  6933 ;; This function calls:
  6934 ;;		Nothing
  6935 ;; This function is called by:
  6936 ;;		_I2C_u8MstStartSSP2
  6937 ;;		_I2C_vMstStopSSP2
  6938 ;;		_I2C_u8MstTxSSP2
  6939 ;;		_I2C_u8MstRxSSP2
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           
  6944                           ;psect for function _vMasterWaitSSP2
  6945  0A65                     _vMasterWaitSSP2:	
  6946  0A65                     l398:	
  6947                           ;i2cUtil.c: 581:     while ((SSP2STAT & 0x04) || (SSP2CON2 & 0x1F));
  6948                           
  6949                           ;incstack = 0
  6950                           ; Regs used in _vMasterWaitSSP2: [wreg+status,2]
  6951                           
  6952  0A65  0024               	movlb	4	; select bank4
  6953  0A66  191C               	btfsc	28,2	;volatile
  6954  0A67  2A65               	goto	l398
  6955  0A68  081E               	movf	30,w	;volatile
  6956  0A69  391F               	andlw	31
  6957  0A6A  1903               	btfsc	3,2
  6958  0A6B  0008               	return
  6959  0A6C  2A65               	goto	l398
  6960  0A6D                     __end_of_vMasterWaitSSP2:	
  6961                           
  6962                           	psect	text31
  6963  0C51                     __ptext31:	
  6964 ;; *************** function _KEYPAD_vInit *****************
  6965 ;; Defined at:
  6966 ;;		line 83 in file "keypad.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;  spStatus        1    wreg     PTR struct .
  6969 ;;		 -> main@keypadSts(27), 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;  spStatus        1   20[BANK0 ] PTR struct .
  6972 ;;		 -> main@keypadSts(27), 
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  1    wreg      void 
  6975 ;; Registers used:
  6976 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6982 ;;      Params:         0       0       0       0       0       0
  6983 ;;      Locals:         0       1       0       0       0       0
  6984 ;;      Temps:          0       1       0       0       0       0
  6985 ;;      Totals:         0       2       0       0       0       0
  6986 ;;Total ram usage:        2 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:    6
  6989 ;; This function calls:
  6990 ;;		_memset
  6991 ;; This function is called by:
  6992 ;;		_main
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           
  6997                           ;psect for function _KEYPAD_vInit
  6998  0C51                     _KEYPAD_vInit:	
  6999                           
  7000                           ;incstack = 0
  7001                           ; Regs used in _KEYPAD_vInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7002                           ;KEYPAD_vInit@spStatus stored from wreg
  7003  0C51  0020               	movlb	0	; select bank0
  7004  0C52  00B4               	movwf	KEYPAD_vInit@spStatus
  7005                           
  7006                           ;keypad.c: 84:     if (spStatus == ((void*)0)) {
  7007  0C53  0834               	movf	KEYPAD_vInit@spStatus,w
  7008  0C54  1903               	btfsc	3,2
  7009  0C55  0008               	return
  7010                           
  7011                           ;keypad.c: 88:     spStatus->u8BeforeKeyNo = 0;
  7012  0C56  0834               	movf	KEYPAD_vInit@spStatus,w
  7013  0C57  3E11               	addlw	17
  7014  0C58  0086               	movwf	6
  7015  0C59  0187               	clrf	7
  7016  0C5A  0181               	clrf	1
  7017                           
  7018                           ;keypad.c: 89:     spStatus->u16KeyChkCnt = 0;
  7019  0C5B  0834               	movf	KEYPAD_vInit@spStatus,w
  7020  0C5C  3E12               	addlw	18
  7021  0C5D  0086               	movwf	6
  7022  0C5E  0187               	clrf	7
  7023  0C5F  3000               	movlw	0
  7024  0C60  3FC0               	movwi [0]fsr1
  7025  0C61  3FC1               	movwi [1]fsr1
  7026                           
  7027                           ;keypad.c: 91:     spStatus->u8BuffSize = 0;
  7028  0C62  0834               	movf	KEYPAD_vInit@spStatus,w
  7029  0C63  3E18               	addlw	24
  7030  0C64  0086               	movwf	6
  7031  0C65  0187               	clrf	7
  7032  0C66  0181               	clrf	1
  7033                           
  7034                           ;keypad.c: 92:     spStatus->u8BuffBeginIdx = 0;
  7035  0C67  0834               	movf	KEYPAD_vInit@spStatus,w
  7036  0C68  3E19               	addlw	25
  7037  0C69  0086               	movwf	6
  7038  0C6A  0187               	clrf	7
  7039  0C6B  0181               	clrf	1
  7040                           
  7041                           ;keypad.c: 93:     spStatus->u8BuffEndIdx = (4) - 1;
  7042  0C6C  3003               	movlw	3
  7043  0C6D  00B3               	movwf	??_KEYPAD_vInit
  7044  0C6E  0834               	movf	KEYPAD_vInit@spStatus,w
  7045  0C6F  3E1A               	addlw	26
  7046  0C70  0086               	movwf	6
  7047  0C71  0187               	clrf	7
  7048  0C72  0833               	movf	??_KEYPAD_vInit,w
  7049  0C73  0081               	movwf	1
  7050                           
  7051                           ;keypad.c: 95:     memset(spStatus->u8KeyBuffer, 0x00, (4));
  7052  0C74  3000               	movlw	0
  7053  0C75  00A9               	movwf	memset@c
  7054  0C76  00AA               	movwf	memset@c+1
  7055  0C77  3004               	movlw	4
  7056  0C78  00AB               	movwf	memset@n
  7057  0C79  3000               	movlw	0
  7058  0C7A  00AC               	movwf	memset@n+1
  7059  0C7B  0834               	movf	KEYPAD_vInit@spStatus,w
  7060  0C7C  3E14               	addlw	20
  7061  0C7D  3186  265E         	fcall	_memset
  7062                           
  7063                           ;keypad.c: 97:     spKEYPAD_status = spStatus;
  7064  0C7F  0020               	movlb	0	; select bank0
  7065  0C80  0834               	movf	KEYPAD_vInit@spStatus,w
  7066  0C81  00B3               	movwf	??_KEYPAD_vInit
  7067  0C82  0833               	movf	??_KEYPAD_vInit,w
  7068  0C83  00E3               	movwf	_spKEYPAD_status
  7069  0C84  0008               	return
  7070  0C85                     __end_of_KEYPAD_vInit:	
  7071                           
  7072                           	psect	text32
  7073  065E                     __ptext32:	
  7074 ;; *************** function _memset *****************
  7075 ;; Defined at:
  7076 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memset.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;  dest            1    wreg     PTR void 
  7079 ;;		 -> main@keypadSts(27), 
  7080 ;;  c               2    9[BANK0 ] int 
  7081 ;;  n               2   11[BANK0 ] unsigned int 
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;  dest            1   17[BANK0 ] PTR void 
  7084 ;;		 -> main@keypadSts(27), 
  7085 ;;  k               2   15[BANK0 ] unsigned int 
  7086 ;;  s               1   18[BANK0 ] PTR unsigned char 
  7087 ;;		 -> main@keypadSts(27), 
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  1    wreg      PTR void 
  7090 ;; Registers used:
  7091 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7097 ;;      Params:         0       4       0       0       0       0
  7098 ;;      Locals:         0       4       0       0       0       0
  7099 ;;      Temps:          0       2       0       0       0       0
  7100 ;;      Totals:         0      10       0       0       0       0
  7101 ;;Total ram usage:       10 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    5
  7104 ;; This function calls:
  7105 ;;		Nothing
  7106 ;; This function is called by:
  7107 ;;		_KEYPAD_vInit
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           
  7112                           ;psect for function _memset
  7113  065E                     _memset:	
  7114                           
  7115                           ;incstack = 0
  7116                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7117                           ;memset@dest stored from wreg
  7118  065E  0020               	movlb	0	; select bank0
  7119  065F  00B1               	movwf	memset@dest
  7120  0660  0831               	movf	memset@dest,w
  7121  0661  00AD               	movwf	??_memset
  7122  0662  082D               	movf	??_memset,w
  7123  0663  00B2               	movwf	memset@s
  7124  0664  082B               	movf	memset@n,w
  7125  0665  042C               	iorwf	memset@n+1,w
  7126  0666  1903               	btfsc	3,2
  7127  0667  0008               	return
  7128  0668  0829               	movf	memset@c,w
  7129  0669  00AD               	movwf	??_memset
  7130  066A  0832               	movf	memset@s,w
  7131  066B  0086               	movwf	6
  7132  066C  0187               	clrf	7
  7133  066D  082D               	movf	??_memset,w
  7134  066E  0081               	movwf	1
  7135  066F  0829               	movf	memset@c,w
  7136  0670  00AD               	movwf	??_memset
  7137  0671  082B               	movf	memset@n,w
  7138  0672  0732               	addwf	memset@s,w
  7139  0673  00AE               	movwf	??_memset+1
  7140  0674  082E               	movf	??_memset+1,w
  7141  0675  3EFF               	addlw	255
  7142  0676  0086               	movwf	6
  7143  0677  0187               	clrf	7
  7144  0678  082D               	movf	??_memset,w
  7145  0679  0081               	movwf	1
  7146  067A  3000               	movlw	0
  7147  067B  022C               	subwf	memset@n+1,w
  7148  067C  3003               	movlw	3
  7149  067D  1903               	skipnz
  7150  067E  022B               	subwf	memset@n,w
  7151  067F  1C03               	btfss	3,0
  7152  0680  0008               	return
  7153  0681  0829               	movf	memset@c,w
  7154  0682  00AD               	movwf	??_memset
  7155  0683  0A32               	incf	memset@s,w
  7156  0684  0086               	movwf	6
  7157  0685  0187               	clrf	7
  7158  0686  082D               	movf	??_memset,w
  7159  0687  0081               	movwf	1
  7160  0688  0829               	movf	memset@c,w
  7161  0689  00AD               	movwf	??_memset
  7162  068A  0832               	movf	memset@s,w
  7163  068B  3E02               	addlw	2
  7164  068C  0086               	movwf	6
  7165  068D  0187               	clrf	7
  7166  068E  082D               	movf	??_memset,w
  7167  068F  0081               	movwf	1
  7168  0690  0829               	movf	memset@c,w
  7169  0691  00AD               	movwf	??_memset
  7170  0692  082B               	movf	memset@n,w
  7171  0693  0732               	addwf	memset@s,w
  7172  0694  00AE               	movwf	??_memset+1
  7173  0695  082E               	movf	??_memset+1,w
  7174  0696  3EFE               	addlw	254
  7175  0697  0086               	movwf	6
  7176  0698  0187               	clrf	7
  7177  0699  082D               	movf	??_memset,w
  7178  069A  0081               	movwf	1
  7179  069B  0829               	movf	memset@c,w
  7180  069C  00AD               	movwf	??_memset
  7181  069D  082B               	movf	memset@n,w
  7182  069E  0732               	addwf	memset@s,w
  7183  069F  00AE               	movwf	??_memset+1
  7184  06A0  082E               	movf	??_memset+1,w
  7185  06A1  3EFD               	addlw	253
  7186  06A2  0086               	movwf	6
  7187  06A3  0187               	clrf	7
  7188  06A4  082D               	movf	??_memset,w
  7189  06A5  0081               	movwf	1
  7190  06A6  3000               	movlw	0
  7191  06A7  022C               	subwf	memset@n+1,w
  7192  06A8  3007               	movlw	7
  7193  06A9  1903               	skipnz
  7194  06AA  022B               	subwf	memset@n,w
  7195  06AB  1C03               	btfss	3,0
  7196  06AC  0008               	return
  7197  06AD  0829               	movf	memset@c,w
  7198  06AE  00AD               	movwf	??_memset
  7199  06AF  0832               	movf	memset@s,w
  7200  06B0  3E03               	addlw	3
  7201  06B1  0086               	movwf	6
  7202  06B2  0187               	clrf	7
  7203  06B3  082D               	movf	??_memset,w
  7204  06B4  0081               	movwf	1
  7205  06B5  0829               	movf	memset@c,w
  7206  06B6  00AD               	movwf	??_memset
  7207  06B7  082B               	movf	memset@n,w
  7208  06B8  0732               	addwf	memset@s,w
  7209  06B9  00AE               	movwf	??_memset+1
  7210  06BA  082E               	movf	??_memset+1,w
  7211  06BB  3EFC               	addlw	252
  7212  06BC  0086               	movwf	6
  7213  06BD  0187               	clrf	7
  7214  06BE  082D               	movf	??_memset,w
  7215  06BF  0081               	movwf	1
  7216  06C0  3000               	movlw	0
  7217  06C1  022C               	subwf	memset@n+1,w
  7218  06C2  3009               	movlw	9
  7219  06C3  1903               	skipnz
  7220  06C4  022B               	subwf	memset@n,w
  7221  06C5  1C03               	btfss	3,0
  7222  06C6  0008               	return
  7223  06C7  0932               	comf	memset@s,w
  7224  06C8  00AD               	movwf	??_memset
  7225  06C9  0933               	comf	memset@s+1,w
  7226  06CA  00AE               	movwf	??_memset+1
  7227  06CB  0AAD               	incf	??_memset,f
  7228  06CC  1903               	skipnz
  7229  06CD  0AAE               	incf	??_memset+1,f
  7230  06CE  3003               	movlw	3
  7231  06CF  052D               	andwf	??_memset,w
  7232  06D0  00AF               	movwf	memset@k
  7233  06D1  3000               	movlw	0
  7234  06D2  052E               	andwf	??_memset+1,w
  7235  06D3  00B0               	movwf	memset@k+1
  7236  06D4  082F               	movf	memset@k,w
  7237  06D5  00AD               	movwf	??_memset
  7238  06D6  082D               	movf	??_memset,w
  7239  06D7  07B2               	addwf	memset@s,f
  7240  06D8  082F               	movf	memset@k,w
  7241  06D9  02AB               	subwf	memset@n,f
  7242  06DA  0830               	movf	memset@k+1,w
  7243  06DB  3BAC               	subwfb	memset@n+1,f
  7244  06DC  30FC               	movlw	252
  7245  06DD  05AB               	andwf	memset@n,f
  7246  06DE  30FF               	movlw	255
  7247  06DF  05AC               	andwf	memset@n+1,f
  7248  06E0                     l3912:	
  7249  06E0  082B               	movf	memset@n,w
  7250  06E1  042C               	iorwf	memset@n+1,w
  7251  06E2  1903               	btfsc	3,2
  7252  06E3  0008               	return
  7253  06E4  0829               	movf	memset@c,w
  7254  06E5  00AD               	movwf	??_memset
  7255  06E6  0832               	movf	memset@s,w
  7256  06E7  0086               	movwf	6
  7257  06E8  0187               	clrf	7
  7258  06E9  082D               	movf	??_memset,w
  7259  06EA  0081               	movwf	1
  7260  06EB  3001               	movlw	1
  7261  06EC  02AB               	subwf	memset@n,f
  7262  06ED  3000               	movlw	0
  7263  06EE  3BAC               	subwfb	memset@n+1,f
  7264  06EF  3001               	movlw	1
  7265  06F0  00AD               	movwf	??_memset
  7266  06F1  082D               	movf	??_memset,w
  7267  06F2  07B2               	addwf	memset@s,f
  7268  06F3  2EE0               	goto	l3912
  7269  06F4                     __end_of_memset:	
  7270                           
  7271                           	psect	text33
  7272  0B9F                     __ptext33:	
  7273 ;; *************** function _I2C_vInitSlaveSSP1 *****************
  7274 ;; Defined at:
  7275 ;;		line 192 in file "i2cUtil.c"
  7276 ;; Parameters:    Size  Location     Type
  7277 ;;  u8Address       1    wreg     unsigned char 
  7278 ;;  eMode           1    9[BANK0 ] enum E2444
  7279 ;;  pvCallback      2   10[BANK0 ] PTR FTN(unsigned char ,u
  7280 ;;		 -> ssp1_vCallback(1), 
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;  u8Address       1   12[BANK0 ] unsigned char 
  7283 ;; Return value:  Size  Location     Type
  7284 ;;                  1    wreg      void 
  7285 ;; Registers used:
  7286 ;;		wreg, status,2, status,0
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7292 ;;      Params:         0       3       0       0       0       0
  7293 ;;      Locals:         0       1       0       0       0       0
  7294 ;;      Temps:          0       0       0       0       0       0
  7295 ;;      Totals:         0       4       0       0       0       0
  7296 ;;Total ram usage:        4 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    5
  7299 ;; This function calls:
  7300 ;;		Nothing
  7301 ;; This function is called by:
  7302 ;;		_main
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           
  7307                           ;psect for function _I2C_vInitSlaveSSP1
  7308  0B9F                     _I2C_vInitSlaveSSP1:	
  7309                           
  7310                           ;incstack = 0
  7311                           ; Regs used in _I2C_vInitSlaveSSP1: [wreg+status,2+status,0]
  7312                           ;I2C_vInitSlaveSSP1@u8Address stored from wreg
  7313  0B9F  0020               	movlb	0	; select bank0
  7314  0BA0  00AC               	movwf	I2C_vInitSlaveSSP1@u8Address
  7315                           
  7316                           ;i2cUtil.c: 192: extern void I2C_vInitSlaveSSP1(unsigned char u8Address, enum I2C_SlaveM
      +                          ode eMode,;i2cUtil.c: 193:                             void (*pvCallback)(unsigned char 
      +                          u8BusNo, unsigned char u8EvtType)) {;i2cUtil.c: 195:     if (pvCallback != ((void*)0)) {
  7317  0BA1  082A               	movf	I2C_vInitSlaveSSP1@pvCallback,w
  7318  0BA2  042B               	iorwf	I2C_vInitSlaveSSP1@pvCallback+1,w
  7319  0BA3  1903               	btfsc	3,2
  7320  0BA4  2BAC               	goto	l3918
  7321                           
  7322                           ;i2cUtil.c: 196:         pvSSP1Func = pvCallback;
  7323  0BA5  082B               	movf	I2C_vInitSlaveSSP1@pvCallback+1,w
  7324  0BA6  0021               	movlb	1	; select bank1
  7325  0BA7  00D6               	movwf	(_pvSSP1Func+1)^(0+128)
  7326  0BA8  0020               	movlb	0	; select bank0
  7327  0BA9  082A               	movf	I2C_vInitSlaveSSP1@pvCallback,w
  7328  0BAA  0021               	movlb	1	; select bank1
  7329  0BAB  00D5               	movwf	_pvSSP1Func^(0+128)
  7330  0BAC                     l3918:	
  7331                           
  7332                           ;i2cUtil.c: 199:     if (eMode == I2C_SLAVE_STD) {
  7333  0BAC  0020               	movlb	0	; select bank0
  7334  0BAD  0829               	movf	I2C_vInitSlaveSSP1@eMode,w
  7335  0BAE  1D03               	btfss	3,2
  7336  0BAF  2BB4               	goto	l3922
  7337                           
  7338                           ;i2cUtil.c: 201:         SSP1STAT = 0b10000000;
  7339  0BB0  3080               	movlw	128
  7340  0BB1  0024               	movlb	4	; select bank4
  7341  0BB2  0094               	movwf	20	;volatile
  7342                           
  7343                           ;i2cUtil.c: 202:     } else {
  7344  0BB3  2BB6               	goto	l3924
  7345  0BB4                     l3922:	
  7346                           
  7347                           ;i2cUtil.c: 204:         SSP1STAT = 0b00000000;
  7348  0BB4  0024               	movlb	4	; select bank4
  7349  0BB5  0194               	clrf	20	;volatile
  7350  0BB6                     l3924:	
  7351                           
  7352                           ;i2cUtil.c: 207:     SSP1CON1 = 0b00110110;
  7353  0BB6  3036               	movlw	54
  7354  0BB7  0095               	movwf	21	;volatile
  7355                           
  7356                           ;i2cUtil.c: 210:     SSP1CON2 = 0b10000001;
  7357  0BB8  3081               	movlw	129
  7358  0BB9  0096               	movwf	22	;volatile
  7359                           
  7360                           ;i2cUtil.c: 212:     SSP1CON3 = 0b00000101;
  7361  0BBA  3005               	movlw	5
  7362  0BBB  0097               	movwf	23	;volatile
  7363                           
  7364                           ;i2cUtil.c: 213:     SSP1ADD = u8Address << 1;
  7365  0BBC  0020               	movlb	0	; select bank0
  7366  0BBD  352C               	lslf	I2C_vInitSlaveSSP1@u8Address,w
  7367  0BBE  0024               	movlb	4	; select bank4
  7368  0BBF  0092               	movwf	18	;volatile
  7369                           
  7370                           ;i2cUtil.c: 214:     SSP1MSK = 0b11111110;
  7371  0BC0  30FE               	movlw	254
  7372  0BC1  0093               	movwf	19	;volatile
  7373                           
  7374                           ;i2cUtil.c: 215:     SSP1IF = 0;
  7375  0BC2  0020               	movlb	0	; select bank0
  7376  0BC3  1191               	bcf	17,3	;volatile
  7377                           
  7378                           ;i2cUtil.c: 216:     BCL1IF = 0;
  7379  0BC4  1192               	bcf	18,3	;volatile
  7380                           
  7381                           ;i2cUtil.c: 217:     SSP1IE = 1;
  7382  0BC5  0021               	movlb	1	; select bank1
  7383  0BC6  1591               	bsf	17,3	;volatile
  7384                           
  7385                           ;i2cUtil.c: 218:     BCL1IE = 1;
  7386  0BC7  1592               	bsf	18,3	;volatile
  7387  0BC8  0008               	return
  7388  0BC9                     __end_of_I2C_vInitSlaveSSP1:	
  7389                           
  7390                           	psect	text34
  7391  0AFC                     __ptext34:	
  7392 ;; *************** function _I2C_vInitMasterSSP2 *****************
  7393 ;; Defined at:
  7394 ;;		line 158 in file "i2cUtil.c"
  7395 ;; Parameters:    Size  Location     Type
  7396 ;;  eMode           1    wreg     enum E2441
  7397 ;;  u8ClkDiv        1    9[BANK0 ] unsigned char 
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;  eMode           1   10[BANK0 ] enum E2441
  7400 ;; Return value:  Size  Location     Type
  7401 ;;                  1    wreg      void 
  7402 ;; Registers used:
  7403 ;;		wreg, status,2, status,0
  7404 ;; Tracked objects:
  7405 ;;		On entry : 0/0
  7406 ;;		On exit  : 0/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7409 ;;      Params:         0       1       0       0       0       0
  7410 ;;      Locals:         0       1       0       0       0       0
  7411 ;;      Temps:          0       0       0       0       0       0
  7412 ;;      Totals:         0       2       0       0       0       0
  7413 ;;Total ram usage:        2 bytes
  7414 ;; Hardware stack levels used:    1
  7415 ;; Hardware stack levels required when called:    5
  7416 ;; This function calls:
  7417 ;;		Nothing
  7418 ;; This function is called by:
  7419 ;;		_main
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           
  7424                           ;psect for function _I2C_vInitMasterSSP2
  7425  0AFC                     _I2C_vInitMasterSSP2:	
  7426                           
  7427                           ;incstack = 0
  7428                           ; Regs used in _I2C_vInitMasterSSP2: [wreg+status,2+status,0]
  7429                           ;I2C_vInitMasterSSP2@eMode stored from wreg
  7430  0AFC  0020               	movlb	0	; select bank0
  7431  0AFD  00AA               	movwf	I2C_vInitMasterSSP2@eMode
  7432                           
  7433                           ;i2cUtil.c: 160:     bMstStartFlgSSP2 = (0);
  7434  0AFE  0021               	movlb	1	; select bank1
  7435  0AFF  01D7               	clrf	_bMstStartFlgSSP2^(0+128)
  7436                           
  7437                           ;i2cUtil.c: 162:     if (eMode == I2C_MASTER_STD) {
  7438  0B00  0020               	movlb	0	; select bank0
  7439  0B01  082A               	movf	I2C_vInitMasterSSP2@eMode,w
  7440  0B02  1D03               	btfss	3,2
  7441  0B03  2B08               	goto	l3948
  7442                           
  7443                           ;i2cUtil.c: 164:         SSP2STAT= 0b10000000;
  7444  0B04  3080               	movlw	128
  7445  0B05  0024               	movlb	4	; select bank4
  7446  0B06  009C               	movwf	28	;volatile
  7447                           
  7448                           ;i2cUtil.c: 165:     } else {
  7449  0B07  2B0A               	goto	l3950
  7450  0B08                     l3948:	
  7451                           
  7452                           ;i2cUtil.c: 167:         SSP2STAT= 0b00000000;
  7453  0B08  0024               	movlb	4	; select bank4
  7454  0B09  019C               	clrf	28	;volatile
  7455  0B0A                     l3950:	
  7456                           
  7457                           ;i2cUtil.c: 170:     SSP2ADD = u8ClkDiv;
  7458  0B0A  0020               	movlb	0	; select bank0
  7459  0B0B  0829               	movf	I2C_vInitMasterSSP2@u8ClkDiv,w
  7460  0B0C  0024               	movlb	4	; select bank4
  7461  0B0D  009A               	movwf	26	;volatile
  7462                           
  7463                           ;i2cUtil.c: 172:     SSP2CON1 = 0b00101000;
  7464  0B0E  3028               	movlw	40
  7465  0B0F  009D               	movwf	29	;volatile
  7466                           
  7467                           ;i2cUtil.c: 173:     SSP2CON2 = 0b10000000;
  7468  0B10  3080               	movlw	128
  7469  0B11  009E               	movwf	30	;volatile
  7470  0B12  0008               	return
  7471  0B13                     __end_of_I2C_vInitMasterSSP2:	
  7472                           
  7473                           	psect	intentry
  7474  0004                     __pintentry:	
  7475 ;; *************** function _ISR *****************
  7476 ;; Defined at:
  7477 ;;		line 248 in file "TestMain.c"
  7478 ;; Parameters:    Size  Location     Type
  7479 ;;		None
  7480 ;; Auto vars:     Size  Location     Type
  7481 ;;		None
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  1    wreg      void 
  7484 ;; Registers used:
  7485 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7486 ;; Tracked objects:
  7487 ;;		On entry : 0/0
  7488 ;;		On exit  : 0/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7491 ;;      Params:         0       0       0       0       0       0
  7492 ;;      Locals:         0       0       0       0       0       0
  7493 ;;      Temps:          0       0       0       0       0       0
  7494 ;;      Totals:         0       0       0       0       0       0
  7495 ;;Total ram usage:        0 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:    4
  7498 ;; This function calls:
  7499 ;;		_I2C_vSlaveIsrSSP1
  7500 ;;		_timer_vInterrupt
  7501 ;; This function is called by:
  7502 ;;		Interrupt level 1
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506  0004                     _ISR:	
  7507                           
  7508                           ;incstack = 0
  7509  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7510                           
  7511                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7512  0005  3180               	pagesel	$
  7513                           
  7514                           ;TestMain.c: 253:     timer_vInterrupt();
  7515  0006  318B  2351  3180   	fcall	_timer_vInterrupt
  7516                           
  7517                           ;TestMain.c: 258:     I2C_vSlaveIsrSSP1();
  7518  0009  318B  23F3         	fcall	_I2C_vSlaveIsrSSP1
  7519  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7520  000C  0009               	retfie
  7521  000D                     __end_of_ISR:	
  7522                           
  7523                           	psect	text36
  7524  0B51                     __ptext36:	
  7525 ;; *************** function _timer_vInterrupt *****************
  7526 ;; Defined at:
  7527 ;;		line 274 in file "TestMain.c"
  7528 ;; Parameters:    Size  Location     Type
  7529 ;;		None
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;		None
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  1    wreg      void 
  7534 ;; Registers used:
  7535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7541 ;;      Params:         0       0       0       0       0       0
  7542 ;;      Locals:         0       0       0       0       0       0
  7543 ;;      Temps:          0       2       0       0       0       0
  7544 ;;      Totals:         0       2       0       0       0       0
  7545 ;;Total ram usage:        2 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:    3
  7548 ;; This function calls:
  7549 ;;		_KEYPAD_bUpdateBuffer
  7550 ;;		_KEYPAD_u8Read
  7551 ;; This function is called by:
  7552 ;;		_ISR
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           
  7557                           ;psect for function _timer_vInterrupt
  7558  0B51                     _timer_vInterrupt:	
  7559                           
  7560                           ;TestMain.c: 276:     if (TMR0IF != 1) {
  7561                           
  7562                           ;incstack = 0
  7563                           ; Regs used in _timer_vInterrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7564  0B51  1D0B               	btfss	11,2	;volatile
  7565  0B52  0008               	return
  7566                           
  7567                           ;TestMain.c: 280:     TMR0 = 0;
  7568  0B53  0020               	movlb	0	; select bank0
  7569  0B54  0195               	clrf	21	;volatile
  7570                           
  7571                           ;TestMain.c: 281:     TMR0IF = 0;
  7572  0B55  110B               	bcf	11,2	;volatile
  7573                           
  7574                           ;TestMain.c: 283:     switch (eInputMode) {
  7575  0B56  2B61               	goto	i1l4426
  7576  0B57                     i1l4418:	
  7577                           
  7578                           ;TestMain.c: 289:             u8KeyValue = KEYPAD_u8Read();
  7579  0B57  3184  24F2         	fcall	_KEYPAD_u8Read
  7580  0B59  0020               	movlb	0	; select bank0
  7581  0B5A  00A7               	movwf	??_timer_vInterrupt
  7582  0B5B  0827               	movf	??_timer_vInterrupt,w
  7583  0B5C  00E4               	movwf	_u8KeyValue
  7584                           
  7585                           ;TestMain.c: 290:             break;
  7586  0B5D  0008               	return
  7587  0B5E                     i1l4420:	
  7588                           
  7589                           ;TestMain.c: 294:             KEYPAD_bUpdateBuffer();
  7590  0B5E  318C  24BE         	fcall	_KEYPAD_bUpdateBuffer
  7591                           
  7592                           ;TestMain.c: 295:             break;
  7593  0B60  0008               	return
  7594  0B61                     i1l4426:	
  7595  0B61  0865               	movf	_eInputMode,w
  7596  0B62  00A7               	movwf	??_timer_vInterrupt
  7597  0B63  01A8               	clrf	??_timer_vInterrupt+1
  7598                           
  7599                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7600                           ; Switch size 1, requested type "simple"
  7601                           ; Number of cases is 1, Range of values is 0 to 0
  7602                           ; switch strategies available:
  7603                           ; Name         Instructions Cycles
  7604                           ; simple_byte            4     3 (average)
  7605                           ; direct_byte            8     6 (fixed)
  7606                           ; jumptable            260     6 (fixed)
  7607                           ;	Chosen strategy is simple_byte
  7608  0B64  0828               	movf	??_timer_vInterrupt+1,w
  7609  0B65  3A00               	xorlw	0	; case 0
  7610  0B66  1903               	skipnz
  7611  0B67  2B69               	goto	i1l6890
  7612  0B68  2B77               	goto	i1l129
  7613  0B69                     i1l6890:	
  7614                           
  7615                           ; Switch size 1, requested type "simple"
  7616                           ; Number of cases is 4, Range of values is 0 to 3
  7617                           ; switch strategies available:
  7618                           ; Name         Instructions Cycles
  7619                           ; simple_byte           13     7 (average)
  7620                           ; direct_byte           14     6 (fixed)
  7621                           ; jumptable            260     6 (fixed)
  7622                           ;	Chosen strategy is simple_byte
  7623  0B69  0827               	movf	??_timer_vInterrupt,w
  7624  0B6A  3A00               	xorlw	0	; case 0
  7625  0B6B  1903               	skipnz
  7626  0B6C  2B77               	goto	i1l129
  7627  0B6D  3A01               	xorlw	1	; case 1
  7628  0B6E  1903               	skipnz
  7629  0B6F  2B57               	goto	i1l4418
  7630  0B70  3A03               	xorlw	3	; case 2
  7631  0B71  1903               	skipnz
  7632  0B72  2B5E               	goto	i1l4420
  7633  0B73  3A01               	xorlw	1	; case 3
  7634  0B74  1903               	skipnz
  7635  0B75  2B5E               	goto	i1l4420
  7636  0B76  2B77               	goto	i1l129
  7637  0B77                     i1l129:	
  7638  0B77  0008               	return
  7639  0B78                     __end_of_timer_vInterrupt:	
  7640                           
  7641                           	psect	text37
  7642  0CBE                     __ptext37:	
  7643 ;; *************** function _KEYPAD_bUpdateBuffer *****************
  7644 ;; Defined at:
  7645 ;;		line 114 in file "keypad.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;		None
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;  u8Idx           1   13[COMMON] unsigned char 
  7650 ;;  u8KeyNo         1   12[COMMON] unsigned char 
  7651 ;; Return value:  Size  Location     Type
  7652 ;;                  1    wreg      unsigned char 
  7653 ;; Registers used:
  7654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7655 ;; Tracked objects:
  7656 ;;		On entry : 0/0
  7657 ;;		On exit  : 0/0
  7658 ;;		Unchanged: 0/0
  7659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7660 ;;      Params:         0       0       0       0       0       0
  7661 ;;      Locals:         2       0       0       0       0       0
  7662 ;;      Temps:          2       0       0       0       0       0
  7663 ;;      Totals:         4       0       0       0       0       0
  7664 ;;Total ram usage:        4 bytes
  7665 ;; Hardware stack levels used:    1
  7666 ;; Hardware stack levels required when called:    2
  7667 ;; This function calls:
  7668 ;;		_KEYPAD_u8Read
  7669 ;;		_criticalSec_vBegin
  7670 ;;		_criticalSec_vEnd
  7671 ;; This function is called by:
  7672 ;;		_timer_vInterrupt
  7673 ;; This function uses a non-reentrant model
  7674 ;;
  7675                           
  7676                           
  7677                           ;psect for function _KEYPAD_bUpdateBuffer
  7678  0CBE                     _KEYPAD_bUpdateBuffer:	
  7679                           
  7680                           ;keypad.c: 116:     if (spKEYPAD_status->u8BuffSize >= (4)) {
  7681                           
  7682                           ;incstack = 0
  7683                           ; Regs used in _KEYPAD_bUpdateBuffer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7684  0CBE  0020               	movlb	0	; select bank0
  7685  0CBF  0863               	movf	_spKEYPAD_status,w
  7686  0CC0  3E18               	addlw	24
  7687  0CC1  0086               	movwf	6
  7688  0CC2  0187               	clrf	7
  7689  0CC3  3004               	movlw	4
  7690  0CC4  0201               	subwf	1,w
  7691  0CC5  1803               	btfsc	3,0
  7692  0CC6  0008               	return
  7693                           
  7694                           ;keypad.c: 121:     unsigned char u8KeyNo = KEYPAD_u8Read();
  7695  0CC7  3184  24F2  318C   	fcall	_KEYPAD_u8Read
  7696  0CCA  00FA               	movwf	??_KEYPAD_bUpdateBuffer
  7697  0CCB  087A               	movf	??_KEYPAD_bUpdateBuffer,w
  7698  0CCC  00FC               	movwf	KEYPAD_bUpdateBuffer@u8KeyNo
  7699                           
  7700                           ;keypad.c: 122:     if (u8KeyNo == 0xFF) {
  7701  0CCD  0A7C               	incf	KEYPAD_bUpdateBuffer@u8KeyNo,w
  7702  0CCE  1903               	btfsc	3,2
  7703  0CCF  0008               	return
  7704                           
  7705                           ;keypad.c: 126:     criticalSec_vBegin();
  7706  0CD0  318A  224F  318C   	fcall	_criticalSec_vBegin
  7707                           
  7708                           ;keypad.c: 128:     unsigned char u8Idx = (spKEYPAD_status->u8BuffEndIdx + 1) % (4);
  7709  0CD3  0020               	movlb	0	; select bank0
  7710  0CD4  0863               	movf	_spKEYPAD_status,w
  7711  0CD5  3E1A               	addlw	26
  7712  0CD6  0086               	movwf	6
  7713  0CD7  0187               	clrf	7
  7714  0CD8  0801               	movf	1,w
  7715  0CD9  3E01               	addlw	1
  7716  0CDA  3903               	andlw	3
  7717  0CDB  00FA               	movwf	??_KEYPAD_bUpdateBuffer
  7718  0CDC  087A               	movf	??_KEYPAD_bUpdateBuffer,w
  7719  0CDD  00FD               	movwf	KEYPAD_bUpdateBuffer@u8Idx
  7720                           
  7721                           ;keypad.c: 129:     spKEYPAD_status->u8KeyBuffer[u8Idx] = u8KeyNo;
  7722  0CDE  087C               	movf	KEYPAD_bUpdateBuffer@u8KeyNo,w
  7723  0CDF  00FA               	movwf	??_KEYPAD_bUpdateBuffer
  7724  0CE0  087D               	movf	KEYPAD_bUpdateBuffer@u8Idx,w
  7725  0CE1  0763               	addwf	_spKEYPAD_status,w
  7726  0CE2  00FB               	movwf	??_KEYPAD_bUpdateBuffer+1
  7727  0CE3  087B               	movf	??_KEYPAD_bUpdateBuffer+1,w
  7728  0CE4  3E14               	addlw	20
  7729  0CE5  0086               	movwf	6
  7730  0CE6  0187               	clrf	7
  7731  0CE7  087A               	movf	??_KEYPAD_bUpdateBuffer,w
  7732  0CE8  0081               	movwf	1
  7733                           
  7734                           ;keypad.c: 130:     spKEYPAD_status->u8BuffEndIdx = u8Idx;
  7735  0CE9  087D               	movf	KEYPAD_bUpdateBuffer@u8Idx,w
  7736  0CEA  00FA               	movwf	??_KEYPAD_bUpdateBuffer
  7737  0CEB  0863               	movf	_spKEYPAD_status,w
  7738  0CEC  3E1A               	addlw	26
  7739  0CED  0086               	movwf	6
  7740  0CEE  0187               	clrf	7
  7741  0CEF  087A               	movf	??_KEYPAD_bUpdateBuffer,w
  7742  0CF0  0081               	movwf	1
  7743                           
  7744                           ;keypad.c: 131:     spKEYPAD_status->u8BuffSize++;
  7745  0CF1  3001               	movlw	1
  7746  0CF2  00FA               	movwf	??_KEYPAD_bUpdateBuffer
  7747  0CF3  0863               	movf	_spKEYPAD_status,w
  7748  0CF4  3E18               	addlw	24
  7749  0CF5  0086               	movwf	6
  7750  0CF6  0187               	clrf	7
  7751  0CF7  087A               	movf	??_KEYPAD_bUpdateBuffer,w
  7752  0CF8  0781               	addwf	1,f
  7753                           
  7754                           ;keypad.c: 133:     criticalSec_vEnd();
  7755  0CF9  318A  225D         	fcall	_criticalSec_vEnd
  7756  0CFB  0008               	return
  7757  0CFC                     __end_of_KEYPAD_bUpdateBuffer:	
  7758                           
  7759                           	psect	text38
  7760  0A5D                     __ptext38:	
  7761 ;; *************** function _criticalSec_vEnd *****************
  7762 ;; Defined at:
  7763 ;;		line 83 in file "libcom.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;		None
  7766 ;; Auto vars:     Size  Location     Type
  7767 ;;		None
  7768 ;; Return value:  Size  Location     Type
  7769 ;;                  1    wreg      void 
  7770 ;; Registers used:
  7771 ;;		wreg, status,2, status,0
  7772 ;; Tracked objects:
  7773 ;;		On entry : 0/0
  7774 ;;		On exit  : 0/0
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7777 ;;      Params:         0       0       0       0       0       0
  7778 ;;      Locals:         0       0       0       0       0       0
  7779 ;;      Temps:          0       0       0       0       0       0
  7780 ;;      Totals:         0       0       0       0       0       0
  7781 ;;Total ram usage:        0 bytes
  7782 ;; Hardware stack levels used:    1
  7783 ;; This function calls:
  7784 ;;		Nothing
  7785 ;; This function is called by:
  7786 ;;		_KEYPAD_bUpdateBuffer
  7787 ;;		_KEYPAD_vClearBuffer
  7788 ;;		_KEYPAD_u8ReadBuffer
  7789 ;;		_KEYPAD_u8ReadFinal
  7790 ;; This function uses a non-reentrant model
  7791 ;;
  7792                           
  7793                           
  7794                           ;psect for function _criticalSec_vEnd
  7795  0A5D                     _criticalSec_vEnd:	
  7796                           
  7797                           ;libcom.c: 84:     u8Depth--;
  7798                           
  7799                           ;incstack = 0
  7800                           ; Regs used in _criticalSec_vEnd: [wreg+status,2+status,0]
  7801  0A5D  3001               	movlw	1
  7802  0A5E  0020               	movlb	0	; select bank0
  7803  0A5F  02E2               	subwf	_u8Depth,f	;volatile
  7804                           
  7805                           ;libcom.c: 85:     if (u8Depth == 0) {
  7806  0A60  0862               	movf	_u8Depth,w	;volatile
  7807  0A61  1D03               	btfss	3,2
  7808  0A62  0008               	return
  7809                           
  7810                           ;libcom.c: 86:         GIE = 1;
  7811  0A63  178B               	bsf	11,7	;volatile
  7812  0A64  0008               	return
  7813  0A65                     __end_of_criticalSec_vEnd:	
  7814                           
  7815                           	psect	text39
  7816  0A4F                     __ptext39:	
  7817 ;; *************** function _criticalSec_vBegin *****************
  7818 ;; Defined at:
  7819 ;;		line 65 in file "libcom.c"
  7820 ;; Parameters:    Size  Location     Type
  7821 ;;		None
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;		None
  7824 ;; Return value:  Size  Location     Type
  7825 ;;                  1    wreg      void 
  7826 ;; Registers used:
  7827 ;;		wreg, status,2, status,0
  7828 ;; Tracked objects:
  7829 ;;		On entry : 0/0
  7830 ;;		On exit  : 0/0
  7831 ;;		Unchanged: 0/0
  7832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7833 ;;      Params:         0       0       0       0       0       0
  7834 ;;      Locals:         0       0       0       0       0       0
  7835 ;;      Temps:          1       0       0       0       0       0
  7836 ;;      Totals:         1       0       0       0       0       0
  7837 ;;Total ram usage:        1 bytes
  7838 ;; Hardware stack levels used:    1
  7839 ;; This function calls:
  7840 ;;		Nothing
  7841 ;; This function is called by:
  7842 ;;		_KEYPAD_bUpdateBuffer
  7843 ;;		_KEYPAD_vClearBuffer
  7844 ;;		_KEYPAD_u8ReadBuffer
  7845 ;;		_KEYPAD_u8ReadFinal
  7846 ;; This function uses a non-reentrant model
  7847 ;;
  7848                           
  7849                           
  7850                           ;psect for function _criticalSec_vBegin
  7851  0A4F                     _criticalSec_vBegin:	
  7852                           
  7853                           ;libcom.c: 66:     GIE = 0;
  7854                           
  7855                           ;incstack = 0
  7856                           ; Regs used in _criticalSec_vBegin: [wreg+status,2+status,0]
  7857  0A4F  138B               	bcf	11,7	;volatile
  7858                           
  7859                           ;libcom.c: 67:     u8Depth++;
  7860  0A50  3001               	movlw	1
  7861  0A51  00F0               	movwf	??_criticalSec_vBegin
  7862  0A52  0870               	movf	??_criticalSec_vBegin,w
  7863  0A53  0020               	movlb	0	; select bank0
  7864  0A54  07E2               	addwf	_u8Depth,f	;volatile
  7865  0A55  0008               	return
  7866  0A56                     __end_of_criticalSec_vBegin:	
  7867                           
  7868                           	psect	text40
  7869  04F2                     __ptext40:	
  7870 ;; *************** function _KEYPAD_u8Read *****************
  7871 ;; Defined at:
  7872 ;;		line 195 in file "keypad.c"
  7873 ;; Parameters:    Size  Location     Type
  7874 ;;		None
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  u16PinMap       2    2[BANK0 ] unsigned int 
  7877 ;;  u8Row           1    6[BANK0 ] unsigned char 
  7878 ;;  u8KeyNo         1    5[BANK0 ] unsigned char 
  7879 ;;  u8Col           1    4[BANK0 ] unsigned char 
  7880 ;;  u8PortB         1    1[BANK0 ] unsigned char 
  7881 ;;  u8PortA         1    0[BANK0 ] unsigned char 
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  1    wreg      unsigned char 
  7884 ;; Registers used:
  7885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7891 ;;      Params:         0       0       0       0       0       0
  7892 ;;      Locals:         0       7       0       0       0       0
  7893 ;;      Temps:          2       0       0       0       0       0
  7894 ;;      Totals:         2       7       0       0       0       0
  7895 ;;Total ram usage:        9 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; Hardware stack levels required when called:    1
  7898 ;; This function calls:
  7899 ;;		_readColumn
  7900 ;; This function is called by:
  7901 ;;		_timer_vInterrupt
  7902 ;;		_KEYPAD_bUpdateBuffer
  7903 ;; This function uses a non-reentrant model
  7904 ;;
  7905                           
  7906                           
  7907                           ;psect for function _KEYPAD_u8Read
  7908  04F2                     _KEYPAD_u8Read:	
  7909                           
  7910                           ;keypad.c: 197:     unsigned char u8PortA = PORTA;
  7911                           
  7912                           ;incstack = 0
  7913                           ; Regs used in _KEYPAD_u8Read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7914  04F2  0020               	movlb	0	; select bank0
  7915  04F3  080C               	movf	12,w	;volatile
  7916  04F4  00F8               	movwf	??_KEYPAD_u8Read
  7917  04F5  0878               	movf	??_KEYPAD_u8Read,w
  7918  04F6  00A0               	movwf	KEYPAD_u8Read@u8PortA
  7919                           
  7920                           ;keypad.c: 199:     unsigned char u8PortB = PORTB;
  7921  04F7  080D               	movf	13,w	;volatile
  7922  04F8  00F8               	movwf	??_KEYPAD_u8Read
  7923  04F9  0878               	movf	??_KEYPAD_u8Read,w
  7924  04FA  00A1               	movwf	KEYPAD_u8Read@u8PortB
  7925                           
  7926                           ;keypad.c: 205:     unsigned int u16PinMap;;keypad.c: 206:     unsigned char u8Col;;keyp
      +                          ad.c: 207:     unsigned char u8Row;;keypad.c: 208:     for (u8Row = 0; u8Row < (4); u8Ro
      +                          w++) {
  7927  04FB  01A6               	clrf	KEYPAD_u8Read@u8Row
  7928  04FC                     i1l3510:	
  7929                           
  7930                           ;keypad.c: 210:         u16PinMap = spKEYPAD_status->u16PinRows[u8Row];
  7931  04FC  3526               	lslf	KEYPAD_u8Read@u8Row,w
  7932  04FD  0763               	addwf	_spKEYPAD_status,w
  7933  04FE  00F8               	movwf	??_KEYPAD_u8Read
  7934  04FF  0878               	movf	??_KEYPAD_u8Read,w
  7935  0500  3E09               	addlw	9
  7936  0501  0086               	movwf	6
  7937  0502  0187               	clrf	7
  7938  0503  3F40               	moviw [0]fsr1
  7939  0504  00A2               	movwf	KEYPAD_u8Read@u16PinMap
  7940  0505  3F41               	moviw [1]fsr1
  7941  0506  00A3               	movwf	KEYPAD_u8Read@u16PinMap+1
  7942                           
  7943                           ;keypad.c: 211:         switch (u16PinMap & 0xFF00) {
  7944  0507  2D22               	goto	i1l3526
  7945  0508                     i1l3512:	
  7946                           
  7947                           ;keypad.c: 213:                 PORTA = u8PortA | (unsigned char)u16PinMap;
  7948  0508  0820               	movf	KEYPAD_u8Read@u8PortA,w
  7949  0509  0422               	iorwf	KEYPAD_u8Read@u16PinMap,w
  7950  050A  008C               	movwf	12	;volatile
  7951                           
  7952                           ;keypad.c: 214:                 u8Col = readColumn();
  7953  050B  318C  24FC  3184   	fcall	_readColumn
  7954  050E  00F8               	movwf	??_KEYPAD_u8Read
  7955  050F  0878               	movf	??_KEYPAD_u8Read,w
  7956  0510  0020               	movlb	0	; select bank0
  7957  0511  00A4               	movwf	KEYPAD_u8Read@u8Col
  7958                           
  7959                           ;keypad.c: 215:                 PORTA = u8PortA;
  7960  0512  0820               	movf	KEYPAD_u8Read@u8PortA,w
  7961  0513  008C               	movwf	12	;volatile
  7962                           
  7963                           ;keypad.c: 216:                 break;
  7964  0514  2D3A               	goto	i1l3528
  7965  0515                     i1l3518:	
  7966                           
  7967                           ;keypad.c: 219:                 PORTB = u8PortB | (unsigned char)u16PinMap;
  7968  0515  0821               	movf	KEYPAD_u8Read@u8PortB,w
  7969  0516  0422               	iorwf	KEYPAD_u8Read@u16PinMap,w
  7970  0517  008D               	movwf	13	;volatile
  7971                           
  7972                           ;keypad.c: 220:                 u8Col = readColumn();
  7973  0518  318C  24FC  3184   	fcall	_readColumn
  7974  051B  00F8               	movwf	??_KEYPAD_u8Read
  7975  051C  0878               	movf	??_KEYPAD_u8Read,w
  7976  051D  0020               	movlb	0	; select bank0
  7977  051E  00A4               	movwf	KEYPAD_u8Read@u8Col
  7978                           
  7979                           ;keypad.c: 221:                 PORTB = u8PortB;
  7980  051F  0821               	movf	KEYPAD_u8Read@u8PortB,w
  7981  0520  008D               	movwf	13	;volatile
  7982                           
  7983                           ;keypad.c: 222:                 break;
  7984  0521  2D3A               	goto	i1l3528
  7985  0522                     i1l3526:	
  7986  0522  3000               	movlw	0
  7987  0523  0522               	andwf	KEYPAD_u8Read@u16PinMap,w
  7988  0524  00F8               	movwf	??_KEYPAD_u8Read
  7989  0525  30FF               	movlw	255
  7990  0526  0523               	andwf	KEYPAD_u8Read@u16PinMap+1,w
  7991  0527  00F9               	movwf	??_KEYPAD_u8Read+1
  7992                           
  7993                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7994                           ; Switch size 1, requested type "simple"
  7995                           ; Number of cases is 2, Range of values is 0 to 1
  7996                           ; switch strategies available:
  7997                           ; Name         Instructions Cycles
  7998                           ; simple_byte            7     4 (average)
  7999                           ; direct_byte           10     6 (fixed)
  8000                           ; jumptable            260     6 (fixed)
  8001                           ;	Chosen strategy is simple_byte
  8002  0528  0879               	movf	??_KEYPAD_u8Read+1,w
  8003  0529  3A00               	xorlw	0	; case 0
  8004  052A  1903               	skipnz
  8005  052B  2D30               	goto	i1l6892
  8006  052C  3A01               	xorlw	1	; case 1
  8007  052D  1903               	skipnz
  8008  052E  2D35               	goto	i1l6894
  8009  052F  2D3A               	goto	i1l3528
  8010  0530                     i1l6892:	
  8011                           
  8012                           ; Switch size 1, requested type "simple"
  8013                           ; Number of cases is 1, Range of values is 0 to 0
  8014                           ; switch strategies available:
  8015                           ; Name         Instructions Cycles
  8016                           ; simple_byte            4     3 (average)
  8017                           ; direct_byte            8     6 (fixed)
  8018                           ; jumptable            260     6 (fixed)
  8019                           ;	Chosen strategy is simple_byte
  8020  0530  0878               	movf	??_KEYPAD_u8Read,w
  8021  0531  3A00               	xorlw	0	; case 0
  8022  0532  1903               	skipnz
  8023  0533  2D08               	goto	i1l3512
  8024  0534  2D3A               	goto	i1l3528
  8025  0535                     i1l6894:	
  8026                           
  8027                           ; Switch size 1, requested type "simple"
  8028                           ; Number of cases is 1, Range of values is 0 to 0
  8029                           ; switch strategies available:
  8030                           ; Name         Instructions Cycles
  8031                           ; simple_byte            4     3 (average)
  8032                           ; direct_byte            8     6 (fixed)
  8033                           ; jumptable            260     6 (fixed)
  8034                           ;	Chosen strategy is simple_byte
  8035  0535  0878               	movf	??_KEYPAD_u8Read,w
  8036  0536  3A00               	xorlw	0	; case 0
  8037  0537  1903               	skipnz
  8038  0538  2D15               	goto	i1l3518
  8039  0539  2D3A               	goto	i1l3528
  8040  053A                     i1l3528:	
  8041                           
  8042                           ;keypad.c: 233:         if (u8Col != 0xFF) {
  8043  053A  0A24               	incf	KEYPAD_u8Read@u8Col,w
  8044  053B  1D03               	btfss	3,2
  8045  053C  2D45               	goto	i1l3536
  8046                           
  8047                           ;keypad.c: 236:     }
  8048  053D  3001               	movlw	1
  8049  053E  00F8               	movwf	??_KEYPAD_u8Read
  8050  053F  0878               	movf	??_KEYPAD_u8Read,w
  8051  0540  07A6               	addwf	KEYPAD_u8Read@u8Row,f
  8052  0541  3004               	movlw	4
  8053  0542  0226               	subwf	KEYPAD_u8Read@u8Row,w
  8054  0543  1C03               	skipc
  8055  0544  2CFC               	goto	i1l3510
  8056  0545                     i1l3536:	
  8057                           
  8058                           ;keypad.c: 238:     if (u8Col == 0xFF) {
  8059  0545  0A24               	incf	KEYPAD_u8Read@u8Col,w
  8060  0546  1D03               	btfss	3,2
  8061  0547  2D6A               	goto	i1l3544
  8062                           
  8063                           ;keypad.c: 239:         spKEYPAD_status->u8BeforeKeyNo = 0xFF;
  8064  0548  30FF               	movlw	255
  8065  0549  00F8               	movwf	??_KEYPAD_u8Read
  8066  054A  0863               	movf	_spKEYPAD_status,w
  8067  054B  3E11               	addlw	17
  8068  054C  0086               	movwf	6
  8069  054D  0187               	clrf	7
  8070  054E  0878               	movf	??_KEYPAD_u8Read,w
  8071  054F  0081               	movwf	1
  8072                           
  8073                           ;keypad.c: 240:         spKEYPAD_status->u16KeyChkCnt = 0;
  8074  0550  0863               	movf	_spKEYPAD_status,w
  8075  0551  3E12               	addlw	18
  8076  0552  0086               	movwf	6
  8077  0553  0187               	clrf	7
  8078  0554  3000               	movlw	0
  8079  0555  3FC0               	movwi [0]fsr1
  8080  0556  3FC1               	movwi [1]fsr1
  8081  0557  2D68               	goto	i1l3540
  8082  0558                     i1l3548:	
  8083                           
  8084                           ;keypad.c: 247:         spKEYPAD_status->u8BeforeKeyNo = u8KeyNo;
  8085  0558  0825               	movf	KEYPAD_u8Read@u8KeyNo,w
  8086  0559  00F8               	movwf	??_KEYPAD_u8Read
  8087  055A  0863               	movf	_spKEYPAD_status,w
  8088  055B  3E11               	addlw	17
  8089  055C  0086               	movwf	6
  8090  055D  0187               	clrf	7
  8091  055E  0878               	movf	??_KEYPAD_u8Read,w
  8092  055F  0081               	movwf	1
  8093                           
  8094                           ;keypad.c: 248:         spKEYPAD_status->u16KeyChkCnt = 1;
  8095  0560  0863               	movf	_spKEYPAD_status,w
  8096  0561  3E12               	addlw	18
  8097  0562  0086               	movwf	6
  8098  0563  0187               	clrf	7
  8099  0564  3001               	movlw	1
  8100  0565  3FC0               	movwi [0]fsr1
  8101  0566  3000               	movlw	0
  8102  0567  3FC1               	movwi [1]fsr1
  8103  0568                     i1l3540:	
  8104                           
  8105                           ;keypad.c: 241:         return 0xFF;
  8106  0568  30FF               	movlw	255
  8107  0569  0008               	return
  8108  056A                     i1l3544:	
  8109                           
  8110                           ;keypad.c: 244:     unsigned char u8KeyNo = u8Row * (4) + u8Col;
  8111  056A  0826               	movf	KEYPAD_u8Read@u8Row,w
  8112  056B  00F8               	movwf	??_KEYPAD_u8Read
  8113  056C  3001               	movlw	1
  8114  056D                     u181_25:	
  8115  056D  35F8               	lslf	??_KEYPAD_u8Read,f
  8116  056E  3EFF               	addlw	-1
  8117  056F  1D03               	skipz
  8118  0570  2D6D               	goto	u181_25
  8119  0571  3578               	lslf	??_KEYPAD_u8Read,w
  8120  0572  0724               	addwf	KEYPAD_u8Read@u8Col,w
  8121  0573  00F9               	movwf	??_KEYPAD_u8Read+1
  8122  0574  0879               	movf	??_KEYPAD_u8Read+1,w
  8123  0575  00A5               	movwf	KEYPAD_u8Read@u8KeyNo
  8124                           
  8125                           ;keypad.c: 246:     if (u8KeyNo != spKEYPAD_status->u8BeforeKeyNo) {
  8126  0576  0863               	movf	_spKEYPAD_status,w
  8127  0577  3E11               	addlw	17
  8128  0578  0086               	movwf	6
  8129  0579  0187               	clrf	7
  8130  057A  0801               	movf	1,w
  8131  057B  0625               	xorwf	KEYPAD_u8Read@u8KeyNo,w
  8132  057C  1D03               	btfss	3,2
  8133  057D  2D58               	goto	i1l3548
  8134                           
  8135                           ;keypad.c: 252:     spKEYPAD_status->u16KeyChkCnt++;
  8136  057E  0863               	movf	_spKEYPAD_status,w
  8137  057F  3E12               	addlw	18
  8138  0580  0086               	movwf	6
  8139  0581  0187               	clrf	7
  8140  0582  3001               	movlw	1
  8141  0583  0781               	addwf	1,f
  8142  0584  3141               	addfsr 1,1
  8143  0585  1803               	skipnc
  8144  0586  0A81               	incf	1,f
  8145                           
  8146                           ;keypad.c: 254:     if (spKEYPAD_status->u16KeyChkCnt == (6) ||
  8147  0587  0863               	movf	_spKEYPAD_status,w
  8148  0588  3E12               	addlw	18
  8149  0589  0086               	movwf	6
  8150  058A  0187               	clrf	7
  8151  058B  0016               	moviw fsr1++
  8152  058C  3A06               	xorlw	6
  8153  058D  00F8               	movwf	??_KEYPAD_u8Read
  8154  058E  0016               	moviw fsr1++
  8155  058F  04F8               	iorwf	??_KEYPAD_u8Read,f
  8156  0590  1903               	btfsc	3,2
  8157  0591  2DA8               	goto	i1l3560
  8158  0592  0863               	movf	_spKEYPAD_status,w
  8159  0593  3E12               	addlw	18
  8160  0594  0086               	movwf	6
  8161  0595  0187               	clrf	7
  8162  0596  0016               	moviw fsr1++
  8163  0597  3A80               	xorlw	128
  8164  0598  00F8               	movwf	??_KEYPAD_u8Read
  8165  0599  0016               	moviw fsr1++
  8166  059A  04F8               	iorwf	??_KEYPAD_u8Read,f
  8167  059B  1903               	btfsc	3,2
  8168  059C  2DA8               	goto	i1l3560
  8169  059D  0863               	movf	_spKEYPAD_status,w
  8170  059E  3E12               	addlw	18
  8171  059F  0086               	movwf	6
  8172  05A0  0187               	clrf	7
  8173  05A1  0016               	moviw fsr1++
  8174  05A2  00F8               	movwf	??_KEYPAD_u8Read
  8175  05A3  0016               	moviw fsr1++
  8176  05A4  3A01               	xorlw	1
  8177  05A5  04F8               	iorwf	??_KEYPAD_u8Read,f
  8178  05A6  1D03               	btfss	3,2
  8179  05A7  2DAA               	goto	i1l3566
  8180  05A8                     i1l3560:	
  8181                           
  8182                           ;keypad.c: 256:         spKEYPAD_status->u16KeyChkCnt == (256)) {;keypad.c: 258:        
      +                           return u8KeyNo;
  8183  05A8  0825               	movf	KEYPAD_u8Read@u8KeyNo,w
  8184  05A9  0008               	return
  8185  05AA                     i1l3566:	
  8186  05AA  0863               	movf	_spKEYPAD_status,w
  8187  05AB  3E12               	addlw	18
  8188  05AC  0086               	movwf	6
  8189  05AD  0187               	clrf	7
  8190  05AE  0016               	moviw fsr1++
  8191  05AF  3A0C               	xorlw	12
  8192  05B0  00F8               	movwf	??_KEYPAD_u8Read
  8193  05B1  0016               	moviw fsr1++
  8194  05B2  3A01               	xorlw	1
  8195  05B3  04F8               	iorwf	??_KEYPAD_u8Read,f
  8196  05B4  1D03               	btfss	3,2
  8197  05B5  2D68               	goto	i1l3540
  8198                           
  8199                           ;keypad.c: 260:         spKEYPAD_status->u16KeyChkCnt = (256);
  8200  05B6  0863               	movf	_spKEYPAD_status,w
  8201  05B7  3E12               	addlw	18
  8202  05B8  0086               	movwf	6
  8203  05B9  0187               	clrf	7
  8204  05BA  3000               	movlw	0
  8205  05BB  3FC0               	movwi [0]fsr1
  8206  05BC  3001               	movlw	1
  8207  05BD  3FC1               	movwi [1]fsr1
  8208  05BE  2DA8               	goto	i1l3560
  8209  05BF                     __end_of_KEYPAD_u8Read:	
  8210                           
  8211                           	psect	text41
  8212  0CFC                     __ptext41:	
  8213 ;; *************** function _readColumn *****************
  8214 ;; Defined at:
  8215 ;;		line 350 in file "keypad.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;		None
  8218 ;; Auto vars:     Size  Location     Type
  8219 ;;  u16PinMap       2    5[COMMON] unsigned int 
  8220 ;;  u8Col           1    7[COMMON] unsigned char 
  8221 ;;  u8Port          1    4[COMMON] unsigned char 
  8222 ;;  portB           1    3[COMMON] unsigned char 
  8223 ;;  portA           1    2[COMMON] unsigned char 
  8224 ;; Return value:  Size  Location     Type
  8225 ;;                  1    wreg      unsigned char 
  8226 ;; Registers used:
  8227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8228 ;; Tracked objects:
  8229 ;;		On entry : 0/0
  8230 ;;		On exit  : 0/0
  8231 ;;		Unchanged: 0/0
  8232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8233 ;;      Params:         0       0       0       0       0       0
  8234 ;;      Locals:         6       0       0       0       0       0
  8235 ;;      Temps:          2       0       0       0       0       0
  8236 ;;      Totals:         8       0       0       0       0       0
  8237 ;;Total ram usage:        8 bytes
  8238 ;; Hardware stack levels used:    1
  8239 ;; This function calls:
  8240 ;;		Nothing
  8241 ;; This function is called by:
  8242 ;;		_KEYPAD_u8Read
  8243 ;; This function uses a non-reentrant model
  8244 ;;
  8245                           
  8246                           
  8247                           ;psect for function _readColumn
  8248  0CFC                     _readColumn:	
  8249                           
  8250                           ;keypad.c: 352:     unsigned char portA = PORTA;
  8251                           
  8252                           ;incstack = 0
  8253                           ; Regs used in _readColumn: [wreg-fsr1h+status,2+status,0]
  8254  0CFC  0020               	movlb	0	; select bank0
  8255  0CFD  080C               	movf	12,w	;volatile
  8256  0CFE  00F0               	movwf	??_readColumn
  8257  0CFF  0870               	movf	??_readColumn,w
  8258  0D00  00F2               	movwf	readColumn@portA
  8259                           
  8260                           ;keypad.c: 354:     unsigned char portB = PORTB;
  8261  0D01  080D               	movf	13,w	;volatile
  8262  0D02  00F0               	movwf	??_readColumn
  8263  0D03  0870               	movf	??_readColumn,w
  8264  0D04  00F3               	movwf	readColumn@portB
  8265                           
  8266                           ;keypad.c: 360:     unsigned int u16PinMap;;keypad.c: 361:     unsigned char u8Port;;key
      +                          pad.c: 362:     unsigned char u8Col;;keypad.c: 363:     for (u8Col = 0; u8Col < (4); u8C
      +                          ol++) {
  8267  0D05  01F7               	clrf	readColumn@u8Col
  8268  0D06                     i1l3374:	
  8269                           
  8270                           ;keypad.c: 364:         u16PinMap = spKEYPAD_status->u16PinCols[u8Col];
  8271  0D06  3577               	lslf	readColumn@u8Col,w
  8272  0D07  0763               	addwf	_spKEYPAD_status,w
  8273  0D08  00F0               	movwf	??_readColumn
  8274  0D09  0A70               	incf	??_readColumn,w
  8275  0D0A  0086               	movwf	6
  8276  0D0B  0187               	clrf	7
  8277  0D0C  3F40               	moviw [0]fsr1
  8278  0D0D  00F5               	movwf	readColumn@u16PinMap
  8279  0D0E  3F41               	moviw [1]fsr1
  8280  0D0F  00F6               	movwf	readColumn@u16PinMap+1
  8281                           
  8282                           ;keypad.c: 365:         switch (u16PinMap & 0xFF00) {
  8283  0D10  2D1A               	goto	i1l3386
  8284  0D11                     i1l3376:	
  8285                           
  8286                           ;keypad.c: 367:                 u8Port = portA;
  8287  0D11  0872               	movf	readColumn@portA,w
  8288  0D12  2D14               	goto	L1
  8289  0D13                     i1l3378:	
  8290                           ;keypad.c: 368:                 break;
  8291                           
  8292                           
  8293                           ;keypad.c: 371:                 u8Port = portB;
  8294  0D13  0873               	movf	readColumn@portB,w
  8295  0D14                     L1:	
  8296  0D14  00F0               	movwf	??_readColumn
  8297  0D15  0870               	movf	??_readColumn,w
  8298  0D16  00F4               	movwf	readColumn@u8Port
  8299                           
  8300                           ;keypad.c: 372:                 break;
  8301  0D17  2D32               	goto	i1l3388
  8302  0D18                     i1l3380:	
  8303                           
  8304                           ;keypad.c: 381:                 return 0xFF;
  8305  0D18  30FF               	movlw	255
  8306  0D19  0008               	return
  8307  0D1A                     i1l3386:	
  8308  0D1A  3000               	movlw	0
  8309  0D1B  0575               	andwf	readColumn@u16PinMap,w
  8310  0D1C  00F0               	movwf	??_readColumn
  8311  0D1D  30FF               	movlw	255
  8312  0D1E  0576               	andwf	readColumn@u16PinMap+1,w
  8313  0D1F  00F1               	movwf	??_readColumn+1
  8314                           
  8315                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  8316                           ; Switch size 1, requested type "simple"
  8317                           ; Number of cases is 2, Range of values is 0 to 1
  8318                           ; switch strategies available:
  8319                           ; Name         Instructions Cycles
  8320                           ; simple_byte            7     4 (average)
  8321                           ; direct_byte           10     6 (fixed)
  8322                           ; jumptable            260     6 (fixed)
  8323                           ;	Chosen strategy is simple_byte
  8324  0D20  0871               	movf	??_readColumn+1,w
  8325  0D21  3A00               	xorlw	0	; case 0
  8326  0D22  1903               	skipnz
  8327  0D23  2D28               	goto	i1l6896
  8328  0D24  3A01               	xorlw	1	; case 1
  8329  0D25  1903               	skipnz
  8330  0D26  2D2D               	goto	i1l6898
  8331  0D27  2D18               	goto	i1l3380
  8332  0D28                     i1l6896:	
  8333                           
  8334                           ; Switch size 1, requested type "simple"
  8335                           ; Number of cases is 1, Range of values is 0 to 0
  8336                           ; switch strategies available:
  8337                           ; Name         Instructions Cycles
  8338                           ; simple_byte            4     3 (average)
  8339                           ; direct_byte            8     6 (fixed)
  8340                           ; jumptable            260     6 (fixed)
  8341                           ;	Chosen strategy is simple_byte
  8342  0D28  0870               	movf	??_readColumn,w
  8343  0D29  3A00               	xorlw	0	; case 0
  8344  0D2A  1903               	skipnz
  8345  0D2B  2D11               	goto	i1l3376
  8346  0D2C  2D18               	goto	i1l3380
  8347  0D2D                     i1l6898:	
  8348                           
  8349                           ; Switch size 1, requested type "simple"
  8350                           ; Number of cases is 1, Range of values is 0 to 0
  8351                           ; switch strategies available:
  8352                           ; Name         Instructions Cycles
  8353                           ; simple_byte            4     3 (average)
  8354                           ; direct_byte            8     6 (fixed)
  8355                           ; jumptable            260     6 (fixed)
  8356                           ;	Chosen strategy is simple_byte
  8357  0D2D  0870               	movf	??_readColumn,w
  8358  0D2E  3A00               	xorlw	0	; case 0
  8359  0D2F  1903               	skipnz
  8360  0D30  2D13               	goto	i1l3378
  8361  0D31  2D18               	goto	i1l3380
  8362  0D32                     i1l3388:	
  8363                           
  8364                           ;keypad.c: 384:         if ((u8Port & (unsigned char)u16PinMap) != 0x00) {
  8365  0D32  0874               	movf	readColumn@u8Port,w
  8366  0D33  0575               	andwf	readColumn@u16PinMap,w
  8367  0D34  1903               	btfsc	3,2
  8368  0D35  2D38               	goto	i1l3394
  8369                           
  8370                           ;keypad.c: 385:             return u8Col;
  8371  0D36  0877               	movf	readColumn@u8Col,w
  8372  0D37  0008               	return
  8373  0D38                     i1l3394:	
  8374                           
  8375                           ;keypad.c: 387:     }
  8376  0D38  3001               	movlw	1
  8377  0D39  00F0               	movwf	??_readColumn
  8378  0D3A  0870               	movf	??_readColumn,w
  8379  0D3B  07F7               	addwf	readColumn@u8Col,f
  8380  0D3C  3004               	movlw	4
  8381  0D3D  0277               	subwf	readColumn@u8Col,w
  8382  0D3E  1803               	btfsc	3,0
  8383  0D3F  2D18               	goto	i1l3380
  8384  0D40  2D06               	goto	i1l3374
  8385  0D41                     __end_of_readColumn:	
  8386                           
  8387                           	psect	text42
  8388  0BF3                     __ptext42:	
  8389 ;; *************** function _I2C_vSlaveIsrSSP1 *****************
  8390 ;; Defined at:
  8391 ;;		line 492 in file "i2cUtil.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;		None
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;		None
  8396 ;; Return value:  Size  Location     Type
  8397 ;;                  1    wreg      void 
  8398 ;; Registers used:
  8399 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8400 ;; Tracked objects:
  8401 ;;		On entry : 0/0
  8402 ;;		On exit  : 0/0
  8403 ;;		Unchanged: 0/0
  8404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8405 ;;      Params:         0       0       0       0       0       0
  8406 ;;      Locals:         0       0       0       0       0       0
  8407 ;;      Temps:          2       0       0       0       0       0
  8408 ;;      Totals:         2       0       0       0       0       0
  8409 ;;Total ram usage:        2 bytes
  8410 ;; Hardware stack levels used:    1
  8411 ;; Hardware stack levels required when called:    1
  8412 ;; This function calls:
  8413 ;;		_ssp1_vCallback
  8414 ;;		_vDmyCallback
  8415 ;; This function is called by:
  8416 ;;		_ISR
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function _I2C_vSlaveIsrSSP1
  8422  0BF3                     _I2C_vSlaveIsrSSP1:	
  8423                           
  8424                           ;i2cUtil.c: 497:     if (SSP1IF == 1) {
  8425                           
  8426                           ;incstack = 0
  8427                           ; Regs used in _I2C_vSlaveIsrSSP1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8428  0BF3  0020               	movlb	0	; select bank0
  8429  0BF4  1D91               	btfss	17,3	;volatile
  8430  0BF5  2C0D               	goto	i1l4442
  8431                           
  8432                           ;i2cUtil.c: 498:         SSP1CON2bits.ACKDT = 0x00;
  8433  0BF6  0024               	movlb	4	; select bank4
  8434  0BF7  1296               	bcf	22,5	;volatile
  8435                           
  8436                           ;i2cUtil.c: 499:         pvSSP1Func(1, ((SSP1STAT & 0b00100101) | (SSP1CON2 & 0b01000000
      +                          )));
  8437  0BF8  01F0               	clrf	vDmyCallback@u8BusNo
  8438  0BF9  0AF0               	incf	vDmyCallback@u8BusNo,f
  8439  0BFA  3040               	movlw	64
  8440  0BFB  0516               	andwf	22,w	;volatile
  8441  0BFC  00F5               	movwf	??_I2C_vSlaveIsrSSP1
  8442  0BFD  0814               	movf	20,w	;volatile
  8443  0BFE  3925               	andlw	37
  8444  0BFF  0475               	iorwf	??_I2C_vSlaveIsrSSP1,w
  8445  0C00  00F6               	movwf	??_I2C_vSlaveIsrSSP1+1
  8446  0C01  0876               	movf	??_I2C_vSlaveIsrSSP1+1,w
  8447  0C02  00F1               	movwf	vDmyCallback@u8EvtType
  8448  0C03  0021               	movlb	1	; select bank1
  8449  0C04  0856               	movf	(_pvSSP1Func+1)^(0+128),w
  8450  0C05  008A               	movwf	10
  8451  0C06  0855               	movf	_pvSSP1Func^(0+128),w
  8452  0C07  000A               	callw
  8453  0C08  318B               	pagesel	$
  8454                           
  8455                           ;i2cUtil.c: 500:         SSP1IF = 0;
  8456  0C09  0020               	movlb	0	; select bank0
  8457  0C0A  1191               	bcf	17,3	;volatile
  8458                           
  8459                           ;i2cUtil.c: 501:         SSP1CON1bits.CKP = 1;
  8460  0C0B  0024               	movlb	4	; select bank4
  8461  0C0C  1615               	bsf	21,4	;volatile
  8462  0C0D                     i1l4442:	
  8463                           
  8464                           ;i2cUtil.c: 504:     if (BCL1IF == 1) {
  8465  0C0D  0020               	movlb	0	; select bank0
  8466  0C0E  1D92               	btfss	18,3	;volatile
  8467  0C0F  0008               	return
  8468                           
  8469                           ;i2cUtil.c: 505:         pvSSP1Func(1, I2C_SLV_EVT_BUS_ERROR);
  8470  0C10  01F0               	clrf	vDmyCallback@u8BusNo
  8471  0C11  0AF0               	incf	vDmyCallback@u8BusNo,f
  8472  0C12  30FF               	movlw	255
  8473  0C13  00F5               	movwf	??_I2C_vSlaveIsrSSP1
  8474  0C14  0875               	movf	??_I2C_vSlaveIsrSSP1,w
  8475  0C15  00F1               	movwf	vDmyCallback@u8EvtType
  8476  0C16  0021               	movlb	1	; select bank1
  8477  0C17  0856               	movf	(_pvSSP1Func+1)^(0+128),w
  8478  0C18  008A               	movwf	10
  8479  0C19  0855               	movf	_pvSSP1Func^(0+128),w
  8480  0C1A  000A               	callw
  8481  0C1B  318B               	pagesel	$
  8482                           
  8483                           ;i2cUtil.c: 507:         BCL1IF = 0;
  8484  0C1C  0020               	movlb	0	; select bank0
  8485  0C1D  1192               	bcf	18,3	;volatile
  8486  0C1E  0008               	return
  8487  0C1F                     __end_of_I2C_vSlaveIsrSSP1:	
  8488                           
  8489                           	psect	text43
  8490  0C1F                     __ptext43:	
  8491 ;; *************** function _ssp1_vCallback *****************
  8492 ;; Defined at:
  8493 ;;		line 321 in file "TestMain.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;  u8BusNo         1    0[COMMON] unsigned char 
  8496 ;;  u8EvtType       1    1[COMMON] unsigned char 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  u8Data          1    0        unsigned char 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  1    wreg      void 
  8501 ;; Registers used:
  8502 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8508 ;;      Params:         2       0       0       0       0       0
  8509 ;;      Locals:         1       0       0       0       0       0
  8510 ;;      Temps:          2       0       0       0       0       0
  8511 ;;      Totals:         5       0       0       0       0       0
  8512 ;;Total ram usage:        5 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; This function calls:
  8515 ;;		Nothing
  8516 ;; This function is called by:
  8517 ;;		_main
  8518 ;;		_I2C_vSlaveIsrSSP1
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           
  8523                           ;psect for function _ssp1_vCallback
  8524  0C1F                     _ssp1_vCallback:	
  8525                           
  8526                           ;TestMain.c: 322:     unsigned char u8Data;;TestMain.c: 323:     switch (u8EvtType) {
  8527                           
  8528                           ;incstack = 0
  8529                           ; Regs used in _ssp1_vCallback: [wreg-fsr0h+status,2+status,0]
  8530  0C1F  2C37               	goto	i1l3680
  8531  0C20                     i1l3666:	
  8532  0C20  0024               	movlb	4	; select bank4
  8533  0C21  0811               	movf	17,w	;volatile
  8534                           
  8535                           ;TestMain.c: 328:             break;
  8536  0C22  0008               	return
  8537  0C23                     i1l3668:	
  8538                           
  8539                           ;TestMain.c: 332:             u8RxData = SSP1BUF;
  8540  0C23  0024               	movlb	4	; select bank4
  8541  0C24  0811               	movf	17,w	;volatile
  8542  0C25  00F2               	movwf	??_ssp1_vCallback
  8543  0C26  0872               	movf	??_ssp1_vCallback,w
  8544  0C27  0020               	movlb	0	; select bank0
  8545  0C28  00E6               	movwf	_u8RxData
  8546                           
  8547                           ;TestMain.c: 333:             break;
  8548  0C29  0008               	return
  8549  0C2A                     i1l3670:	
  8550  0C2A  0024               	movlb	4	; select bank4
  8551  0C2B  0811               	movf	17,w	;volatile
  8552  0C2C                     L2:	
  8553                           
  8554                           ;TestMain.c: 339:             SSP1BUF = u8RxData;
  8555  0C2C  0020               	movlb	0	; select bank0
  8556  0C2D  0866               	movf	_u8RxData,w
  8557  0C2E  0024               	movlb	4	; select bank4
  8558  0C2F  0091               	movwf	17	;volatile
  8559                           
  8560                           ;TestMain.c: 340:             u8RxData++;
  8561  0C30  3001               	movlw	1
  8562  0C31  00F2               	movwf	??_ssp1_vCallback
  8563  0C32  0872               	movf	??_ssp1_vCallback,w
  8564  0C33  0020               	movlb	0	; select bank0
  8565  0C34  07E6               	addwf	_u8RxData,f
  8566                           
  8567                           ;TestMain.c: 341:             break;
  8568  0C35  0008               	return
  8569  0C36                     i1l3674:	
  8570  0C36  2C2C               	goto	L2
  8571  0C37                     i1l3680:	
  8572                           ;TestMain.c: 345:             SSP1BUF = u8RxData;
  8573                           
  8574  0C37  0871               	movf	ssp1_vCallback@u8EvtType,w
  8575  0C38  00F2               	movwf	??_ssp1_vCallback
  8576  0C39  01F3               	clrf	??_ssp1_vCallback+1
  8577                           
  8578                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8579                           ; Switch size 1, requested type "simple"
  8580                           ; Number of cases is 1, Range of values is 0 to 0
  8581                           ; switch strategies available:
  8582                           ; Name         Instructions Cycles
  8583                           ; simple_byte            4     3 (average)
  8584                           ; direct_byte            8     6 (fixed)
  8585                           ; jumptable            260     6 (fixed)
  8586                           ;	Chosen strategy is simple_byte
  8587  0C3A  0873               	movf	??_ssp1_vCallback+1,w
  8588  0C3B  3A00               	xorlw	0	; case 0
  8589  0C3C  1903               	skipnz
  8590  0C3D  2C3F               	goto	i1l6900
  8591  0C3E  2C50               	goto	i1l147
  8592  0C3F                     i1l6900:	
  8593                           
  8594                           ; Switch size 1, requested type "simple"
  8595                           ; Number of cases is 5, Range of values is 1 to 100
  8596                           ; switch strategies available:
  8597                           ; Name         Instructions Cycles
  8598                           ; simple_byte           16     9 (average)
  8599                           ; direct_byte          209     9 (fixed)
  8600                           ; jumptable            263     9 (fixed)
  8601                           ;	Chosen strategy is simple_byte
  8602  0C3F  0872               	movf	??_ssp1_vCallback,w
  8603  0C40  3A01               	xorlw	1	; case 1
  8604  0C41  1903               	skipnz
  8605  0C42  2C20               	goto	i1l3666
  8606  0C43  3A04               	xorlw	4	; case 5
  8607  0C44  1903               	skipnz
  8608  0C45  2C2A               	goto	i1l3670
  8609  0C46  3A24               	xorlw	36	; case 33
  8610  0C47  1903               	skipnz
  8611  0C48  2C23               	goto	i1l3668
  8612  0C49  3A05               	xorlw	5	; case 36
  8613  0C4A  1903               	skipnz
  8614  0C4B  2C36               	goto	i1l3674
  8615  0C4C  3A40               	xorlw	64	; case 100
  8616  0C4D  1903               	skipnz
  8617  0C4E  2C50               	goto	i1l147
  8618  0C4F  2C50               	goto	i1l147
  8619  0C50                     i1l147:	
  8620  0C50  0008               	return
  8621  0C51                     __end_of_ssp1_vCallback:	
  8622                           
  8623                           	psect	text44
  8624  0003                     __ptext44:	
  8625 ;; *************** function _vDmyCallback *****************
  8626 ;; Defined at:
  8627 ;;		line 636 in file "i2cUtil.c"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;  u8BusNo         1    0[COMMON] unsigned char 
  8630 ;;  u8EvtType       1    1[COMMON] unsigned char 
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;		None
  8633 ;; Return value:  Size  Location     Type
  8634 ;;                  1    wreg      void 
  8635 ;; Registers used:
  8636 ;;		None
  8637 ;; Tracked objects:
  8638 ;;		On entry : 0/0
  8639 ;;		On exit  : 0/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8642 ;;      Params:         2       0       0       0       0       0
  8643 ;;      Locals:         0       0       0       0       0       0
  8644 ;;      Temps:          0       0       0       0       0       0
  8645 ;;      Totals:         2       0       0       0       0       0
  8646 ;;Total ram usage:        2 bytes
  8647 ;; Hardware stack levels used:    1
  8648 ;; This function calls:
  8649 ;;		Nothing
  8650 ;; This function is called by:
  8651 ;;		_I2C_vSlaveIsrSSP2
  8652 ;;		_I2C_vSlaveIsrSSP1
  8653 ;; This function uses a non-reentrant model
  8654 ;;
  8655                           
  8656                           
  8657                           ;psect for function _vDmyCallback
  8658  0003                     _vDmyCallback:	
  8659                           
  8660                           ;i2cUtil.c: 637:     return;
  8661                           
  8662                           ;incstack = 0
  8663                           ; Regs used in _vDmyCallback: []
  8664  0003  0008               	return
  8665  0004                     __end_of_vDmyCallback:	
  8666  007E                     btemp	set	126	;btemp
  8667  007E                     int$flags	set	126
  8668  007E                     wtemp0	set	126


Data Sizes:
    Strings     387
    Constant    34
    Data        12
    BSS         19
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     62      71
    BANK1            80     43      65
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    memset@dest	PTR void  size(1) Largest target is 27
		 -> main@keypadSts(BANK1[27]), 

    memset@s	PTR unsigned char  size(1) Largest target is 27
		 -> main@keypadSts(BANK1[27]), 

    ST7032_vWriteDataSSP2@pcData	PTR unsigned char  size(1) Largest target is 1
		 -> ssp2_vLCDTest01@val(BANK1[1]), 

    ST7032_vWriteDataSSP2@pu8WkData	PTR unsigned char  size(1) Largest target is 1
		 -> ssp2_vLCDTest01@val(BANK1[1]), 

    ST7032_vWriteStringSSP2@pcStr	PTR unsigned char  size(2) Largest target is 17
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[17]), 
		 -> STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[17]), 
		 -> STR_20(CODE[13]), STR_19(CODE[16]), STR_18(CODE[16]), STR_17(CODE[15]), 
		 -> STR_16(CODE[15]), STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[17]), 
		 -> STR_12(CODE[17]), STR_11(CODE[3]), STR_10(CODE[3]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[3]), STR_2(CODE[17]), STR_1(CODE[17]), 

    ST7032_vWriteStringSSP2@pcWkData	PTR unsigned char  size(2) Largest target is 17
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[17]), 
		 -> STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[17]), 
		 -> STR_20(CODE[13]), STR_19(CODE[16]), STR_18(CODE[16]), STR_17(CODE[15]), 
		 -> STR_16(CODE[15]), STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[17]), 
		 -> STR_12(CODE[17]), STR_11(CODE[3]), STR_10(CODE[3]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[3]), STR_2(CODE[17]), STR_1(CODE[17]), 

    ST7032_vWriteCGRAMSSP2@pu8BitMap	PTR unsigned char  size(1) Largest target is 8
		 -> ssp2_vLCDTest03@u8BitMap(BANK1[8]), 

    ST7032_vWriteCGRAMSSP2@pu8WkMap	PTR unsigned char  size(1) Largest target is 8
		 -> ssp2_vLCDTest03@u8BitMap(BANK1[8]), 

    spKEYPAD_status	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), main@keypadSts(BANK1[27]), 

    sp__memset	PTR void  size(1) Largest target is 27
		 -> main@keypadSts(BANK1[27]), 

    KEYPAD_vInit@spStatus	PTR struct . size(1) Largest target is 27
		 -> main@keypadSts(BANK1[27]), 

    I2C_vInitSlaveSSP1@pvCallback	PTR FTN(unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> ssp1_vCallback(), 

    pvSSP2Func	PTR FTN(unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> vDmyCallback(), 

    pvSSP1Func	PTR FTN(unsigned char ,unsigned char ,)void  size(2) Largest target is 1
		 -> vDmyCallback(), ssp1_vCallback(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _timer_vInterrupt->_KEYPAD_bUpdateBuffer
    _KEYPAD_bUpdateBuffer->_KEYPAD_u8Read
    _KEYPAD_u8Read->_readColumn
    _I2C_vSlaveIsrSSP1->_ssp1_vCallback

Critical Paths under _main in BANK0

    _ssp2_vLCDTest04->_ST7032_bSetCursorSSP2
    _ssp2_vLCDTest04->_ST7032_vClearIconSSP2
    _ssp2_vLCDTest04->_ST7032_vWriteIconSSP2
    _ST7032_vWriteIconSSP2->_bSetCursorSSP2
    _ST7032_vClearIconSSP2->_bSetCursorSSP2
    _ssp2_vLCDTest03->_ST7032_bSetCursorSSP2
    _ssp2_vLCDTest03->_ST7032_vWriteCGRAMSSP2
    _ST7032_vWriteCGRAMSSP2->_bSetCursorSSP2
    _ssp2_vLCDTest02->_ST7032_bSetCursorSSP2
    _ST7032_vDispSettingSSP2->_I2C_u8MstStartSSP2
    _ST7032_vDispSettingSSP2->_vExecCmdEndSSP2
    _ST7032_u8GetCursorRowNoSSP2->___awdiv
    _ST7032_u8GetCursorColNoSSP2->___awmod
    _ST7032_bCursorRightSSP2->_bSetCursorSSP2
    _ST7032_bCursorLeftSSP2->_bSetCursorSSP2
    _ssp2_vLCDTest01->_ST7032_bSetCursorSSP2
    _rand->___omul
    _ST7032_vWriteStringSSP2->___awmod
    _ST7032_vWriteDataSSP2->___awmod
    _ST7032_vWriteCharSSP2->___awmod
    _ST7032_vClearDispSSP2->_I2C_u8MstStartSSP2
    _ST7032_vClearDispSSP2->_vExecCmdEndSSP2
    _ST7032_bSetCursorSSP2->_bSetCursorSSP2
    _bSetCursorSSP2->___awmod
    ___awmod->_rand
    _ST7032_vInitSSP2->_I2C_u8MstStartSSP2
    _ST7032_vInitSSP2->_vExecCmdEndSSP2
    _ST7032_vInitSSP2->_vExecCmdSSP2
    _vExecCmdSSP2->_I2C_u8MstTxSSP2
    _vExecCmdEndSSP2->_I2C_u8MstTxSSP2
    _KEYPAD_vInit->_memset

Critical Paths under _ISR in BANK0

    _ISR->_timer_vInterrupt
    _timer_vInterrupt->_KEYPAD_u8Read
    _KEYPAD_bUpdateBuffer->_KEYPAD_u8Read

Critical Paths under _main in BANK1

    _main->_ssp2_vLCDTest03
    _ssp2_vLCDTest04->_ST7032_bSetCursorSSP2
    _ssp2_vLCDTest03->_ST7032_bSetCursorSSP2
    _ssp2_vLCDTest03->_ST7032_vWriteCGRAMSSP2
    _ssp2_vLCDTest02->_ST7032_bSetCursorSSP2
    _ssp2_vLCDTest01->_ST7032_bSetCursorSSP2

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0  178965
                                             15 BANK1     28    28      0
                _I2C_vInitMasterSSP2
                 _I2C_vInitSlaveSSP1
                       _KEYPAD_vInit
                   _ST7032_vInitSSP2
                    _ssp2_vLCDTest01
                    _ssp2_vLCDTest02
                    _ssp2_vLCDTest03
                    _ssp2_vLCDTest04
 ---------------------------------------------------------------------------------
 (1) _ssp2_vLCDTest04                                      4     4      0   48480
                                              4 BANK1      4     4      0
              _ST7032_bSetCursorSSP2
              _ST7032_vClearDispSSP2
              _ST7032_vClearIconSSP2
            _ST7032_vDispSettingSSP2
              _ST7032_vWriteCharSSP2
              _ST7032_vWriteIconSSP2
            _ST7032_vWriteStringSSP2
 ---------------------------------------------------------------------------------
 (2) _ST7032_vWriteIconSSP2                                2     1      1    8636
                                             61 BANK0      1     0      1
                                              0 BANK1      1     1      0
                 _I2C_u8MstStartSSP2
                    _I2C_u8MstTxSSP2
                   _I2C_vMstStopSSP2
                     _bSetCursorSSP2
                       _vExecCmdSSP2
 ---------------------------------------------------------------------------------
 (2) _ST7032_vClearIconSSP2                                2     2      0    8614
                                             61 BANK0      1     1      0
                                              0 BANK1      1     1      0
                 _I2C_u8MstStartSSP2
                    _I2C_u8MstTxSSP2
                   _I2C_vMstStopSSP2
                     _bSetCursorSSP2
                    _vExecCmdEndSSP2
                       _vExecCmdSSP2
 ---------------------------------------------------------------------------------
 (1) _ssp2_vLCDTest03                                     11    11      0   42596
                                              4 BANK1     11    11      0
              _ST7032_bSetCursorSSP2
              _ST7032_vClearDispSSP2
            _ST7032_vDispSettingSSP2
             _ST7032_vWriteCGRAMSSP2
              _ST7032_vWriteCharSSP2
            _ST7032_vWriteStringSSP2
 ---------------------------------------------------------------------------------
 (2) _ST7032_vWriteCGRAMSSP2                               5     4      1    9371
                                             61 BANK0      1     0      1
                                              0 BANK1      4     4      0
                 _I2C_u8MstStartSSP2
                    _I2C_u8MstTxSSP2
                   _I2C_vMstStopSSP2
                     _bSetCursorSSP2
                       _vExecCmdSSP2
 ---------------------------------------------------------------------------------
 (1) _ssp2_vLCDTest02                                      3     3      0   48995
                                              4 BANK1      3     3      0
             _ST7032_bCursorLeftSSP2
            _ST7032_bCursorRightSSP2
              _ST7032_bSetCursorSSP2
        _ST7032_u8GetCursorColNoSSP2
        _ST7032_u8GetCursorRowNoSSP2
              _ST7032_vClearDispSSP2
            _ST7032_vDispSettingSSP2
              _ST7032_vWriteCharSSP2
            _ST7032_vWriteStringSSP2
 ---------------------------------------------------------------------------------
 (2) _ST7032_vDispSettingSSP2                              5     3      2    4537
                                             11 BANK0      5     3      2
                 _I2C_u8MstStartSSP2
                    _vExecCmdEndSSP2
 ---------------------------------------------------------------------------------
 (2) _ST7032_u8GetCursorRowNoSSP2                          2     2      0    1705
                                             18 BANK0      2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _ST7032_u8GetCursorColNoSSP2                          2     2      0    2773
                                             51 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _ST7032_bCursorRightSSP2                              0     0      0    6529
                     _bSetCursorSSP2
 ---------------------------------------------------------------------------------
 (2) _ST7032_bCursorLeftSSP2                               0     0      0    6529
                     _bSetCursorSSP2
 ---------------------------------------------------------------------------------
 (1) _ssp2_vLCDTest01                                      4     4      0   34877
                                              4 BANK1      4     4      0
              _ST7032_bSetCursorSSP2
              _ST7032_vClearDispSSP2
              _ST7032_vWriteCharSSP2
              _ST7032_vWriteDataSSP2
            _ST7032_vWriteStringSSP2
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                10     8      2     316
                                             34 BANK0     10     8      2
                             ___omul
 ---------------------------------------------------------------------------------
 (3) ___omul                                              25     9     16     316
                                              9 BANK0     25     9     16
 ---------------------------------------------------------------------------------
 (2) _ST7032_vWriteStringSSP2                              8     6      2    7707
                                             51 BANK0      8     6      2
                 _I2C_u8MstStartSSP2
                    _I2C_u8MstTxSSP2
                   _I2C_vMstStopSSP2
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _ST7032_vWriteDataSSP2                                9     8      1    4990
                                             51 BANK0      9     8      1
                 _I2C_u8MstStartSSP2
                    _I2C_u8MstTxSSP2
                   _I2C_vMstStopSSP2
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _ST7032_vWriteCharSSP2                                2     2      0    4697
                                             51 BANK0      2     2      0
                 _I2C_u8MstStartSSP2
                    _I2C_u8MstTxSSP2
                   _I2C_vMstStopSSP2
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _ST7032_vClearDispSSP2                                1     1      0    1924
                                             11 BANK0      1     1      0
                 _I2C_u8MstStartSSP2
                    _vExecCmdEndSSP2
 ---------------------------------------------------------------------------------
 (2) _ST7032_bSetCursorSSP2                                5     4      1   12074
                                             61 BANK0      1     0      1
                                              0 BANK1      4     4      0
                             ___bmul
                     _bSetCursorSSP2
 ---------------------------------------------------------------------------------
 (3) _bSetCursorSSP2                                      10    10      0    6529
                                             51 BANK0     10    10      0
                 _I2C_u8MstStartSSP2
                            ___awdiv
                            ___awmod
                    _vExecCmdEndSSP2
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    2773
                                             44 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1705
                                              9 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     316
                                              9 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _ST7032_vInitSSP2                                     1     1      0    1986
                                             11 BANK0      1     1      0
                 _I2C_u8MstStartSSP2
                    _vExecCmdEndSSP2
                       _vExecCmdSSP2
 ---------------------------------------------------------------------------------
 (3) _vExecCmdSSP2                                         1     1      0      62
                                             10 BANK0      1     1      0
                    _I2C_u8MstTxSSP2
 ---------------------------------------------------------------------------------
 (4) _vExecCmdEndSSP2                                      1     1      0      62
                                             10 BANK0      1     1      0
                    _I2C_u8MstTxSSP2
                   _I2C_vMstStopSSP2
 ---------------------------------------------------------------------------------
 (3) _I2C_vMstStopSSP2                                     0     0      0       0
                    _vMasterWaitSSP2
 ---------------------------------------------------------------------------------
 (3) _I2C_u8MstTxSSP2                                      1     1      0      31
                                              9 BANK0      1     1      0
                    _vMasterWaitSSP2
 ---------------------------------------------------------------------------------
 (3) _I2C_u8MstStartSSP2                                   2     1      1    1862
                                              9 BANK0      2     1      1
                    _vMasterWaitSSP2
 ---------------------------------------------------------------------------------
 (4) _vMasterWaitSSP2                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KEYPAD_vInit                                         2     2      0    1113
                                             19 BANK0      2     2      0
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                              10     6      4     904
                                              9 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (1) _I2C_vInitSlaveSSP1                                   4     1      3     240
                                              9 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _I2C_vInitMasterSSP2                                  2     1      1     120
                                              9 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    1756
                  _I2C_vSlaveIsrSSP1
                   _timer_vInterrupt
 ---------------------------------------------------------------------------------
 (8) _timer_vInterrupt                                     2     2      0    1308
                                              7 BANK0      2     2      0
               _KEYPAD_bUpdateBuffer
                      _KEYPAD_u8Read
 ---------------------------------------------------------------------------------
 (9) _KEYPAD_bUpdateBuffer                                 4     4      0     699
                                             10 COMMON     4     4      0
                      _KEYPAD_u8Read
                 _criticalSec_vBegin
                   _criticalSec_vEnd
 ---------------------------------------------------------------------------------
 (10) _criticalSec_vEnd                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _criticalSec_vBegin                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _KEYPAD_u8Read                                        9     9      0     609
                                              8 COMMON     2     2      0
                                              0 BANK0      7     7      0
                         _readColumn
 ---------------------------------------------------------------------------------
 (10) _readColumn                                          8     8      0     205
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (8) _I2C_vSlaveIsrSSP1                                    2     2      0     448
                                              5 COMMON     2     2      0
                     _ssp1_vCallback *
                       _vDmyCallback *
 ---------------------------------------------------------------------------------
 (9) _vDmyCallback                                         2     0      2     424
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (9) _ssp1_vCallback                                       5     3      2      24
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_vInitMasterSSP2
   _I2C_vInitSlaveSSP1
   _KEYPAD_vInit
     _memset
   _ST7032_vInitSSP2
     _I2C_u8MstStartSSP2
       _vMasterWaitSSP2
     _vExecCmdEndSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
     _vExecCmdSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
   _ssp2_vLCDTest01
     _ST7032_bSetCursorSSP2
       ___bmul
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
           _rand (ARG)
             ___omul
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
     _ST7032_vClearDispSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _vExecCmdEndSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
         _I2C_vMstStopSSP2
           _vMasterWaitSSP2
     _ST7032_vWriteCharSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       ___awmod
         _rand (ARG)
           ___omul
     _ST7032_vWriteDataSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       ___awmod
         _rand (ARG)
           ___omul
     _ST7032_vWriteStringSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       ___awmod
         _rand (ARG)
           ___omul
     ___awmod
       _rand (ARG)
         ___omul
     _rand
       ___omul
   _ssp2_vLCDTest02
     _ST7032_bCursorLeftSSP2
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
           _rand (ARG)
             ___omul
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
     _ST7032_bCursorRightSSP2
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
           _rand (ARG)
             ___omul
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
     _ST7032_bSetCursorSSP2
       ___bmul
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
           _rand (ARG)
             ___omul
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
     _ST7032_u8GetCursorColNoSSP2
       ___awmod
         _rand (ARG)
           ___omul
     _ST7032_u8GetCursorRowNoSSP2
       ___awdiv
     _ST7032_vClearDispSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _vExecCmdEndSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
         _I2C_vMstStopSSP2
           _vMasterWaitSSP2
     _ST7032_vDispSettingSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _vExecCmdEndSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
         _I2C_vMstStopSSP2
           _vMasterWaitSSP2
     _ST7032_vWriteCharSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       ___awmod
         _rand (ARG)
           ___omul
     _ST7032_vWriteStringSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       ___awmod
         _rand (ARG)
           ___omul
   _ssp2_vLCDTest03
     _ST7032_bSetCursorSSP2
       ___bmul
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
           _rand (ARG)
             ___omul
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
     _ST7032_vClearDispSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _vExecCmdEndSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
         _I2C_vMstStopSSP2
           _vMasterWaitSSP2
     _ST7032_vDispSettingSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _vExecCmdEndSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
         _I2C_vMstStopSSP2
           _vMasterWaitSSP2
     _ST7032_vWriteCGRAMSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
           _rand (ARG)
             ___omul
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
       _vExecCmdSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
     _ST7032_vWriteCharSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       ___awmod
         _rand (ARG)
           ___omul
     _ST7032_vWriteStringSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       ___awmod
         _rand (ARG)
           ___omul
   _ssp2_vLCDTest04
     _ST7032_bSetCursorSSP2
       ___bmul
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
           _rand (ARG)
             ___omul
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
     _ST7032_vClearDispSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _vExecCmdEndSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
         _I2C_vMstStopSSP2
           _vMasterWaitSSP2
     _ST7032_vClearIconSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
           _rand (ARG)
             ___omul
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
       _vExecCmdEndSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
         _I2C_vMstStopSSP2
           _vMasterWaitSSP2
       _vExecCmdSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
     _ST7032_vDispSettingSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _vExecCmdEndSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
         _I2C_vMstStopSSP2
           _vMasterWaitSSP2
     _ST7032_vWriteCharSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       ___awmod
         _rand (ARG)
           ___omul
     _ST7032_vWriteIconSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       _bSetCursorSSP2
         _I2C_u8MstStartSSP2
           _vMasterWaitSSP2
         ___awdiv
         ___awmod
           _rand (ARG)
             ___omul
         _vExecCmdEndSSP2
           _I2C_u8MstTxSSP2
             _vMasterWaitSSP2
           _I2C_vMstStopSSP2
             _vMasterWaitSSP2
       _vExecCmdSSP2
         _I2C_u8MstTxSSP2
           _vMasterWaitSSP2
     _ST7032_vWriteStringSSP2
       _I2C_u8MstStartSSP2
         _vMasterWaitSSP2
       _I2C_u8MstTxSSP2
         _vMasterWaitSSP2
       _I2C_vMstStopSSP2
         _vMasterWaitSSP2
       ___awmod
         _rand (ARG)
           ___omul

 _ISR (ROOT)
   _I2C_vSlaveIsrSSP1
     _ssp1_vCallback *
     _vDmyCallback *
   _timer_vInterrupt
     _KEYPAD_bUpdateBuffer
       _KEYPAD_u8Read
         _readColumn
       _criticalSec_vBegin
       _criticalSec_vEnd
     _KEYPAD_u8Read
       _readColumn

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      96       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3E      47       6       88.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     2B      41       8       81.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      96      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Jul 11 06:53:11 2019

                     _vMasterWaitSSP2 0A65                      readColumn@u8Port 0074  
               I2C_u8MstTxSSP2@u8Data 0029              __size_of_vExecCmdEndSSP2 000E  
                      ___bmul@product 002B                       readColumn@portA 0072  
                     readColumn@portB 0073                           __CFG_CP$OFF 0000  
                     _spKEYPAD_status 0063                          ___awdiv@sign 002F  
                      ??_vExecCmdSSP2 002A  __size_of_ST7032_u8GetCursorColNoSSP2 0011  
                                 l202 0123                                   l193 008E  
                                 l188 0057                                   l198 00EF  
                                 l359 0B1F                                   l398 0A65  
                                 _GIE 005F               ssp2_vLCDTest03@u8BitMap 00A7  
                                 _RB0 0068                                   _RB3 006B  
                        __CFG_CPD$OFF 0000                                   _ISR 0004  
                  _I2C_u8MstStartSSP2 0B13                          ___awmod@sign 0052  
                        __CFG_BORV$HI 0000                                   wreg 0009  
      __size_of_ST7032_bSetCursorSSP2 002A         __end_of_ST7032_bSetCursorSSP2 0BF3  
                    _timer_vInterrupt 0B51                          __CFG_LVP$OFF 0000  
                                ?_ISR 0070                   ?_I2C_u8MstStartSSP2 0029  
                                l6130 03E9                                  l6108 03AE  
                                l3912 06E0                                  l5432 0B23  
                                l5520 0D82                                  l5512 0D71  
                                l5600 0DF5                                  l6224 07DB  
                                l3922 0BB4                                  l5450 0EFA  
                                l5506 0D59                                  l3924 0BB6  
                                l5508 0D65                                  l5516 0D7A  
                                l6148 0712                                  l3950 0B0A  
                                l3918 0BAC                                  l5630 0E6D  
                                l5542 0E1F                                  l6158 072A  
                                l5552 0AD8                                  l5456 0F05  
                                l5632 0E86                                  l5482 0F3C  
                                l5474 0F2B                                  l5466 0F0D  
                                l5546 0E31                                  l5706 0ECF  
                                l3948 0B08                                  l5556 0ADE  
                                l5468 0F19                                  l5572 0BD4  
                                l5478 0F34                                  l5494 0D4C  
                                l5584 0BEF                                  l5576 0BD6  
                                l5648 0A94                                  l5904 013E  
                                l5498 0D53                                  l5818 04BD  
                                l5658 0A88                                  l5906 0141  
                                l5940 01E1                                  l5932 01B9  
                                l5924 018E                                  l5844 0074  
                                l5598 0DDC                                  l5862 00AC  
                                l5846 0077                                  l5678 0F6E  
                                l5960 0251                                  l5864 00AF  
            ??_ST7032_bCursorLeftSSP2 005D                                  l5794 0453  
                                l5954 022C                                  l5948 0208  
                                l5886 0109                                  l5888 010C  
                                STR_1 082C                                  STR_2 08E7  
                                STR_3 098A                                  STR_4 083D  
                                STR_5 0892                                  STR_6 094D  
                                STR_7 093C                                  STR_8 084E  
                                STR_9 0881                                  u3115 0F1A  
                                u3125 0F24                                  u3135 0F2C  
                                u3215 0D6B                                  u3225 0D72  
                                u3315 0B3B                                  u4107 0C9D  
                                u3260 0E1C                                  u3325 0B41  
                                u4117 0CA5                ??_KEYPAD_bUpdateBuffer 007A  
                                u3095 0F10                                  u3255 0DB2  
                                u4207 0F60                                  u3415 0F55  
                                u4127 0CB6                                  u4217 0F77  
                                u4137 0EB0                                  u3195 0D5C  
                                u4307 0232                                  u4227 007D  
                                u4147 0EB8                                  u3445 0FBF  
                                u4317 0257                                  u4237 00B5  
                                u4157 0EC0                                  u4077 07D3  
                                u4407 0FAD                                  u3375 064D  
                                u3455 042F                                  u4327 0B4D  
                                u4247 0112                                  u4167 0ED4  
                                u4087 0764                                  u4417 0FB8  
                                u4337 0474                                  u4257 0147  
                                u4177 03B8                                  u4097 0C92  
                                u3650 026A                                  u4427 0FC8  
                                u4347 04E1                                  u3475 0499  
                                u4267 0194                                  u4187 03F3  
                                _PEIE 005E                                  u4437 0FD0  
                                u4357 0DEC                                  u4277 01BF  
                                u4197 0F4E                                  u4447 0FD8  
                                u4367 0E79                                  u4287 01E7  
                                u4457 0FE0                                  u4377 0AF7  
                                u4297 020E                                  u4467 0FE8  
                                u4387 0DC8                                  u4477 0FF0  
                                u4397 0FA5                                  u3685 0737  
                                u4487 0FFB                                  _TMR0 0015  
                        __CFG_WRT$OFF 0000                                  _main 077D  
                                _rand 05BF                                  _seed 00D9  
                                fsr0h 0005                                  fsr1h 0007  
                                indf0 0000                                  fsr0l 0004  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                         __CFG_BOREN$ON 0000  
                                start 000D                         __CFG_IESO$OFF 0000  
         ST7032_vClearIconSSP2@u8Addr 00A0                     ___bmul@multiplier 002C  
                ??_I2C_u8MstStartSSP2 002A                                 ??_ISR 007E  
                       ?_KEYPAD_vInit 0070                      __end_of_HEX_LIST 07F9  
                       _KEYPAD_u8Read 04F2                                 ?_main 0070  
                               ?_rand 0042                      __end_of_KEY_LIST 081B  
                     __end_of___awdiv 0F41                     ?_ST7032_vInitSSP2 0070  
                               STR_20 097D                                 STR_12 0870  
                               STR_21 085F                                 STR_22 085F  
                               STR_30 08F8                                 STR_23 092B  
                               STR_31 08D6                                 STR_16 096E  
                               STR_32 0909                                 STR_24 08A3  
                               STR_17 096E                                 STR_25 07F9  
                       __CFG_WDTE$OFF 0000                                 STR_18 095E  
                               STR_26 081B                                 STR_19 095E  
                               STR_27 08B4                                 STR_28 091A  
                     __end_of___awmod 0D87                                 STR_29 08C5  
                     ___awdiv@divisor 0029                                 i1l129 0B77  
                               i1l147 0C50                       ___awdiv@counter 002E  
                               _PORTA 000C                                 _PORTB 000D  
                               _TRISA 008C                                 _TRISB 008D  
                  ??_ST7032_vInitSSP2 002B  __size_of_ST7032_u8GetCursorRowNoSSP2 0011  
                       __CFG_PWRTE$ON 0000                        __CFG_FCMEN$OFF 0000  
        ST7032_bSetCursorSSP2@u8ColNo 005D              ?_ST7032_bCursorRightSSP2 0070  
            ?_ST7032_vWriteStringSSP2 0053          ST7032_bSetCursorSSP2@u8RowNo 00A2  
                ssp2_vLCDTest03@F2641 00CB                                 pclath 000A  
             __end_of_I2C_u8MstTxSSP2 0A77                                 status 0003  
             __end_of_vMasterWaitSSP2 0A6D                                 wtemp0 007E  
               _ST7032_vClearDispSSP2 0AE7                 _ST7032_vClearIconSSP2 0EA5  
                ssp2_vLCDTest01@u8Idx 00A6                  ssp2_vLCDTest02@u8Idx 00A6  
                ssp2_vLCDTest03@u8Idx 00A6                        __CFG_MCLRE$OFF 0000  
            ?_ST7032_vDispSettingSSP2 002B                  __end_of_vDmyCallback 0004  
                     __initialization 000F          ST7032_vDispSettingSSP2@bDisp 002F  
                        __end_of_main 07E8                          __end_of_rand 065E  
                      ??_KEYPAD_vInit 0033                        ?_KEYPAD_u8Read 0070  
                              ??_main 00AF                                ??_rand 0044  
                   ??_vExecCmdEndSSP2 002A                        __CFG_PLLEN$OFF 0000  
                              _BCL1IE 0493                                _BCL1IF 0093  
                              _BCL2IE 04A1                                _BCL2IF 00A1  
             __size_of_ssp1_vCallback 0032                      ___awdiv@dividend 002B  
                              _ANSELA 018C                                _ANSELB 018D  
     __size_of_ST7032_bCursorLeftSSP2 000B                                i1l3510 04FC  
                              i1l3512 0508                                i1l3380 0D18  
                              i1l3540 0568                                i1l4420 0B5E  
                              i1l3374 0D06                                i1l3518 0515  
                              i1l3526 0522                                i1l3376 0D11  
                              i1l3560 05A8                                i1l3544 056A  
                              i1l3536 0545                                i1l3528 053A  
                              i1l4442 0C0D                                i1l3394 0D38  
                              i1l3378 0D13                                i1l3386 0D1A  
                              i1l4418 0B57                                i1l4426 0B61  
                              i1l3388 0D32                                i1l3548 0558  
                              i1l3670 0C2A                                i1l3566 05AA  
                              i1l3680 0C37                                i1l3674 0C36  
                              i1l3666 0C20                                i1l3668 0C23  
                              i1l6900 0C3F                                i1l6890 0B69  
                              i1l6892 0530                                i1l6894 0535  
                              i1l6896 0D28                                i1l6898 0D2D  
                              u181_25 056D                                _OSCCON 0099  
                              _TMR0IE 005D                                _TMR0IF 005A  
                   ?_I2C_vMstStopSSP2 0070                                _SSP1IE 048B  
                              _SSP1IF 008B                                _SSP2IE 04A0  
                              _SSP2IF 00A0                  __end_of_vExecCmdSSP2 0A82  
           __size_of_criticalSec_vEnd 0008                         main@keypadSts 00B0  
                  ??_I2C_vMstStopSSP2 0029          __size_of_I2C_vInitMasterSSP2 0017  
                KEYPAD_vInit@spStatus 0034                                ___bmul 0AD5  
                              ___omul 0E14                             ??___awdiv 002D  
                      __CFG_STVREN$ON 0000                             ??___awmod 0050  
                              _memset 065E                            _u8KeyValue 0064  
                    ___awdiv@quotient 0030                       ___awmod@divisor 004C  
                     ___awmod@counter 0051       __end_of_ST7032_bCursorRightSSP2 0A99  
             ??_ST7032_vWriteCharSSP2 0053               ??_ST7032_vWriteDataSSP2 0054  
     __end_of_ST7032_vWriteStringSSP2 0E14          I2C_vInitSlaveSSP1@pvCallback 002A  
             ??_ST7032_vWriteIconSSP2 005E                    _I2C_vInitSlaveSSP1 0B9F  
                          _eInputMode 0065                ?_ST7032_vClearDispSSP2 0070  
              ?_ST7032_vClearIconSSP2 0070               __end_of__initialization 002A  
                    ?_I2C_u8MstTxSSP2 0070       __end_of_ST7032_vDispSettingSSP2 0B51  
                    ?_vMasterWaitSSP2 0070                   ?_I2C_vInitSlaveSSP1 0029  
               ssp2_vLCDTest04@u8Addr 00A6                 ssp2_vLCDTest04@u8SVal 00A7  
                 ___bmul@multiplicand 0029                        __pcstackCOMMON 0070  
            __end_of_timer_vInterrupt 0B78            __end_of_criticalSec_vBegin 0A56  
                        __pidataBANK1 0A99                       ??_KEYPAD_u8Read 0078  
              _ST7032_bCursorLeftSSP2 0A82                  ??_I2C_vInitSlaveSSP1 002C  
        ST7032_vWriteStringSSP2@pcStr 0053              __size_of_ssp2_vLCDTest01 00EE  
            __size_of_ssp2_vLCDTest02 0231              __size_of_ssp2_vLCDTest03 01A5  
            __size_of_ssp2_vLCDTest04 0089            ST7032_vWriteIconSSP2@u8Map 005D  
                __end_of_KEYPAD_vInit 0C85                            __pbssBANK0 005E  
                          __pbssBANK1 00D7   __end_of_ST7032_u8GetCursorColNoSSP2 0AC4  
         _ST7032_u8GetCursorColNoSSP2 0AB3                 __size_of_vDmyCallback 0001  
                vExecCmdEndSSP2@u8Cmd 002A                            __pmaintext 077D  
            ??_ST7032_vWriteCGRAMSSP2 00A0                               ?___bmul 0029  
                             ?___omul 0029               __size_of_bSetCursorSSP2 0046  
                          __pintentry 0004                               ?_memset 0029  
                 ___omul@multiplicand 0031                          _vDmyCallback 0003  
                             _SSP1ADD 0212                               _SSP2ADD 021A  
                             _SSP1BUF 0211                               _SSP2BUF 0219  
                      _ssp1_vCallback 0C1F                               _SSP1MSK 0213  
                             _SSP2MSK 021B                     _I2C_vSlaveIsrSSP1 0BF3  
               __size_of_vExecCmdSSP2 000B                 _ST7032_bSetCursorSSP2 0BC9  
                  ?_I2C_vSlaveIsrSSP1 0070             __size_of_ST7032_vInitSSP2 006B  
       __size_of_KEYPAD_bUpdateBuffer 003E   __end_of_ST7032_u8GetCursorRowNoSSP2 0AD5  
         _ST7032_u8GetCursorRowNoSSP2 0AC4                      _criticalSec_vEnd 0A5D  
                 ??_I2C_vSlaveIsrSSP1 0075      __size_of_ST7032_bCursorRightSSP2 000C  
                          _pvSSP1Func 00D5                            _pvSSP2Func 00D3  
    __size_of_ST7032_vWriteStringSSP2 0047                               _u8Depth 0062  
                     _vExecCmdEndSSP2 0AA5                            _readColumn 0CFC  
                     __size_of___bmul 0012                               ___awdiv 0EEF  
         __size_of_I2C_u8MstStartSSP2 001D                               ___awmod 0D41  
                     __size_of___omul 0048              I2C_vInitMasterSSP2@eMode 002A  
                     __size_of_memset 0096                               __ptext1 06F4  
                             __ptext2 0C85                               __ptext3 0EA5  
                             __ptext4 025F                               __ptext5 0F41  
                             __ptext6 002E                               __ptext7 0B30  
                             __ptext8 0AC4                               __ptext9 0AB3  
                        __size_of_ISR 0009                          _vExecCmdSSP2 0A77  
          ST7032_vWriteCharSSP2@cData 0054                   _I2C_vInitMasterSSP2 0AFC  
    __size_of_ST7032_vDispSettingSSP2 0021                      ___awmod@dividend 004E  
              __end_of_ssp1_vCallback 0C51             __end_of_I2C_vSlaveIsrSSP1 0C1F  
                             clrloop0 0A44            ST7032_vWriteDataSSP2@u8Idx 0059  
          ST7032_vWriteDataSSP2@u8Len 0053                  end_of_initialization 002A  
                      ___omul@product 003A             KEYPAD_bUpdateBuffer@u8Idx 007D  
                             init_ram 0A49                               memset@c 0029  
                             memset@k 002F                               memset@n 002B  
                             memset@s 0032                     ??_ssp2_vLCDTest01 00A4  
                   ??_ssp2_vLCDTest02 00A4                     ??_ssp2_vLCDTest03 00A4  
                   ??_ssp2_vLCDTest04 00A4                               initloop 0A4A  
                ?_I2C_vInitMasterSSP2 0029                     vExecCmdSSP2@u8Cmd 002A  
     __size_of_ST7032_vWriteCGRAMSSP2 0054             __size_of_I2C_vMstStopSSP2 0007  
                    __CFG_FOSC$INTOSC 0000        __size_of_ST7032_vWriteCharSSP2 0027  
      __size_of_ST7032_vWriteDataSSP2 0049                       ?_ssp1_vCallback 0070  
               __size_of_KEYPAD_vInit 0034         __end_of_ST7032_vWriteCharSSP2 0B9F  
       __end_of_ST7032_vWriteDataSSP2 0EA5               ??_ST7032_vClearDispSSP2 002B  
         I2C_vInitSlaveSSP1@u8Address 002C                ?_ST7032_bSetCursorSSP2 005D  
             ??_ST7032_vClearIconSSP2 005D        __size_of_ST7032_vWriteIconSSP2 0039  
       __end_of_ST7032_vWriteIconSSP2 0CBE               __end_of_vExecCmdEndSSP2 0AB3  
               ??_I2C_vInitMasterSSP2 002A               ?_ST7032_bCursorLeftSSP2 0070  
                         ?_readColumn 0070                        _bSetCursorSSP2 0D87  
                   ?_timer_vInterrupt 0070                        __end_of___bmul 0AE7  
                      __end_of___omul 0E5C                          _KEYPAD_vInit 0C51  
                  ??_timer_vInterrupt 0027                        __end_of_memset 06F4  
                 start_initialization 000F            __size_of_I2C_vSlaveIsrSSP1 002C  
                  _criticalSec_vBegin 0A4F                           __end_of_ISR 000D  
              _ST7032_vWriteCGRAMSSP2 0F41                   ?_criticalSec_vBegin 0070  
                    _ST7032_vInitSSP2 0F95       ST7032_vWriteCGRAMSSP2@pu8BitMap 005D  
                   ___omul@multiplier 0029               _ST7032_bCursorRightSSP2 0A8D  
      __end_of_ST7032_bCursorLeftSSP2 0A8D               _ST7032_vWriteStringSSP2 0DCD  
                bSetCursorSSP2@u8Addr 005B                __end_of_bSetCursorSSP2 0DCD  
                            ??___bmul 002A              __size_of_I2C_u8MstTxSSP2 000A  
                            ??___omul 0039              __size_of_vMasterWaitSSP2 0008  
                         __pdataBANK1 00CB           ST7032_vWriteIconSSP2@u8Addr 00A0  
                ??_criticalSec_vBegin 0070                 __end_of_KEYPAD_u8Read 05BF  
                            ??_memset 002D                            memset@dest 0031  
             _ST7032_vDispSettingSSP2 0B30           __size_of_I2C_vInitSlaveSSP1 002A  
            __end_of_criticalSec_vEnd 0A65                             ___latbits 0001  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                 __size_of_readColumn 0045           ST7032_vWriteCGRAMSSP2@u8Idx 00A3  
                    ?_vExecCmdEndSSP2 0070                       ?_bSetCursorSSP2 0070  
         I2C_vInitMasterSSP2@u8ClkDiv 0029                              ?___awdiv 0029  
                            ?___awmod 004C                      _I2C_vMstStopSSP2 0A56  
        __end_of_KEYPAD_bUpdateBuffer 0CFC           I2C_u8MstStartSSP2@u8Address 002A  
                     _ssp2_vLCDTest01 0404                       _ssp2_vLCDTest02 002E  
                     _ssp2_vLCDTest03 025F                       _ssp2_vLCDTest04 06F4  
      ST7032_vWriteDataSSP2@pu8WkData 005B             ??_ST7032_bCursorRightSSP2 005D  
           ??_ST7032_vWriteStringSSP2 0055        ST7032_vDispSettingSSP2@bCursor 002B  
                            _HEX_LIST 07E8                   vDmyCallback@u8BusNo 0070  
                           clear_ram0 0A43                              _KEY_LIST 080A  
          __end_of_I2C_u8MstStartSSP2 0B30       ST7032_vWriteStringSSP2@pcWkData 0059  
                            _SSP1CON1 0215                              _SSP1CON2 0216  
                            _SSP1CON3 0217                              _SSP2CON1 021D  
                            _SSP2CON2 021E                              _SSP2CON3 021F  
                            _SSP1STAT 0214                              _SSP2STAT 021C  
           ??_ST7032_vDispSettingSSP2 002D                      ??_ssp1_vCallback 0072  
      ST7032_vWriteCGRAMSSP2@u8CharNo 00A1           ST7032_bSetCursorSSP2@u8Addr 00A3  
                   ??_I2C_u8MstTxSSP2 0029                  KEYPAD_u8Read@u8KeyNo 0025  
                   ??_vMasterWaitSSP2 0029                  KEYPAD_u8Read@u8PortA 0020  
                KEYPAD_u8Read@u8PortB 0021               ??_ST7032_bSetCursorSSP2 00A0  
      __size_of_ST7032_vClearDispSSP2 0015         __end_of_ST7032_vClearDispSSP2 0AFC  
      __size_of_ST7032_vClearIconSSP2 004A         __end_of_ST7032_vClearIconSSP2 0EEF  
                  ssp2_vLCDTest01@val 00A7                      _bMstStartFlgSSP1 00D8  
                    _bMstStartFlgSSP2 00D7        ST7032_vWriteCGRAMSSP2@pu8WkMap 00A2  
                 bSetCursorSSP2@u8Pos 005C                          ??_readColumn 0070  
         KEYPAD_bUpdateBuffer@u8KeyNo 007C                              _u8RxData 0066  
                    __size_of___awdiv 0052                      __size_of___awmod 0046  
             __end_of_ssp2_vLCDTest01 04F2               __end_of_ssp2_vLCDTest02 025F  
             __end_of_ssp2_vLCDTest03 0404               __end_of_ssp2_vLCDTest04 077D  
            __end_of_ST7032_vInitSSP2 1000               ?_ST7032_vWriteCGRAMSSP2 005D  
                            __ptext10 0A8D                              __ptext11 0A82  
                            __ptext20 0D87                              __ptext12 0404  
                            __ptext21 0D41                              __ptext13 05BF  
                            __ptext30 0A65                              __ptext22 0EEF  
                            __ptext14 0E14                              __ptext31 0C51  
                            __ptext23 0AD5                              __ptext15 0DCD  
                            __ptext40 04F2                              __ptext32 065E  
                            __ptext24 0F95                              __ptext16 0E5C  
                            __ptext41 0CFC                              __ptext33 0B9F  
                            __ptext25 0A77                              __ptext17 0B78  
                            __ptext42 0BF3                              __ptext34 0AFC  
                            __ptext26 0AA5                              __ptext18 0AE7  
                            __ptext43 0C1F                              __ptext27 0A56  
                            __ptext19 0BC9                              __ptext44 0003  
                            __ptext36 0B51                              __ptext28 0A6D  
                            __ptext37 0CBE                              __ptext29 0B13  
                            __ptext38 0A5D                              __ptext39 0A4F  
           __size_of_timer_vInterrupt 0027                          _SSP1CON1bits 0215  
                        _SSP1CON2bits 0216                 _ST7032_vWriteCharSSP2 0B78  
               _ST7032_vWriteDataSSP2 0E5C           __end_of_I2C_vInitMasterSSP2 0B13  
                        _SSP2CON1bits 021D                          _SSP2CON2bits 021E  
          I2C_u8MstStartSSP2@bReadFlg 0029                    __end_of_readColumn 0D41  
        ?_ST7032_u8GetCursorColNoSSP2 0070                         __size_of_main 006B  
                _KEYPAD_bUpdateBuffer 0CBE                 _ST7032_vWriteIconSSP2 0C85  
                       __size_of_rand 009F         ST7032_vDispSettingSSP2@bBlink 002C  
                            int$flags 007E                          _SSP1STATbits 0214  
      __end_of_ST7032_vWriteCGRAMSSP2 0F95                          _SSP2STATbits 021C  
             I2C_vInitSlaveSSP1@eMode 0029                 vDmyCallback@u8EvtType 0071  
         ST7032_vWriteDataSSP2@pcData 005A                     ?_criticalSec_vEnd 0070  
                       ?_vDmyCallback 0070                        __pstringtext10 0892  
                      __pstringtext11 08A3                        __pstringtext20 093C  
                      __pstringtext12 08B4                        __pstringtext21 094D  
                      __pstringtext13 08C5                        __pstringtext22 095E  
                      __pstringtext14 08D6                        __pstringtext23 096E  
                      __pstringtext15 08E7                        __pstringtext24 097D  
                      __pstringtext16 08F8                        __pstringtext25 098A  
                      __pstringtext17 0909                        __pstringtext26 0000  
                      __pstringtext18 091A                        __pstringtext19 092B  
             ssp1_vCallback@u8EvtType 0071                    ??_criticalSec_vEnd 0070  
                            intlevel1 0000              __end_of_I2C_vMstStopSSP2 0A5D  
               ?_KEYPAD_bUpdateBuffer 0070                      ??_bSetCursorSSP2 0053  
                   __CFG_CLKOUTEN$OFF 0000         ??_ST7032_u8GetCursorColNoSSP2 0053  
        ?_ST7032_u8GetCursorRowNoSSP2 0070                    KEYPAD_u8Read@u8Col 0024  
                  KEYPAD_u8Read@u8Row 0026            __end_of_I2C_vInitSlaveSSP1 0BC9  
         __size_of_criticalSec_vBegin 0007                      ?_ssp2_vLCDTest01 0070  
                    ?_ssp2_vLCDTest02 0070                      ?_ssp2_vLCDTest03 0070  
                    ?_ssp2_vLCDTest04 0070                         __pstringtext1 080A  
                       __pstringtext2 07E8                         __pstringtext3 081B  
                       __pstringtext4 082C                         __pstringtext5 083D  
                       __pstringtext6 084E                         __pstringtext7 085F  
                       __pstringtext8 0870                         __pstringtext9 0881  
                         _stStateSSP1 0060                           _stStateSSP2 005E  
                          _OPTION_REG 0095                         ?_vExecCmdSSP2 0070  
                      ??_vDmyCallback 0072                   readColumn@u16PinMap 0075  
              ?_ST7032_vWriteCharSSP2 0070                ?_ST7032_vWriteDataSSP2 0053  
               ssp1_vCallback@u8BusNo 0070                KEYPAD_u8Read@u16PinMap 0022  
              ?_ST7032_vWriteIconSSP2 005D                __size_of_KEYPAD_u8Read 00CD  
                     _I2C_u8MstTxSSP2 0A6D                       readColumn@u8Col 0077  
       ??_ST7032_u8GetCursorRowNoSSP2 0032  
